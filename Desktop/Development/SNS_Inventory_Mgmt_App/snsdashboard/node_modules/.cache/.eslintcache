[{"/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/index.js":"1","/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/App.js":"2","/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/reportWebVitals.js":"3","/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/TopBar/TopBar.jsx":"4","/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/assets/Constants.jsx":"5","/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/Components/HomeItem/HomeItem.js":"6","/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/Components/Sites/Sites.js":"7","/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/Components/Requisition/Requisition.jsx":"8","/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/Components/Units/Units.jsx":"9","/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/Home/Home.jsx":"10","/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/Login/Login.jsx":"11","/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/Components/PopUp/PopUp.jsx":"12","/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/Components/IsLoading/isLoading.jsx":"13","/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/Components/TnP/TnP.jsx":"14"},{"size":538,"mtime":1683484336521,"results":"15","hashOfConfig":"16"},{"size":421,"mtime":1683283791396,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1682619736177,"results":"18","hashOfConfig":"16"},{"size":845,"mtime":1685895527114,"results":"19","hashOfConfig":"16"},{"size":1705,"mtime":1695461896241,"results":"20","hashOfConfig":"16"},{"size":1031,"mtime":1694879079654,"results":"21","hashOfConfig":"16"},{"size":424,"mtime":1694893134804,"results":"22","hashOfConfig":"16"},{"size":216,"mtime":1685826698143,"results":"23","hashOfConfig":"16"},{"size":9502,"mtime":1695305430419,"results":"24","hashOfConfig":"16"},{"size":6464,"mtime":1695030379558,"results":"25","hashOfConfig":"16"},{"size":3730,"mtime":1695311096403,"results":"26","hashOfConfig":"16"},{"size":340,"mtime":1694985143968,"results":"27","hashOfConfig":"16"},{"size":347,"mtime":1695305196877,"results":"28","hashOfConfig":"16"},{"size":24579,"mtime":1695464224321,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"1nw7va8",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"33"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"33"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"33"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"33"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"33"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"33"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"33"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},"/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/index.js",[],[],[],"/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/App.js",[],[],"/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/reportWebVitals.js",[],[],"/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/TopBar/TopBar.jsx",["81"],[],"import React from \"react\";\nimport './TopBar.css';\nimport logo from \"../assets/images/logo.png\"\nimport logoSvg from \"../assets/images/logo.svg\"\nimport { useNavigate } from \"react-router-dom\";\n\nconst TopBar = () => {\n\nvar navigate = useNavigate();\n\nconst logoutProcess = () => {\n\nnavigate(\"/\");\n}  \n\nconsole.log(logo);\n    return(\n        \n\n        <nav class=\"flex items-center justify-between flex-wrap bg-gray-500 p-1 topBar\" >\n  <div class=\"flex items-center flex-shrink-0 text-white mr-6\">\n   \n   <img src={logoSvg} height={35} width={55} alt=\"\" />\n   \n  </div>\n\n    <div>\n      <a onClick={logoutProcess} class=\"inline-block text-sm px-4 py-2 leading-none border rounded text-white border-white hover:border-transparent hover:text-teal-500 hover:bg-white mt-4 lg:mt-0 logoutBtn\">Logout</a>\n    </div>\n\n</nav>\n    );\n}\n\nexport default TopBar;","/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/assets/Constants.jsx",[],[],"/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/Components/HomeItem/HomeItem.js",["82","83","84","85"],[],"import React, { useEffect, useState } from \"react\";\nimport styles from './HomeItem.module.css'\n\nfunction HomeItem(props) {\n\nconst[sites,setSites] = useState(props.sites);   \nconst[inventory,setInventory] = useState([]);\nconst[requisitions,setRequisitions] = useState([]);\n\n\nconst getActiveSites = () => {\nconsole.log(\"sites length is \"+sites.length);\nif(sites.length===0)\nreturn 0;\n\nreturn -1;\n\n};\n\nconst getInventoryValue = () => {\n\n    if(inventory.length === 0)\n    return 0;\n\n    else return -1;\n};\n\nreturn(\n    <div >\n   <div className={styles.headerBox}>\n   <h1>Dashboard</h1>\n   </div>\n   <div className={styles.itemsBox}>\n    \n    <h2 className={styles.items}>No of Sites :  {sites.length}</h2>\n\n    <h2 className={styles.items}>Active Sites :  {getActiveSites()}</h2>\n\n    <h2 className={styles.items}>Total Inventory Value : Rs. {getInventoryValue()}</h2>\n    <h2 className={styles.items}>Total Active Requisitions :  {requisitions.length}</h2>\n\n\n    \n    </div> \n\n   \n    \n    </div>\n    \n)\n\n};\n\nexport default HomeItem;","/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/Components/Sites/Sites.js",["86","87","88","89"],[],"import React, { useEffect, useState } from \"react\";\nimport styles from  \"./Sites.module.css\";\nimport * as constants from \"../../assets/Constants\"\n\nfunction Sites(props) {\n\n  const[sites, setSites] = useState(props.sites);\n\n \n\nreturn(\n    <div >\n \n <div className={styles.headerBox}>\n   <h1>Site Management</h1>\n   </div>\n\n <div className={styles.allSitesBox}>\n    </div>   \n\n    \n\n    </div>\n   \n)\n\n};\n\nexport default Sites;","/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/Components/Requisition/Requisition.jsx",["90","91"],[],"import React, { useEffect, useState } from \"react\";\nimport \"./Requisition.css\"\n\nfunction Requisition() {\n\nreturn(\n    <div id=\"mainBox\">\n        <h1>Requisition</h1>\n\n    </div>\n    )\n\n};\n\nexport default Requisition;","/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/Components/Units/Units.jsx",["92"],[],"import React, { useEffect, useState } from \"react\";\nimport myStyle from \"./Units.module.css\";\nimport * as constants from \"../../assets/Constants\";\nimport Loading from \"../IsLoading/isLoading\"\n\nfunction Units(props) {\n\nconst[units,setUnits] = useState([]);\nconst[categories,setCategories] = useState([]);\nconst[selectedUnit,setSelectedUnit] = useState(\"\");\nconst[newUnit,setNewUnit] = useState(\"\");\nconst[updateUnit,setUpdateUnit] = useState('');\nconst[isEditDisabledUnit,setIsEditDisabledUnit] = useState(true);\nconst[isEditDisabledCategory,setIsEditDisabledCategory] = useState(true);\nconst[selectedCategory,setSelectedCategory] = useState('');\nconst[updateCategory,setUpdateCategory] = useState('');\nconst[newCategory,setNewCategory] = useState('');\nconst[isLoading,setIsLoading] = useState(true);\n\nuseEffect(() => {\ngetUnits();\ngetCategories();\n},[]);\n\nconst handleCategoriesChange = (e) => {\n\n    setSelectedCategory(e.target.value);\n\n}\n\nconst handleUnitsChange = (e) => {\n\nsetSelectedUnit(e.target.value);\n}  \n\nconst editUnit = () => {\n  setUpdateUnit(selectedUnit);\n  setIsEditDisabledUnit(false);\n}\n\nconst getUnits = async() => {\n \n  try{ \n      setIsLoading(true);\n      console.log(constants.getUnits);\n        await fetch(constants.getUnits,{\n          method : \"Get\"\n        })\n               .then((response) => {\n                  return response.json();\n               })\n               .then((myJson) => {\n                    console.log(\"myjson is \"+myJson);\n                   setUnits(myJson);\n                   console.log(\"units is \"+units);\n                   setIsLoading(false);\n               });\n       } catch (e) {\n           console.log(e);\n       }\n};\n\nconst processAPI = async(url,methodName,type) =>{\n  \n  var responseValue = -1;\n  setIsLoading(true);\n  await fetch(url, {\n    method : methodName,\n       })\n  .then((response1) => {return response1.json()})\n  .then((response1)=> {\n    console.log(\"server response \"+response1);\n    responseValue = response1;\n  })\n  .then(()  => {\n    console.log(\"response is \"+responseValue);\n\n    setIsLoading(false);\n    \n   if(type===\"unit\")\n      {\n        getUnits();\n        handleResetUnit();\n\n        if(responseValue===1 && methodName===\"Post\")\n        {\n         alert(\"Unit created succesfully !\"); \n        }\n        else if(responseValue===1 && methodName===\"Delete\")\n        {\n         alert(\"Unit deleted succesfully !\"); \n        }\n        else if(responseValue===-1)\n        {\n          alert(\"Unit already exists !\");\n        }\n        else if(responseValue===5 && methodName===\"Delete\")\n        {\n         alert(\"Unit already mapped to existing T&P, can't delete it !\"); \n        }\n        else{\n          alert(\"Error...try again !\");\n        }\n      }\n      else{\n        getCategories();\n        handleResetCategories();\n        if(responseValue===1 && methodName === \"Post\")\n        {\n         alert(\"Category created succesfully !\"); \n        }\n        else if(responseValue===1 && methodName===\"Delete\")\n        {\n         alert(\"Category deleted succesfully !\"); \n        }\n        else if(responseValue===5 && methodName===\"Delete\")\n        {\n         alert(\"Category already mapped to existing T&P, can't delete it !\"); \n        }\n        else if(responseValue===-1)\n        {\n          alert(\"Category already exists !\");\n        }\n        else{\n          alert(\"Error...try again !\");\n        }\n      }\n    setIsLoading(false);\n  });\n\n}\n\nconst createUnit = () =>  {\n\n  if(newUnit.length>0)\n  {\n    const url = constants.createUnit(newUnit);\n    console.log(\"New unit url - \"+url);\n  \n    processAPI(url,\"Post\",\"unit\"); \n    \n  }\n  \n  }\n\n  const handleResetUnit = () => {\n    setNewUnit('');\n    setUpdateUnit('');\n    setSelectedUnit('');\n    setIsEditDisabledUnit(true);\n  }\n\n  const handleResetCategories = () => {\n    setNewCategory('');\n    setUpdateCategory('');\n    setSelectedCategory('');\n    setIsEditDisabledCategory(true);\n  }\n\n\nconst getCategories = () => {\n  try{ \n   console.log(constants.getCategories);\n  fetch(constants.getCategories)\n           .then((response) => {\n                console.log(response);\n               return response.json();\n           })\n           .then((myJson) => {\n               // console.log(myJson);\n               setCategories(myJson);\n           });\n   } catch (e) {\n       console.log(e);\n   }\n};\n\n\nconst unitInputChange = (e) => {\nsetNewUnit(e.target.value);\n}\n\nconst unitUpdateChange = (e) => {\n  setUpdateUnit(e.target.value);\n}\n\nconst updateTheUnit = () => {\n\n  if(updateUnit.length>0)\n  {\n    const url = constants.updateUnit(selectedUnit,updateUnit);\n\n    console.log(url);\n    \n    processAPI(url,\"Post\",\"unit\");\n     \n  }\n\n};\n\nconst DeleteTheUnit = ()=> {\n  \n  if(updateUnit.length>0)\n  {\n    const confirm = window.confirm(\"Are you sure you want to delete the unit ?\");\n  \n    if(confirm)\n    {\n      const url = constants.deleteUnit(updateUnit);\n\n      console.log(url);\n    \n      processAPI(url,\"Delete\",\"unit\");\n    }\n    else{\n      handleResetUnit();\n    }\n    \n  }\n  \n};\n\nconst editCategory = () => {\nsetUpdateCategory(selectedCategory);\nsetIsEditDisabledCategory(false);\n}\n\nconst categoryUpdateChange = (e) => {\nsetUpdateCategory(e.target.value);\n}\n\nconst categoryInputChange = (e) => {\n  setNewCategory(e.target.value);\n}\n\nconst createCategory = () => {\n  if(newCategory.length>0)\n  {\n    const url = constants.createCategory(newCategory);\n    console.log(\"New category url - \"+url);\n  \n    processAPI(url,\"Post\",\"category\"); \n    \n  }\n}\n\nconst updateTheCategory = () => {\n\n  if(updateCategory.length>0)\n  {\n    const url = constants.updateCategory(selectedCategory,updateCategory);\n\n    console.log(url);\n    \n    processAPI(url,\"Post\",\"category\");\n     \n  }\n}\n\nconst DeleteTheCategory = () => {\n\n  if(updateCategory.length>0)\n  {\n    const confirm = window.confirm(\"Are you sure you want to delete the category ?\");\n  \n    if(confirm)\n    {\n      const url = constants.deleteCategory(updateCategory);\n\n      console.log(url);\n    \n      processAPI(url,\"Delete\",\"category\");\n    }\n    else{\n      handleResetCategories();\n    }\n\n}\n}\n\n\nreturn(  \n  <div>\n    {isLoading ? (\n     <Loading />)\n    :\n    (\n    <>    <div className={myStyle.mainBox}> \n  <h1>Units & Categories</h1>\n  </div>\n  <div className={myStyle.UnitBox}>\n    <label htmlFor=\"UnitsDropdown\">All Units</label>\n    <select\n    id=\"UnitsDropdown\"\n    className={myStyle.Unitsdropdown}\n    value={selectedUnit}\n    onChange={handleUnitsChange}\n    >\n       <option value=\"\" className={myStyle.optionValue}>Select a Unit</option>\n        {units.map((item) => (\n          <option key={item.unitName} value={item.unitName}>\n            {item.unitName}\n          </option>\n        ))}\n\n    </select>\n    <button onClick={editUnit} class=\"bg-btn-lightBlue hover:bg-blue-700 text-white font-bold py-1 px-6 rounded-full \" >Edit</button> \n  </div>\n  <div className={myStyle.newUnit}>\n  <label htmlFor=\"unit-new\">New Unit</label>\n    <input className={myStyle.newUnitTextBox} onChange={unitInputChange} type=\"text\" value={newUnit} name=\"unit-new\" />\n    <button onClick={createUnit} class=\"bg-btn-darkBlue hover:bg-green-700 text-white font-bold py-1 px-6 rounded-full \" >Create Unit</button> \n  </div>\n\n  <div className={myStyle.newUnit}>\n  <label htmlFor=\"unit-new\">Edit Unit</label>\n    <input className={myStyle.updateUnitTextBox} disabled={isEditDisabledUnit} onChange={unitUpdateChange} type=\"text\" value={updateUnit} name=\"unit-update\" />\n    <button onClick={updateTheUnit} class=\"bg-btn-firozi hover:bg-purple-700 text-white-bold font-bold py-1 px-6 rounded-full \"  >Update</button> \n    <button onClick={DeleteTheUnit}  style={{marginLeft : \"1%\"}} class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-6 rounded-full \" >Delete</button> \n  </div>\n\n  \n  <div className={myStyle.CategoriesBox}>\n    <label htmlFor=\"UnitsDropdown\">All Categories</label>\n    <select\n    id=\"CategoriesDropdown\"\n    className={myStyle.Categoriesdropdown}\n    value={selectedCategory}\n    onChange={handleCategoriesChange}\n    >\n       <option value=\"\" className={myStyle.optionValue}>Select a Category</option>\n        {categories.map((item) => (\n          <option key={item.categoryName} value={item.categoryName}>\n            {item.categoryName}\n          </option>\n        ))}\n\n    </select>\n    <button onClick={editCategory} class=\"bg-btn-lightBlue hover:bg-blue-700 text-white font-bold py-1 px-6 rounded-full \" >Edit</button> \n  </div>\n  <div className={myStyle.newCategory}>\n  <label htmlFor=\"unit-new\">New Category</label>\n    <input className={myStyle.newCategoryTextBox} onChange={categoryInputChange} type=\"text\" value={newCategory} name=\"category-new\" />\n    <button onClick={createCategory} class=\"bg-btn-darkBlue hover:bg-green-700 text-white font-bold py-1 px-6 rounded-full \" >Create Category</button> \n  </div>\n\n  <div className={myStyle.newCategory}>\n  <label htmlFor=\"category-new\">Edit Category</label>\n    <input className={myStyle.updateCategoryTextBox} disabled={isEditDisabledCategory} onChange={categoryUpdateChange} type=\"text\" value={updateCategory} name=\"category-update\" />\n    <button onClick={updateTheCategory} class=\"bg-btn-firozi hover:bg-purple-700 text-white-bold font-bold py-1 px-6 rounded-full \"  >Update</button> \n    <button onClick={DeleteTheCategory}  style={{marginLeft : \"1%\"}} class=\"bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-6 rounded-full \" >Delete</button> \n  </div>\n  </>\n\n  )\n\n}\n</div>\n  \n)\n\n}\n\nexport default Units;","/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/Home/Home.jsx",["93"],[],"import React, { useEffect, useState } from \"react\";\nimport myStyles from './Home.module.css';\nimport Helmet from 'react-helmet';\nimport { IconContext } from \"react-icons\";\nimport {GiHamburgerMenu} from 'react-icons/gi'; \nimport { MdFactory } from \"react-icons/md\";\nimport { BsTools } from \"react-icons/bs\";\nimport { TbRulerMeasure } from \"react-icons/tb\";\nimport { AiFillHome,AiFillFileText } from \"react-icons/ai\";\nimport logo from \"../assets/images/logo.png\";\nimport TopBar from \"../TopBar/TopBar\";\nimport HomeItem from \"../Components/HomeItem/HomeItem\";\nimport Sites from \"../Components/Sites/Sites\"\nimport TnP from \"../Components/TnP/TnP\"\nimport Units from \"../Components/Units/Units\"\nimport Requisition from \"../Components/Requisition/Requisition\"\nimport * as constants from \"../assets/Constants\"\n\nconst Home = () => {\n\nconst[collapsed,setCollapsed] = useState(false);    \nconst[currentWindow,setCurrentWindow] = useState(0);\nconst[sites,setSites] = useState([]);\nconst[tnp,setTnP] = useState([]);\n\n\nconst[requisitions,setRequisitions]= useState([{}]);\n\nuseEffect(() => {\n\n    getSites();\n    getTnP();\n    getRequisitions();\n   \n\n},[]);\n\nconst getSites = () => {\n\n   try{ \n    console.log(constants.getSites);\n   fetch(constants.getSites)\n            .then((response) => {\n                 console.log(response);\n                return response.json();\n            })\n            .then((myJson) => {\n                // console.log(myJson);\n                setSites(myJson);\n            });\n    } catch (e) {\n        console.log(e);\n    }\n};\n\nconst getTnP = () => {\n    try{ \n        console.log(constants.getTnP);\n        fetch(constants.getTnP)\n                 .then((response) => {\n                      console.log(response);\n                     return response.json();\n                 })\n                 .then((myJson) => {\n                     // console.log(myJson);\n                     setTnP(myJson);\n                 });\n         } catch (e) {\n             console.log(e);\n         }\n};\n\n\n \nconst getRequisitions = () => {\n    try{ \n        console.log(constants.getRequisitions);\n        fetch(constants.getRequisitions)\n                 .then((response) => {\n                      console.log(response);\n                     return response.json();\n                 })\n                 .then((myJson) => {\n                     // console.log(myJson);\n                     setRequisitions(myJson);\n                 });\n         } catch (e) {\n             console.log(e);\n         }\n};\n\n\nfunction getSideBarStatus () {\n\n    if(!collapsed)\n    return myStyles.sideBarDivNotCollapsed;\n\n    return myStyles.sideBarDivCollapsed;\n\n\n};    \n\nfunction CollapseSidebar() {\n\n    setCollapsed(!collapsed);\n}\n\nfunction getIconSize(){\n\n    if(!collapsed)\n    return \"1em\";\n\n    else\n    return \"1.5em\";\n}\n\nfunction getDivClass () {\n\n    if(collapsed)\n    return myStyles.DivBoxCollapsed;\n\n    else\n    return myStyles.DivBoxExpanded;\n}\n\nfunction getCentreStage() {\n\n    if(currentWindow === 0)\n        {\n            return (\n                <HomeItem sites = {sites} tnp={tnp} requisitions={requisitions} />\n            );\n        }\n        else if(currentWindow === 1)\n        {\n            return(\n                <Sites  sites = {sites} />\n            )\n        }\n        else if(currentWindow === 2)\n        {\n            return(\n                <TnP />\n            )\n        }\n        else if(currentWindow === 3)\n        {\n            return(\n                <Units />\n            )\n        }\n        else if(currentWindow === 4)\n        {\n            return(\n                <Requisition />\n            )\n        }\n        else \n        {\n            return(\n                <HomeItem />\n            )\n        }\n       \n\n   \n}\n\n\n    return(\n        <>\n        <Helmet>\n         \n            <body />\n                <style>\n                    {`                        \n                        body{\n                            background-color: rgb(254, 254, 246);               \n                       \n                        }\n                    `}\n                </style>\n            \n        </Helmet>\n       <TopBar />            \n\n     \n        <div id=\"sideBar\" className={getSideBarStatus()}>\n        <div className={getDivClass()} style={{paddingTop : \"0px\"}} onClick={CollapseSidebar}>\n        {!collapsed && <h3 className={myStyles.iconWithtext} style={{marginRight: \"10%\"}} >SIA </h3>}\n        <IconContext.Provider value={{ size : getIconSize()}}>\n         <GiHamburgerMenu className={myStyles.iconWithtext}  /> \n         </IconContext.Provider>\n        </div>  \n\n         <div  className={getDivClass()} onClick={() => setCurrentWindow(0)} >\n        {!collapsed && <h3 className={myStyles.iconWithtext } style={{marginRight: \"10%\"}} >Home </h3>}\n        <IconContext.Provider value={{ size : getIconSize()}}>\n         <AiFillHome className={myStyles.iconWithtext}  /> \n         </IconContext.Provider>\n        </div>  \n            \n        <div className={getDivClass()} onClick={() => setCurrentWindow(1)} >\n        {!collapsed && <h3 className={myStyles.iconWithtext} >Sites </h3>}\n        <IconContext.Provider value={{ size : getIconSize()}}>\n         <MdFactory className={myStyles.iconWithtext} /> \n         </IconContext.Provider>\n        </div>  \n\n        <div className={getDivClass()} onClick={() => setCurrentWindow(2)} >\n        {!collapsed && <h3 className={myStyles.iconWithtext} >T&P </h3>}\n        <IconContext.Provider value={{ size : getIconSize()}}>\n         <BsTools className={myStyles.iconWithtext} /> \n         </IconContext.Provider>\n        </div>  \n\n        <div className={getDivClass()} onClick={() => setCurrentWindow(3)} >\n        {!collapsed && <h3 className={myStyles.iconWithtext} >Units </h3>}\n        <IconContext.Provider value={{ size : getIconSize()}}>\n         <TbRulerMeasure className={myStyles.iconWithtext}  /> \n         </IconContext.Provider>\n        </div>  \n\n        <div className={getDivClass()} onClick={() => setCurrentWindow(4)} >\n        {!collapsed && <h3 className={myStyles.iconWithtext} >Requisition </h3>}\n        <IconContext.Provider value={{ size : getIconSize()}}>\n         <AiFillFileText className={myStyles.iconWithtext}  /> \n         </IconContext.Provider>\n        </div>   \n            \n            \n        </div>\n      \n\n        <div className={myStyles.displayInline}>\n        {getCentreStage()}\n                </div>\n        </>\n    )\n}\n\nexport default Home;","/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/Login/Login.jsx",["94","95","96"],[],"import {React,useEffect,useState} from \"react\";\nimport styles from './Login.module.css';\nimport TopBar from '../TopBar/TopBar';\nimport * as constant from \"../assets/Constants\";\nimport { useNavigate } from \"react-router-dom\";\nimport logoSvg from \"../assets/images/logo.png\"\nimport Loading from \"../Components/IsLoading/isLoading\"\n\nconst Login = () => {\n\n    var navigate = useNavigate();\n\n    const[userName,setUserName] = useState(\"\");\n    const[password,setPassword] = useState(\"\");\n    const[response,setResponse] = useState('');\n    const[isLoading,setIsLoading] = useState(false);\n    const[isHidden,setIsHidden] = useState(true);\n\n    // useEffect(() => {\n    //   console.log(\"Resposne is \"+response);\n    //   HandleLogin()\n    // },[response]);\n\n    const HideAlert = () => {\n\n      setIsHidden(true) ;\n        setResponse('');\n\n    };\n\n    const HandleLogin = async() => {\n\n      var url = constant.Login+userName+\"&password=\"+password;\n      console.log(url);\n      setIsLoading(true);\n                 \n      await fetch(url)\n    .then((response) => {\n      return response.text();\n    })\n    .then((response) => {\n      setIsLoading(false);\n      console.log(\"Abhi response is \" + response);\n\n      if (response === \"true\") {\n        console.log(\"success as response is \" + response);\n        navigate('/home');\n      } else {\n        console.log(\"failure as response is \" + response);\n        setIsHidden(false);\n      }\n    });\n};\n\n\n\n\n    return(\n        isLoading ? (\n          <Loading />\n        ) :\n        <div id=\"mainBody\">\n         <div className={styles.logoBox}> \n         <img src={logoSvg} alt=\"SIA\" className={styles.logo}/>        \n         </div>\n        <div className={styles.loginBox}>\n        <label htmlFor=\"userName\" className={\"block text-sm font-medium leading-6 text-gray-900 \"+ styles.userName} >Username</label>  \n        <input id=\"userName\" value={userName} onChange={(e) => setUserName(e.target.value)} className={\"block w-full rounded-md border-0 py-1.5 pl-7 pr-20 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6 \"+ styles.userName}  name=\"userName\" placeholder=\"User name\" type=\"text\" onKeyDown={HideAlert} />\n        <label htmlFor=\"password\" className={\"block text-sm font-medium leading-6 text-gray-900 \"+ styles.userName} >Password</label>\n        <input id=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className={\"block w-full rounded-md border-0 py-1.5 pl-7 pr-20 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6 \" + styles.userName} name=\"password\" placeholder=\"Password\" type= \"password\" onKeyDown={HideAlert} />\n        <button onClick={HandleLogin} className={styles.LoginBtn + \" bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-full\" }>\n  Login\n</button>\n\n<div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" id=\"errorAlert\" role=\"alert\" hidden={isHidden}  >\n  <span className=\"block sm:inline\">Invalid Id or password</span>\n  <span className=\"absolute top-0 bottom-0 right-0 px-4 py-3\">\n    <svg className=\"fill-current h-6 w-6 text-red-500\" role=\"button\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" onClick={HideAlert}><title>Close</title><path d=\"M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z\"/></svg>\n  </span>\n</div>\n        </div>\n        </div>\n\n        \n    )\n\n\n};\n\nexport default Login;","/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/Components/PopUp/PopUp.jsx",[],[],"/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/Components/IsLoading/isLoading.jsx",[],[],"/Users/vineetmishra/Desktop/Development/SNS_Inventory_Mgmt_App/snsdashboard/src/Components/TnP/TnP.jsx",["97","98","99"],[],"import React, { useEffect, useState,useRef } from \"react\";\nimport styles from \"./TnP.module.css\";\nimport * as constants from \"../../assets/Constants\";\nimport uploadFile from \"../../assets/images/uploadFile.png\"\nimport excel from \"../../assets/images/excel.png\";\nimport * as XLSX from 'xlsx';\nimport Loading from \"../IsLoading/isLoading\";\n\nfunction TnP() {\n\n    //For create T&P section\nconst[newTnP,setNewTnP] = useState('');\nconst[selectedCategory,setSelectedCategory] = useState('');\nconst[categories,setCategories] = useState([]);\nconst[units,setUnits] = useState([]);\nconst[selectedUnit,setSelectedUnit] = useState('');\nconst[isLoading,setIsLoading] = useState(false);\nconst[TnPQuantity,setTnPQuantity] = useState(0);\nconst[tnpRemarks,setTnPRemarks] = useState('');\nconst[uploadFileText,setUploadFileText] = useState(\"Upload File\");\nconst[uploadFileData,setUploadFileData] = useState([]);\nconst[uploadEditFileText,setUploadEditFileText] = useState(\"Upload Edit file\")\n\n//For Edit % delete T&P section\n\nconst[tnpList,setTnpList] = useState([]);\nconst[selectedTnPID,setSelectedTnPID] = useState('');\nconst[selectedTnPName,setSelectedTnPName] = useState('');\nconst[editCategory,setEditCategory] = useState('');\nconst[editUnit,setEditUnit] = useState('');\nconst[editQuantity,setEditQuantity] = useState('');\nconst[editRemarks,setEditRemarks] = useState('');\nconst[TnpJson,setTnpJson] = useState([]);\nconst[isEditFile,setIsEditfile] = useState(false);\nconst[editUploadFileData,setEditUploadFileData] = useState([]);\n\n\nconst fileInputRef = useRef(null);\nconst fileInputRef1 = useRef(null);\n\nvar tnpUploaded = 0,\nunitsCreated = 0,\ncategoriesCreated = 0,\ntnpEdited = 0,\ntnpDeleted = 0;\n\n\nuseEffect(() => {\n    getCategories();\n    getUnits();\n    getTnPList();\n  \n  },[]);\n\n  useEffect(() => {\n    GetEditValues();\n  }, [selectedTnPID]);\n \n\nconst getTnPList = async() => {\n \n    try{ \n        setIsLoading(true);\n        console.log(constants.getTnP);\n          await fetch(constants.getTnP,{\n            method : \"Get\"\n          })\n                 .then((response) => {\n                    return response.json();\n                 })\n                 .then((myJson) => {\n                     setTnpList(myJson);\n                    \n                     setIsLoading(false);\n                   \n                 });\n         } catch (e) {\n             console.log(e);\n         }\n  };\n\nconst getUnits = async() => {\n \n    try{ \n        setIsLoading(true);\n        console.log(constants.getUnits);\n          await fetch(constants.getUnits,{\n            method : \"Get\"\n          })\n                 .then((response) => {\n                    return response.json();\n                 })\n                 .then((myJson) => {\n                     \n                     setUnits(myJson);\n                     setIsLoading(false);\n                 });\n         } catch (e) {\n             console.log(e);\n         }\n  };\n\nconst getCategories = () => {\n    try{ \n     console.log(constants.getCategories);\n    fetch(constants.getCategories)\n             .then((response) => {\n                  console.log(response);\n                 return response.json();\n             })\n             .then((myJson) => {\n                setCategories(myJson);\n             });\n     } catch (e) {\n         console.log(e);\n     }\n  };\n\nconst handleTnPInput =(e) =>{\nsetNewTnP(e.target.value);\n}\n\nconst handleCategoriesChange =(e) => {\nsetSelectedCategory(e.target.value)\n}\n\nconst handleUnitsChange = (e) =>{\nsetSelectedUnit(e.target.value)\nconsole.log(selectedUnit);\n}\n\nconst handleTnPQty = (e) =>{\nsetTnPQuantity(e.target.value);\n}\n\nconst handleTnPRemarks = (e) => {\n    setTnPRemarks(e.target.value);\n}\n\nconst uploadFileDialogue = () => {\n \n     fileInputRef.current.click();\n}\n\nconst uploadEditFileDialogue = () =>{\n  fileInputRef1.current.click();\n}\n\nconst handleFileChange =(e) => {\n    console.log(\"in upload file\");\n    setUploadFileData([]);\n    let reader = new FileReader();\n    reader.readAsBinaryString(e.target.files[0]);\n    const name = (e.target.files[0]).name;\n    reader.onload = (e) =>{\n        setUploadFileText(name+ \" selected\");\n        const data  = e.target.result;\n        const workbook = XLSX.read(data,{type : 'binary'});\n        const sheetName = workbook.SheetNames[0];\n        const sheet = workbook.Sheets[sheetName];\n        const parsedData = XLSX.utils.sheet_to_json(sheet);\n        setUploadFileData(parsedData);\n        console.log(uploadFileData);\n   };\n   fileInputRef.current.value = '';\n   reader = null;\n   \n\n   console.log(uploadFileData+\"  console.log(uploadFileData);\");\n}\n\nconst excelExportData = [\n[\n    \"TnPName\" ,\n    \"Category\"  ,\n    \"Unit\"   ,\n    \"CurrentQuantity\"  ,\n    \"Remarks\"  ,\n],\n[\"Sample Name\",\"Sample Category\",\"Sample Unit\",\"1000\",\"Remove this entry before saving as this is just a sample \"]\n\n]\n\nconst excelDownloadFileDialogue = async() => {\n\n      // Create a new Excel workbook\n      const workbook = XLSX.utils.book_new();\n  \n      // Add a worksheet to the workbook\n      const worksheet = XLSX.utils.aoa_to_sheet(excelExportData);\n      XLSX.utils.book_append_sheet(workbook, worksheet, 'T&P');\n \n      XLSX.writeFile(workbook,\"T&P_Upload_File.xlsx\");  \n}\n\nconst createNewUnit = async() => {\n\n      var isOk = true;\n\n    //First checking if its a single entry\n\n    if(newTnP.length>0 && selectedCategory.length>0 && selectedUnit.length>0 &&\n        TnPQuantity>=0)\n        {\n            processAPI(constants.createNewTnP(newTnP,selectedCategory,selectedUnit,\n                TnPQuantity,tnpRemarks),\"Post\",\"1\");\n        }\n    else if(uploadFileText!==\"Upload File\"){\n\n      //Checking file consistency\n\n      console.log(\"uploadfile length is \"+uploadFileData.length);\n\n      if(uploadFileData.length<=0)\n      {\n        alert(\"Its a blank file...\");\n        setUploadFileData([]);\n        handleResetTnP();\n\n      }\n      else{\n        \n          const keys = Object.keys(uploadFileData[0]);\n          \n          if(keys[0]!==\"TnPName\" || keys[1]!==\"Category\"||keys[2]!==\"Unit\"||keys[3]!==\"CurrentQuantity\"||keys[4]!==\"Remarks\")\n          {\n            setUploadFileData([]);\n            handleResetTnP();\n            alert(\"Invalid file format...\");\n            isOk = false;\n          }\n\n        }\n    }\n\n    if(uploadFileData.length>0 && isOk)\n    {\n        tnpUploaded = 0;\n        unitsCreated = 0;\n        categoriesCreated = 0;\n\n        var errorLine = \"\";\n       \n        for(var i = 0;i<uploadFileData.length;i++)\n        {\n            var item = uploadFileData[i];\n\n            try{\n\n              if(item.TnPName.length>0 && item.Category.length>0 && item.Unit.length>0 &&\n                item.CurrentQuantity>=0)\n                {\n                  await processAPI(constants.createNewTnP(item.TnPName,item.Category,item.Unit,\n                    item.CurrentQuantity,item.Remarks),\"Post\",\"2\");\n                }\n                else{\n                  errorLine = errorLine.length<=0 ? \"Error in lines \" : errorLine;\n\n                  errorLine+= (i+1) + \",\";\n                }\n            }catch{\n              console.log(\"Error in line \"+(i+1));\n              errorLine = errorLine.length<=0 ? \"Error in lines \" : errorLine;\n\n              errorLine+= (i + 1)+\",\";\n            }\n      \n            \n        }\n        handleResetTnP();\n        getCategories();\n        getUnits();\n        getTnPList();\n        setUploadFileData([]);\n\n\n        setTimeout(() =>{\n\n            var alertText = \"Total new T&P created : \"+tnpUploaded+\"\\n\\nTotal new Categories created : \"+categoriesCreated+\n            \"\\n\\nTotal new Units created : \"+unitsCreated;\n\n            if(errorLine.length>0)\n            {\n              alertText+=  \"\\n\\n\"+errorLine.substring(0,errorLine.length-1);\n            }\n\n            alert(alertText);\n        },100);\n\n        isOk = true;\n       \n\n    }\n\n\n}\n\nconst processAPI = async(url,methodName,type) =>{\n\n    console.log(\"url is\"+url);\n    var responseValue =\"\";\n    setIsLoading(true);\n    await fetch(url, {\n      method : methodName,\n      \n         })\n    .then((response1) => {\n       return response1.text();\n        })\n    .then((response1)=> {\n      console.log(\"server response \"+response1);\n      responseValue = response1;\n    })\n    .then(()  => {\n      console.log(\"response is \"+responseValue);\n      setIsLoading(false);\n      const values = responseValue.split(\"_\");  \n      handleResetTnP();\n      getTnPList();\n      if(values[0]===\"1\" && type===\"1\")\n      {\n        alert(\"T&P created sucessfully !\");\n      }\n      else if(values[0]===\"-1\" && type===\"1\")\n      {\n        alert(\"T&P already exists...\");\n      }\n      else if(values[0]===\"0\" && type===\"1\")\n      {\n        alert(\"Could not create T&P...try again ! \");\n      }\n      else if(type===\"2\")\n      {\n        if(values[0]===\"1\")\n        {\n            tnpUploaded++;\n        }\n\n        if(values[1]===\"1\")\n        {\n            categoriesCreated++;\n        }\n        if(values[2]===\"1\")\n        {\n            unitsCreated++;\n        }\n      }  \n      else if(values[0]===\"1\" && type===\"3\")\n      {\n        alert(\"T&P updated sucessfully !\");\n      }\n      else if(values[0]===\"-1\" && type===\"3\")\n      {\n        alert(\"T&P could not be updated...try again !\");\n      }   \n      else if(values[0]===\"1\" && type===\"4\")\n      {\n        alert(\"T&P deleted sucessfully !\");\n      }\n      else if(values[0]===\"-1\" && type===\"4\")\n      {\n        alert(\"Could not delete T&P...try again !\");\n      }\n      else if(values[0]===\"1\" && type===\"5\")\n      {\n       tnpDeleted++;\n      }  \n      else if(values[0]===\"1\" && type===\"6\")\n      {\n       tnpEdited++;\n      }                 \n\n    })\n    .catch((error) => {\n        console.error(\"API Error:\", error);\n      });\n  \n  }\n\n  const handleResetTnP =() =>{\n    setNewTnP('');\n    setSelectedCategory('');\n    setSelectedUnit('');\n    setTnPQuantity(0);\n    setTnPRemarks(0);\n    setUploadFileText(\"Upload File\");\n}\n\nconst setEditValuesFromName = (e) => {\n  setSelectedTnPID(e.target.value);\n  setSelectedTnPName(e.target.value);\n  GetEditValues();\n \n}\n\nconst setEditValuesFromId = (e) => {\n \n  setSelectedTnPID(e.target.value);\n  setSelectedTnPName(e.target.value);\n  GetEditValues();\n \n}\n\nconst GetEditValues = () => {\n  \n  const values = selectedTnPID.split('_');\n  const tnp = tnpList.find((item) =>{\n    return item.tnpId=== values[0];\n  })\n\n  if (tnp) {\n    setEditCategory(tnp.category.categoryName);\n    setEditUnit(tnp.unit.unitName);\n    setEditQuantity(tnp.currentQuantity);\n    setEditRemarks(tnp.remarks);\n  }\n\n\n}\n\nconst handleEditCategoryChange = (e) =>{\n  console.log(\"here in editcat value - \"+e.target.value);\n  setEditCategory(e.target.value);\n}\n\nconst getCurrentTnp = () => {\n\n  const values = selectedTnPID.split(\"_\");\n\n  console.log(values);\n  \n  const tnp = tnpList.find((item) =>{\n    return item.tnpId===values[0];\n  });\n\n  return tnp;\n\n}\n\nconst UpdateTnP = async() =>{\n\n  const tnp = getCurrentTnp();\n  var isOk = true;\n\n  if(tnp)\n  {\n    if(tnp.category.categoryName!==editCategory || tnp.unit.unitName!==editUnit\n      || tnp.remarks!==editRemarks)\n      {\n        const url = constants.updateTnP(tnp.tnpId,editCategory,editUnit,editRemarks);\n  \n        console.log(url);\n        \n        processAPI(url,\"Post\",\"3\");\n       \n      }\n      else{\n        console.log(\"Nothing to update\");\n      } \n  }\n\n  if(uploadEditFileText!==\"Upload Edit file\"){\n\n    //Checking file consistency\n\n    console.log(\"uploadfile length is \"+uploadEditFileText.length);\n\n    if(uploadEditFileText.length<=0)\n    {\n      alert(\"Its a blank file...\");\n      setEditUploadFileData([]);\n      setUploadEditFileText(\"Upload Edit file\");\n\n    }\n    else{\n      \n        const keys = Object.keys(editUploadFileData[0]);\n\n        console.log(\"keys is \"+keys);\n        \n        if(keys[0]!==\"T&P ID\" || keys[1]!==\"T&P Name\"||keys[2]!==\"Category\"||keys[3]!==\"Quantity\"||keys[4]!==\"Unit\"\n        || keys[5]!==\"Remarks\" || keys[6]!==\"New Category\"||keys[7]!==\"New Unit\"||keys[8]!==\"New Remarks\"||keys[9]!==\"To be Deleted\")\n        {\n        \n          alert(\"Invalid file format...\");\n          isOk = false;\n        }\n\n      }\n  }\n\n  if(editUploadFileData.length>0 && isOk)\n  {\n      tnpEdited = 0;\n      tnpDeleted = 0;\n\n      var errorLine = \"\";\n     \n      for(var i = 0;i<editUploadFileData.length;i++)\n      {\n          var item = editUploadFileData[i];           \n          \n          console.log(\"item[Remarks] is \"+item[\"Remarks\"]);\n        \n          try{\n            //checking if id is present\n            if(item[\"T&P ID\"].length>0)\n              { \n\n                const editTnp = tnpList.find((itemHere) =>{\n                  return itemHere.tnpId===item[\"T&P ID\"];\n                });\n\n                if(editTnp)\n                {\n                //Checking if marked for delete\n                if(item[\"To be Deleted\"].length>0 && (item[\"To be Deleted\"].toLowerCase()===\"Yes\".toLowerCase()\n                || item[\"To be Deleted\"].toLowerCase()===\"Y\".toLowerCase()))\n              {\n                console.log(\"in delete TnP\");\n                const url = constants.deleteTnP(item[\"T&P ID\"]);\n\n                console.log(url);\n            \n                processAPI(url,\"Delete\",\"5\");\n              }\n              else if(item[\"New Category\"].length>0 || item[\"New Unit\"].length>0 || item[\"Remarks\"].length>0)\n              {\n                const newCategory = item[\"New Category\"]===\"\" ? editTnp.category.categoryName : item[\"New Category\"] ;\n                const newUnit = item[\"New Unit\"]===\"\" ? editTnp.unit.unitName : item[\"New Unit\"];\n                console.log(\"new category is \"+newCategory+\"  new unit is \"+newUnit);\n\n                if(newCategory!==editTnp.category.categoryName || newUnit!==editTnp.unit.unitName ||\n                  editTnp.remarks!==item[\"New Remarks\"])\n                  {\n                    await processAPI(constants.updateTnP(editTnp.tnpId,newCategory,newUnit,item[\"New Remarks\"]),\"Post\",\"6\");\n                  }\n               \n              }                \n              }\n              else{\n                console.log(\"No line found for \"+item[\"T&P ID\"]);\n              }\n                } \n\n             \n             \n          }catch{\n            console.log(\"Error in line \"+(i+1));\n            errorLine = errorLine.length<=0 ? \"Error in lines \" : errorLine;\n\n            errorLine+= (i + 1)+\",\";\n          }\n    \n          \n      }\n      \n      getTnPList();\n      \n\n      setTimeout(() =>{\n\n          var alertText = \"Total T&P Edited : \"+tnpEdited+\"\\n\\nTotal T&P deleted : \"+tnpDeleted;\n\n          if(errorLine.length>0)\n          {\n            alertText+=  \"\\n\\n\"+errorLine.substring(0,errorLine.length-1);\n          }\n\n          alert(alertText);\n      },100);\n\n      isOk = true;\n     \n      setEditUploadFileData([]);\n      setUploadEditFileText(\"Upload Edit file\");\n    \n  }\n\n  getCategories();\n  getUnits();\n  getTnPList();\n\n}\n\nconst DeleteTnP =() =>{\n\n  const tnp = getCurrentTnp();\n\n  if(selectedTnPID.length>0 && tnp)\n  {\n    const confirm = window.confirm(\"Are you sure you want to delete the T&P ?\");\n  \n    if(confirm)\n    {\n     \n      const url = constants.deleteTnP(tnp.tnpId);\n\n      console.log(url);\n    \n      processAPI(url,\"Delete\",\"4\");\n\n      \n    }\n\n}\n  \n}\n\nconst handleEditFileChange = (e) =>{\n\n  console.log(\"in upload file\");\n  setEditUploadFileData([]);\n  let reader = new FileReader();\n  reader.readAsBinaryString(e.target.files[0]);\n  const name = (e.target.files[0]).name;\n  reader.onload = (e) =>{\n      setUploadEditFileText(name+ \" selected\");\n      const data  = e.target.result;\n      const workbook = XLSX.read(data,{type : 'binary'});\n      const sheetName = workbook.SheetNames[0];\n      const sheet = workbook.Sheets[sheetName];\n      const parsedData = XLSX.utils.sheet_to_json(sheet);\n      setEditUploadFileData(parsedData);\n      console.log(uploadFileData);\n };\n fileInputRef1.current.value = '';\n reader = null;\n \n\n console.log(uploadFileData+\"  console.log(uploadFileData);\");\n}\n\n\nconst excelEditDownloadFileDialogue = () => {\n\n  setIsEditfile(true);\n  setIsLoading(true);\n  setTnpJson([]);\n\n  // Creating TNP JSON\n  tnpList.forEach((item) => {\n    const tnp = {\n      'T&P ID': item.tnpId,\n      'T&P Name': item.tnpName,\n      'Category': item.category.categoryName,\n      'Quantity': item.currentQuantity,\n      'Unit': item.unit.unitName,\n      'Remarks': item.remarks,\n      'New Category' : '',\n      'New Unit' : '',\n      'New Remarks' : '',\n      'To be deleted' : 'No',\n\n    };\n\n    setTnpJson((prevJson) => [...prevJson, tnp]);\n  });\n\n  setIsLoading(false);\n \n\n}\n\nuseEffect(() => {\n  if (TnpJson.length > 0 && !isLoading) {\n    // Create a new Excel workbook\n    const workbook = XLSX.utils.book_new();\n\n    // Add a worksheet to the workbook\n    const worksheet = XLSX.utils.json_to_sheet(TnpJson);\n      \n    const fileName = isEditFile ? 'Edit_T&P_Format.xlsx' : 'T&P_MasterList.xlsx';\n\n    const wscols = [{ wpx: 120 }, { wpx: 120 }, { wpx: 120 }, { wpx: 80 }, { wpx: 80 }, { wpx: 120 }, { wpx: 120 }, { wpx: 80 }, { wpx: 80 }, { wpx: 120 }];\n    worksheet['!cols'] = wscols;\n    \n\n    if(isEditFile)\n    {\n    \n      worksheet['J1'] = { v: 'To be Deleted', t: 's' }; // Optional: Set a header for column J\n      worksheet['J2'] = { v: 'No', t: 's' }; // Optional: Set a default value\n\n      \n      // Create data validation for \"Yes\" or \"No\" in column J\n      worksheet['!dataValidation'] = [\n        {\n          Range: 'J2:J1048576', // Apply to all rows in column J\n          formula1: \"Yes,No\",\n        },\n      ];\n    \n        setIsEditfile(false);\n    }\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'T&P');\n    XLSX.writeFile(workbook, fileName);\n    \n  }\n}, [TnpJson, isLoading]);\n\nconst DownLoadMasterFileDialogue = () =>{\n  setIsLoading(true);\n  setTnpJson([]);\n\n  // Creating TNP JSON\n  tnpList.forEach((item) => {\n    const tnp = {\n      'T&P ID': item.tnpId,\n      'T&P Name': item.tnpName,\n      'Category': item.category.categoryName,\n      'Quantity': item.currentQuantity,\n      'Unit': item.unit.unitName,\n      'Remarks': item.remarks,\n    };\n\n    setTnpJson((prevJson) => [...prevJson, tnp]);\n  });\n\n  setIsLoading(false);\n}\n\nreturn(\n    <div>\n    {isLoading ? (\n      <Loading />)\n    :\n    (\n    <>\n    <div className={styles.headerBox}>\n    <h1>T&P</h1>\n    </div>\n    <div className={styles.createTnPBox}>\n        <h1 className={styles.headers}>Create New T&P</h1>\n     </div>\n    <div className={styles.TnPCreateRow}>\n    <label htmlFor=\"TnPName\">Name of T&P</label>\n    <input type=\"text\" name=\"TnPName\" className={styles.InputTextBox} onChange={handleTnPInput}/>\n    \n    <label className={styles.categoryLabel} htmlFor=\"categoryDropdown\">Choose Category</label>\n   <select\n   value={selectedCategory}\n   onChange={handleCategoriesChange}\n   id=\"categoryDropdown\"\n   className={styles.categoryDropdown}\n   >\n    <option value=\"\" className={styles.optionValue}>Select a Category</option>\n        {categories.map((item) => (\n          <option key={item.categoryName} value={item.categoryName}>\n            {item.categoryName}\n          </option>\n        ))}\n   </select>\n\n   <label className={styles.categoryLabel} htmlFor=\"categoryDropdown\">Choose Unit</label>\n   <select\n   value={selectedUnit}\n   onChange={handleUnitsChange}\n   id=\"unitsDropdown\"\n   className={styles.categoryDropdown}\n   >\n    <option value=\"\" className={styles.optionValue}>Select a Category</option>\n        {units.map((item) => (\n          <option key={item.unitName} value={item.unitName}>\n            {item.unitName}\n          </option>\n        ))}\n   </select>\n\n   <label htmlFor=\"TnPQty\">Current Quantity</label>\n    <input type=\"number\" name=\"TnPQty\" className={styles.InputTextBox} value={TnPQuantity} onChange={handleTnPQty}/>\n    \n    </div>\n\n    <div className={styles.TnPSubmitRow}>\n    <label htmlFor=\"TnPRemarks\">Remarks</label>\n    <input type=\"text\" name=\"TnPRemarks\" className={styles.InputTextBox} onChange={handleTnPRemarks}/>\n\n    <button style={{marginLeft : '1%'}} class=\"bg-btn-firozi hover:bg-purple-700 text-white-bold font-bold py-1 px-6 rounded-full \" onClick={createNewUnit}>Submit</button>        \n    <img className={styles.uploadIcon} name=\"uploadIcon\" onClick={uploadFileDialogue} alt=\"upload icon\" src={uploadFile} />        \n    <text className={styles.uploadFileText} onClick={uploadFileDialogue}>{uploadFileText}</text>\n    <input type=\"file\" accept=\".xlsx,.xls\" ref={fileInputRef} className={styles.inputFile}\n        onChange={handleFileChange} />\n\n<img className={styles.uploadIcon} name=\"uploadIcon\" onClick={uploadFileDialogue} alt=\"upload icon\" src={excel} />        \n    <text className={styles.ExcelFileText} onClick={excelDownloadFileDialogue}>Download Excel Format</text>\n  \n    </div>\n\n{ <div className={styles.editBox}>\n<div className={styles.createTnPBox}>\n        <h1 className={styles.headers1}>Edit T&P</h1>\n     </div>\n    <div className={styles.TnPCreateRow}>\n    <label htmlFor=\"TnPDropdown\">Select T&P</label>\n    <select\n   value={selectedTnPName}\n   onChange={setEditValuesFromName}\n   id=\"TnPDropdown\"\n   className={styles.categoryDropdown}\n   >\n    <option value=\"\" className={styles.optionValue}>Select a T&P</option>\n        {tnpList.map((item) => (\n          <option key={`${item.tnpId}_${item.tnpName}`} value={`${item.tnpId}_${item.tnpName}`}>\n            {item.tnpName}\n          </option>\n        ))}\n   </select>\n\n   <label htmlFor=\"TnPIDDropdown\">T&P ID</label>\n    <select\n   value={selectedTnPID}\n   onChange={setEditValuesFromId}\n   id=\"TnPIDDropdown\"\n   className={styles.categoryDropdown}\n   >\n    <option value=\"\" className={styles.optionValue}>Select T&P ID</option>\n        {tnpList.map((item) => (\n          <option key={`${item.tnpId}_${item.tnpName}`} value={`${item.tnpId}_${item.tnpName}`}>\n            {item.tnpId}\n          </option>\n        ))}\n   </select>\n    \n   <label className={styles.categoryLabel} htmlFor=\"categoryDropdown\">Category</label>\n   <select\n   value={editCategory}\n   onChange={handleEditCategoryChange}\n   id=\"categoryDropdown\"\n   className={styles.categoryDropdown}\n   >\n    <option value=\"\" className={styles.optionValue}>Categories</option>\n        {categories.map((item) => (\n          <option key={item.categoryName} value={item.categoryName}>\n          {item.categoryName}\n          </option>\n        ))}\n   </select>\n\n   <label className={styles.categoryLabel} htmlFor=\"categoryDropdown\">Unit</label>\n   <select\n   value={editUnit}\n   onChange={(e) => setEditUnit(e.target.value)}\n   id=\"unitsDropdown\"\n   className={styles.categoryDropdown}\n   >\n    <option value=\"\" className={styles.optionValue}>Units</option>\n        {units.map((item) => (\n          <option key={item.unitName} value={item.unitName}>\n            {item.unitName}\n          </option>\n        ))}\n   </select>  \n    \n    </div>\n\n    <div className={styles.TnPSubmitRow}>\n    <label htmlFor=\"TnpEditQty\">Current Quantity</label>\n   <text name=\"TnpEditQty\" className={styles.QtyTxt} >{editQuantity}</text>     \n\n    <label htmlFor=\"TnPRemarks\">Remarks</label>\n    <input type=\"text\" name=\"TnPRemarks\" className={styles.InputTextBox} value={editRemarks} \n    onChange={(e)=> setEditRemarks(e.target.value)}/>\n\n    <button style={{marginLeft : '1%'}} class=\"bg-btn-lightBlue hover:bg-blue-700 text-white-bold font-bold py-1 px-6 rounded-full \" onClick={UpdateTnP}>Update</button> \n    <button style={{marginLeft : '1%'}} class=\"bg-red-500 hover:bg-red-700 text-white-bold font-bold py-1 px-6 rounded-full \" onClick={DeleteTnP}>Delete</button>        \n   \n    <img className={styles.uploadIcon} name=\"uploadIcon\" onClick={uploadFileDialogue} alt=\"uploadicon\" src={uploadFile} />        \n    <text className={styles.uploadFileText} onClick={uploadEditFileDialogue}>{uploadEditFileText}</text>\n    <input type=\"file\" accept=\".xlsx,.xls\" ref={fileInputRef1} className={styles.inputFile}\n        onChange={handleEditFileChange} />\n\n<img className={styles.uploadIcon} name=\"excelIcon\" onClick={excelEditDownloadFileDialogue} alt=\"excel icon\" src={excel} />        \n    <text className={styles.ExcelFileText} onClick={excelEditDownloadFileDialogue}>Download Edit File Format</text>\n\n    </div>\n  </div>     }\n\n  { <div className={styles.downloadMasterButton}>\n  <img className={styles.uploadIcon} name=\"uploadIcon\" onClick={DownLoadMasterFileDialogue} alt=\"upload icon\" src={excel} />        \n    <text className={styles.ExcelFileText} onClick={DownLoadMasterFileDialogue}>Download T&P MasterList</text>  \n\n  </div> }\n\n    </>\n)}\n</div>\n  \n)\n\n}\n\n\nexport default TnP;",{"ruleId":"100","severity":1,"message":"101","line":28,"column":7,"nodeType":"102","endLine":28,"endColumn":208},{"ruleId":"103","severity":1,"message":"104","line":1,"column":17,"nodeType":"105","messageId":"106","endLine":1,"endColumn":26},{"ruleId":"103","severity":1,"message":"107","line":6,"column":13,"nodeType":"105","messageId":"106","endLine":6,"endColumn":21},{"ruleId":"103","severity":1,"message":"108","line":7,"column":17,"nodeType":"105","messageId":"106","endLine":7,"endColumn":29},{"ruleId":"103","severity":1,"message":"109","line":8,"column":20,"nodeType":"105","messageId":"106","endLine":8,"endColumn":35},{"ruleId":"103","severity":1,"message":"104","line":1,"column":17,"nodeType":"105","messageId":"106","endLine":1,"endColumn":26},{"ruleId":"103","severity":1,"message":"110","line":3,"column":13,"nodeType":"105","messageId":"106","endLine":3,"endColumn":22},{"ruleId":"103","severity":1,"message":"111","line":7,"column":9,"nodeType":"105","messageId":"106","endLine":7,"endColumn":14},{"ruleId":"103","severity":1,"message":"107","line":7,"column":16,"nodeType":"105","messageId":"106","endLine":7,"endColumn":24},{"ruleId":"103","severity":1,"message":"104","line":1,"column":17,"nodeType":"105","messageId":"106","endLine":1,"endColumn":26},{"ruleId":"103","severity":1,"message":"112","line":1,"column":28,"nodeType":"105","messageId":"106","endLine":1,"endColumn":36},{"ruleId":"113","severity":1,"message":"114","line":23,"column":3,"nodeType":"115","endLine":23,"endColumn":5,"suggestions":"116"},{"ruleId":"103","severity":1,"message":"117","line":10,"column":8,"nodeType":"105","messageId":"106","endLine":10,"endColumn":12},{"ruleId":"103","severity":1,"message":"104","line":1,"column":15,"nodeType":"105","messageId":"106","endLine":1,"endColumn":24},{"ruleId":"103","severity":1,"message":"118","line":3,"column":8,"nodeType":"105","messageId":"106","endLine":3,"endColumn":14},{"ruleId":"103","severity":1,"message":"119","line":15,"column":11,"nodeType":"105","messageId":"106","endLine":15,"endColumn":19},{"ruleId":"113","severity":1,"message":"120","line":57,"column":6,"nodeType":"115","endLine":57,"endColumn":21,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":510,"column":46,"nodeType":"124","messageId":"125","endLine":512,"endColumn":18},{"ruleId":"113","severity":1,"message":"126","line":700,"column":4,"nodeType":"115","endLine":700,"endColumn":24,"suggestions":"127"},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setSites' is assigned a value but never used.","'setInventory' is assigned a value but never used.","'setRequisitions' is assigned a value but never used.","'constants' is defined but never used.","'sites' is assigned a value but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUnits'. Either include it or remove the dependency array.","ArrayExpression",["128"],"'logo' is defined but never used.","'TopBar' is defined but never used.","'response' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'GetEditValues'. Either include it or remove the dependency array.",["129"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'item'.","ArrowFunctionExpression","unsafeRefs","React Hook useEffect has a missing dependency: 'isEditFile'. Either include it or remove the dependency array.",["130"],{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},"Update the dependencies array to be: [getUnits]",{"range":"137","text":"138"},"Update the dependencies array to be: [GetEditValues, selectedTnPID]",{"range":"139","text":"140"},"Update the dependencies array to be: [TnpJson, isEditFile, isLoading]",{"range":"141","text":"142"},[850,852],"[getUnits]",[1816,1831],"[GetEditValues, selectedTnPID]",[17709,17729],"[TnpJson, isEditFile, isLoading]"]