Ä√bodyappBar	bodyScrimbottomSheetsnackBarmaterialBannerpersistentFooterbottomNavigationBarfloatingActionButtondrawer	endDrawer	statusBarchildofmaybeOfcreateState
_scaffolds_materialBanners_materialBannerController
_snackBars_snackBarController_snackBarTimer_accessibleNavigationdidChangeDependencies	_register_unregister_updateScaffolds_isRootshowSnackBar_handleSnackBarStatusChangedremoveCurrentSnackBarhideCurrentSnackBarclearSnackBarsshowMaterialBanner"_handleMaterialBannerStatusChangedremoveCurrentMaterialBannerhideCurrentMaterialBannerclearMaterialBannersbuilddispose_scaffoldMessengerStateupdateShouldNotifyfloatingActionButtonSizebottomSheetSizecontentBottom
contentTop	minInsetsminViewPaddingscaffoldSizesnackBarSizematerialBannerSizetextDirectionbeginendanimatorprogress	getOffsettoStringbottomNavigationBarTopfloatingActionButtonArea_scaleFloatingActionButtoncopyWithcontextfloatingActionButtonScalegeometryvalue_updateWithbottomWidgetsHeightappBarHeightmaterialBannerHeight==hashCode
extendBodyextendBodyBehindAppBargeometryNotifier$previousFloatingActionButtonLocation#currentFloatingActionButtonLocation)floatingActionButtonMoveAnimationProgress"floatingActionButtonMotionAnimatorisSnackBarFloatingsnackBarWidthextendBodyBehindMaterialBannerperformLayoutshouldRelayoutfabMoveAnimationfabMotionAnimatorcurrentController_previousController_previousScaleAnimation_previousRotationAnimation_currentScaleAnimation_extendedCurrentScaleAnimation_currentRotationAnimation_previousChild	initStatedidUpdateWidget_entranceTurnTween_updateAnimations%_handlePreviousAnimationStatusChanged_isExtendedFloatingActionButton_onProgressChanged_updateGeometryScalefloatingActionButtonLocationfloatingActionButtonAnimatorpersistentFooterButtonspersistentFooterAlignmentonDrawerChangedonEndDrawerChangeddrawerScrimColorbackgroundColorresizeToAvoidBottomInsetprimarydrawerDragStartBehaviordrawerEdgeDragWidthdrawerEnableOpenDragGestureendDrawerEnableOpenDragGesturerestorationId
geometryOf	hasDrawerrestoreState
_drawerKey_endDrawerKey_bodyKey	hasAppBarhasEndDrawerhasFloatingActionButton_appBarMaxHeightappBarMaxHeight_drawerOpened_endDrawerOpenedisDrawerOpenisEndDrawerOpen_drawerOpenedCallback_endDrawerOpenedCallback
openDraweropenEndDrawer_scaffoldMessenger_messengerSnackBar_updateSnackBar_messengerMaterialBanner_updateMaterialBanner_dismissedBottomSheets_currentBottomSheet_currentBottomSheetKey _maybeBuildPersistentBottomSheet_closeCurrentBottomSheetcloseDrawercloseEndDrawer_updatePersistentBottomSheet_buildBottomSheetshowBottomSheet#_floatingActionButtonMoveController_floatingActionButtonAnimator%_previousFloatingActionButtonLocation_floatingActionButtonLocation)_floatingActionButtonVisibilityController$_floatingActionButtonVisibilityValue_showFloatingActionButton_moveFloatingActionButton_handleStatusBarTap_geometryNotifier_resizeToAvoidBottomInset_addIfNonNull_buildEndDrawer_buildDrawer_showBodyScrim_bodyScrimColorshowBodyScrim	isEnabledinvoke_widget
_completerclosedclosesetStatestartingPointcurve	transformanimationController
enableDrag	onClosingonDismissed	onDisposebuilderisPersistent	elevationshapeclipBehaviorconstraintsanimationCurve_handleDragStart_handleDragEnd_handleStatusChangeextentChanged_isLocalHistoryEntry%_kDefaultFloatingActionButtonLocation%_kDefaultFloatingActionButtonAnimator_standardBottomSheetCurve _kBottomSheetDominatesPercentage_kMinBottomSheetScrimOpacity_kMaxBottomSheetScrimOpacity_ScaffoldSlotScaffoldMessengerScaffoldMessengerState_ScaffoldMessengerScopeScaffoldPrelayoutGeometry_TransitionSnapshotFabLocationScaffoldGeometry_ScaffoldGeometryNotifier_BodyBoxConstraints_BodyBuilder_ScaffoldLayout_FloatingActionButtonTransition$_FloatingActionButtonTransitionStateScaffoldScaffoldState_DismissDrawerActionScaffoldFeatureController_BottomSheetSuspendedCurve_StandardBottomSheet_StandardBottomSheetStatePersistentBottomSheetController_ScaffoldScopeÅ–
lerpDoubleDragStartBehaviorFloatingActionButtonLocationendFloatFloatingActionButtonAnimatorscalingCurvestandardEasingdoubleSnackBarMaterialBannerBuildContextofshowSnackBarshowMaterialBannerdebugCheckHasScaffoldMessengerStatefulWidgetWidget	GlobalKeyMaterialAppscaffoldMessengerKey"dependOnInheritedWidgetOfExactType_scaffoldMessengerStateoverrideStateTickerProviderStateMixinLinkedHashSetQueueMaterialBannerClosedReasonAnimationControllerSnackBarClosedReasonTimerboolvoidMediaQueryData
MediaQuerycontextaccessibleNavigationisActivereasontimeoutdidChangeDependenciesadd
isNotEmpty_updateSnackBar_updateMaterialBannerremovescaffoldfindAncestorStateOfTypecontainsdurationclosecreateAnimationControllervsyncaddStatusListenerisEmptyisDismissedforward_withAnimationfallbackKey	UniqueKey	CompleterfirstsetStateaddLast	exceptionFlutterErrorStringdiagnosticstoDescriptionListDiagnosticsNodeErrorSummaryErrorDescription	ErrorHintdescribeOwnershipChain	fromPartsAnimationStatus	dismissedremoveFirst	completedreverse
_completerisCompletedcompletecancelvaluehidestatusthenmountedcleardebugCheckHasMediaQuery
ModalRoutedynamic	isCurrent_widgetactionscaffoldMessengerStatechildwidgetdisposeInheritedWidgetFloatingActionButtonOffset	immutableSizefloatingActionButtonzeroBottomSheetbodybottomNavigationBar
EdgeInsetsbottomappBartoppaddingresizeToAvoidBottomInsetviewPadding
viewInsetsTextDirection	getOffsetbeginendprogressobjectRuntimeTypeValueNotifier
geometryOfBottomAppBarRectbottomNavigationBarToplerpcenterfloatingActionButtonAreaChangeNotifierValueListenableRenderObjectfindRenderObjectownerdebugDoingPaint_scaleFloatingActionButtonfloatingActionButtonScalecopyWithnotifyListenersBoxConstraintsObjectmaterialBannerHeightbottomWidgetsHeightappBarHeightinthashhashCodeStatelessWidgetLayoutBuilderbuilderconstraintsmaxdataMultiChildLayoutDelegateloosetightenwidthheighthasChildlayoutChildpositionChildpersistentFootermaxWidth	maxHeightmaterialBannerclampDouble	bodyScrimsnackBarbottomSheetbottomSheetSizecontentBottom
contentTopfloatingActionButtonSize	minInsetsscaffoldSizesnackBarSizematerialBannerSizetextDirectionminViewPaddingsizemin	statusBardrawertight	endDrawer_updateWith)floatingActionButtonMoveAnimationProgress$previousFloatingActionButtonLocation#currentFloatingActionButtonLocation
extendBodyextendBodyBehindAppBar	Animation	initStatekFloatingActionButtonSeguecurrentControllerdidUpdateWidgetkeyfabMotionAnimatorfabMoveAnimation
AnimatableTween!kFloatingActionButtonTurnIntervalchain
CurveTweencurveCurveseaseInCurvedAnimationparentanimatedrivegetScaleAnimationgetRotationAnimationAnimationMinIntervalTrainHoppingAnimationaddListener
isExtendedStack	alignment	AlignmentcenterRightchildrenFadeTransitionopacityScaleTransitionscaleRotationTransitionturnsgeometryNotifiershowBottomSheetTextCenterAppBarcenterDockedSafeAreaTabBar
TabBarViewTabControllerDrawerBottomNavigationBarshowModalBottomSheetAlignmentDirectional	centerEndstartCircularNotchedRectanglebackgroundColorPreferredSizeWidgetSizedBoxexpandListView
TextButtonOverflowBarltrrtl
openDrawercloseDrawer	NavigatorpopdrawerEnableOpenDragGestureDrawerCallbackopenEndDrawercloseEndDrawerendDrawerEnableOpenDragGestureDrawerThemeData
scrimColorColorsblack54ColorMaterial	ThemeDatascaffoldBackgroundColorLocalHistoryEntryBottomSheetThemeDataprimaryRestorationBucketRestorationScopeRestorationManagerBuilderdescribeElementregisterForUpdates	hasDrawerRestorationMixinrestorationIdregisterForRestorationDrawerControllerStateRestorableBoolonDrawerChangedcallonEndDrawerChanged
IconButtoncurrentStateopen
_snackBars_materialBannersDraggableScrollableNotificationextentinitialExtentonRemoveDraggableScrollableActuatorresetaddLocalHistoryEntryremoveLocalHistoryEntrygrowablesheetanimationControllerNotificationListeneronNotificationStatefulBuilderStateSetter_isLocalHistoryEntryfuturewhenCompleteWidgetBuilderShapeBorderClip
enableDrag	onClosingonDismissed	onDispose shouldDisposeAnimationControllerisPersistent	elevationshapeclipBehaviorVoidCallbackfntransitionAnimationController
lowerBound
upperBoundTickerFutureisAnimatinggetAnimationRestartfromScrollControllerPrimaryScrollController
hasClients	animateToDurationmillisecondseaseOutCircfloatingActionButtonLocationfloatingActionButtonAnimatormaybeOf_unregister	_registerLayoutIdremovePadding
removeLeftremoveLeftPadding	removeTopremoveTopPaddingremoveRightremoveRightPaddingremoveBottomremoveBottomPaddingremoveBottomInsetremoveViewInsetsmaintainBottomViewPaddingidDrawerControllerDrawerAlignmentdrawerCallbackdragStartBehaviordrawerDragStartBehaviordrawerScrimColoredgeDragWidthdrawerEdgeDragWidthenableOpenDragGestureisDrawerOpenblackModalBarrierwithOpacitydebugCheckHasDirectionalityThemeDirectionalityKeyedSubtreepersistentFooterButtonsdismissiblecolorpreferredHeightForpreferredSizeisFiniteConstrainedBoxFlexibleSpaceBarcreateSettingscurrentExtentbottomCenterSnackBarBehaviorbehaviorsnackBarThemefixedfloatingMaterialBannerThemeDataMaterialBannerTheme	Container
decorationBoxDecorationborderBorderDividercreateBorderSideIntrinsicHeightpersistentFooterAlignmentallspacingoverflowAlignmentOverflowBarAlignmentplatformTargetPlatformiOSmacOSGestureDetectorHitTestBehavioropaqueonTapexcludeFromSemanticsandroidfuchsialinuxwindowsScrollNotificationObserverAnimatedBuilder	animationActionsactionsTypeActionIntentDismissIntentCustomMultiChildLayoutdelegate"floatingActionButtonMotionAnimatorisSnackBarFloatingextendBodyBehindMaterialBannersnackBarWidthDismissActionisEndDrawerOpenFutureeaseOutParametricCurveeaseOutCubic	transformdescribeIdentityDragStartDetailslinearDragEndDetails$_floatingActionButtonVisibilityValueshowBodyScrim	minExtentAligntopStartheightFactor	Semantics	container	onDismissonDragStart	onDragEndStatefulWidgetStateTickerProviderStateMixinInheritedWidgetFloatingActionButtonLocationChangeNotifierValueListenableBoxConstraintsStatelessWidgetMultiChildLayoutDelegateRestorationMixinDismissActionParametricCurveScaffoldFeatureController7˙“ Ô#‚≈‹h¯ k˜|   
dart:async  dart:collection  	dart:math  dart:ui  package:flutter/foundation.dart  package:flutter/gestures.dart  package:flutter/widgets.dart  app_bar.dart  banner.dart  banner_theme.dart  bottom_sheet.dart  colors.dart  curves.dart  
debug.dart  divider.dart  drawer.dart  flexible_space_bar.dart  floating_action_button.dart  $floating_action_button_location.dart  material.dart  snack_bar.dart  snack_bar_theme.dart  
theme.dart  	dart:core¿ „Z ¿Ëˇåô <ÄÜÄ§Ä•Ä∫Ä‘ÄÅÅÅ=Å|Å£Å§ÅªÅ—ÅÌÇ	ÇÇ5ÇJÇaÇwÇôÇøÇÓÉÉÉ>ÉSÉTÉlÉëÉ∑É”ÉÈÑÑÑÉÑÙÑıÖ-ÖyÖùÖ“ÜÜ4Ü5ÜJÜRÜ\ÜiÜxÜÑÜñÜ™Ü¡ÜŸÜ„ÜÜ˝Üˇá áJáNáëáïáÂàààhà≤à„ââ"âjâªääYä|äÄäîä„äÁã:ãJãNã\ã`ãÆãˇåQå•åÛççxç©çıéé é9éWéXéàéééøé’é÷è&è5è;èQèùèﬁè‰ê<êNêTêßê˘ëEëèëƒë ë‡í0í}íƒìì[ìÄìÜìﬁììˆîBî|îÇîíîòîËï'ïwï§ïﬂï¸ñ1ñ2ñ§ñŒñ“ñ”ó#ó:ó@óìóôó©óØó¯òGòàò•ò¶ôôCôGôHôTôòôöôõô¿ôƒöö\ößöÚõ õõ7õïõÁúüú—ùkùóù∞ùœù–ù‹ù˝û;ûãû’ü%üKütü†ü¬üÍ†+†1†n†ë†ï†ñ†¡†ﬂ†‡†˝° °D°L°M°v°†°®°Æ°≤°≥°‡¢¢I¢^¢b¢c¢¢∂¢’¢˘£#£+£1£5£6£Ü£Œ£˜§T§è§ì§î§¶§ß§„§È•8•Ö•‘•‚•Ë¶9¶?¶ê¶–ßßNßTßùßΩß√ßŸ®*®0®ö®¨©
©©3©Ç©Ø©∂™™;™Y™â™Ø™µ´´R´°´Ò¨¨^¨á¨î¨∆¨Á¨Ú≠K≠R≠\≠p≠ò≠¢≠º≠÷≠ÈÆÆ`Æ≤Æ˚ØSØsØ¬∞∞O∞`∞y∞Õ±#±h±ø≤≤T≤e≤ì≤‚≤Û≥≥9≥E≥O≥d≥p≥≥Ö≥Ü≥ù≥°≥¢≥‡≥ˆ¥¥C¥Y¥}¥â¥•¥ ¥Ù¥˛µµ3µIµsµƒµ–µÏµ˚∂∂.∂R∂a∂g∂k∂l∂∂∂…∂œ∑ ∑n∑Ã∑Ë∏∏∏∏m∏è∏±∏∑∏’∏π*πPπTπUπ†π¶πÏ∫F∫b∫º∫ ∫–ª#ªEªmªèªúª€ªÙºº@ºJºTºZºxºìºóºòº·Ω"Ω<ΩñΩ§Ω™ææ*æOæjænæoæàæâæÀæ—ø&øø‘ø‚øË¿ @E¿ @Ö¿ @⁄¿ A¿ A¿ A^¿ A~¿ AÑ¿ Aö¿ AÒ¿ A˜¿ Bg¿ By¿ Bı¿ C¿ C¿ Cs¿ C†¿ Cß¿ Cˇ¿ D>¿ Db¿ Dò¿ Dƒ¿ D ¿ E%¿ E¿ E’¿ F%¿ FD¿ Fû¿ FÕ¿ F‹¿ G¿ G7¿ G@¿ Gü¿ G¶¿ G∏¿ G‰¿ GÏ¿ H¿ H¿ H¿ H ¿ Hd¿ Hz¿ H†¿ HÕ¿ H„¿ I¿ I¿ I5¿ I`¿ Iê¿ Iö¿ I©¿ Iœ¿ IÎ¿ I˙¿ J¿ J-¿ JQ¿ J`¿ Jf¿ Jj¿ Jk¿ Jª¿ JŒ¿ J‘¿ K+¿ K¿ KÔ¿ L¿ L/¿ L=¿ LC¿ L¢¿ Lƒ¿ LÊ¿ LÏ¿ LÌ¿ M'¿ MS¿ MW¿ MX¿ M©¿ MØ¿ Mı¿ Na¿ N}¿ N„¿ NÒ¿ N˜¿ OV¿ Ox¿ O¶¿ O»¿ O’¿ P¿ P3¿ PY¿ P¿ Pâ¿ Pì¿ Pô¿ Pù¿ Pû¿ PÔ¿ Q8¿ QX¿ Qæ¿ QÃ¿ Q“¿ RR¿ Rp¿ R°¿ R¬¿ R∆¿ R«¿ R”¿ R˙¿ S(¿ Sf¿ S£¿ S§¿ S≈¿ T¿ T4¿ T~¿ Tº¿ Tı¿ U	¿ UQ¿ Uõ¿ U™¿ UÔ¿ V5¿ VÉ¿ Vô¿ Vß¿ VÓ¿ V¸¿ W¿ W¿ W¿ W¿ W9¿ W]¿ Wx¿ W¿ WÉ¿ WÑ¿ Wê¿ W£¿ W«¿ WÂ¿ X ¿ X¿ X¿ X¿ X¿ XT¿ Xv¿ Xê¿ XÃ¿ Y¿ Y¿ Y>¿ Y?¿ YK¿ YΩ¿ Yø¿ Y¿¿ Z¿ Z4¿ Z8¿ Zr¿ Z∫¿ Zˆ¿ Z˙¿ [:¿ [o¿ [z¿ [ú¿ [Ì¿ \5¿ \Y¿ \|¿ \ù¿ \ª¿ \Á¿ ]¿ ]&¿ ]F¿ ]f¿ ]å¿ ]≠¿ ]≥¿ ]¥¿ ]È¿ ]Ô¿ ^;¿ ^b¿ ^c¿ ^ó¿ ^ù¿ ^ﬂ¿ ^ˇ¿ _¿ _¿ _f¿ _}¿ _É¿ _»¿ `¿ ``¿ `w¿ `}¿ `Õ¿ a¿ aj¿ aÑ¿ a¢¿ a£¿ aÍ¿ b¿ b¿ bL¿ bì¿ b¡¿ b«¿ c¿ cd¿ c¥¿ c»¿ c„¿ c‰¿ d,¿ dE¿ dK¿ dï¿ d∏¿ e¿ e9¿ e?¿ e}¿ e≥¿ e—¿ e“¿ f¿ f8¿ f>¿ fç¿ f€¿ g'¿ gw¿ gö¿ gΩ¿ gæ¿ gË¿ gÓ¿ h=¿ hâ¿ hæ¿ hƒ¿ i¿ i_¿ iØ¿ iÿ¿ iﬁ¿ j-¿ jP¿ jk¿ jl¿ jù¿ j£¿ jÚ¿ k¿ k¿ kE¿ kK¿ k†¿ k¡¿ k¬¿ l ¿ l%¿ l'¿ l(¿ lt¿ lx¿ l¡¿ m"¿ m-¿ my¿ mz¿ m÷¿ m◊¿ n¿ n-¿ n\¿ nu¿ nv¿ nÇ¿ n√¿ n‚¿ o¿ o>¿ oX¿ o_¿ oc¿ od¿ op¿ oÜ¿ p ¿ p¿ p¿ p¿ pT¿ pX¿ pö¿ p…¿ pÕ¿ q¿ ql¿ qp¿ qº¿ q˛¿ r¿ r¿ rl¿ r±¿ rº¿ r’¿ s¿ s4¿ sU¿ sx¿ s~¿ s¿ s»¿ t¿ t¿ tQ¿ ty¿ tz¿ t∫¿ t¿¿ u¿ u,¿ u-¿ uq¿ uè¿ u¢¿ u®¿ u©¿ u«¿ uÊ¿ v¿ v'¿ v-¿ v.¿ vW¿ vã¿ v´¿ væ¿ v∆¿ w¿ w¿ w¿ w`¿ wv¿ wî¿ w∏¿ w‹¿ w„¿ x ¿ xU¿ x∞¿ x∑¿ xª¿ xΩ¿ xæ¿ y$¿ y]¿ y}¿ y~¿ yú¿ y¡¿ yﬁ¿ yﬂ¿ yÎ¿ z
¿ z¿ z_¿ z©¿ z≈¿ {¿ {o¿ {Œ¿ {Ÿ¿ {·¿ {Ù¿ {˛¿ |J¿ |N¿ |O¿ |d¿ |à¿ |¨¿ |”¿ |⁄¿ }<¿ }^¿ }î¿ }Œ¿ }’¿ }Ï¿ }¿ }Ú¿ }Û¿ ~?¿ ~ë¿ ~î¿ ~ﬂ¿ 2¿ Å¿ œ¿ Ä¿ Ä@¿ Äs¿ Äë¿ Ä•¿ Ä∫¿ Ä·¿ Å¿ Å)¿ ÅU¿ Å~¿ Å£¿ Å≈¿ ÅÚ¿ Ç¿ Ç¿ ÇA¿ Ç^¿ ÇÉ¿ ÇÑ¿ Ç’¿ É&¿ Éy¿ É¬¿ ÉŒ¿ ÉÒ¿ Ñ¿ Ñ¿ Ñ%¿ ÑM¿ Ñã¿ Ñ«¿ Ñˆ¿ Ñ˙¿ Ñ˚¿ Ö¿ Ös¿ Öu¿ Öv¿ ÖÀ¿ Ü¿ Ü6¿ Ü9¿ Üé¿ Ü›¿ á
¿ á!¿ á?¿ ái¿ áÅ¿ á§¿ á”¿ á¿ áÒ¿ à¿ à¿ àD¿ àE¿ àQ¿ àx¿ à™¿ àΩ¿ à√¿ àƒ¿ àﬁ¿ â"¿ âz¿ âπ¿ â∫¿ â„¿ ä5¿ äY¿ äZ¿ äå¿ ä∂¿ ã	¿ ã*¿ ã+¿ ãF¿ ãh¿ ãó¿ ãØ¿ ãÕ¿ ã‹¿ ãÈ¿ å ¿ å¿ å¿ å¿ å¿ å!¿ å"¿ å[¿ åo¿ åå¿ åÆ¿ åœ¿ åÛ¿ ç¿ çM¿ çÑ¿ ç¡¿ ç˜¿ é¿ é>¿ é\¿ éÜ¿ é∏¿ é⁄¿ è ¿ è)¿ èf¿ è¢¿ è≈¿ èÙ¿ èı¿ ê¿ ê3¿ êQ¿ êt¿ êô¿ êÕ¿ êŒ¿ ë¿ ëc¿ ëù¿ ëÊ¿ ëÁ¿ í¿ í'¿ í(¿ íU¿ íV¿ íb¿ íÑ¿ íÃ¿ íÕ¿ ì¿ ìj¿ ì∫¿ ìˆ¿ ì˜¿ îT¿ î{¿ îò¿ îæ¿ î›¿ îﬁ¿ ï¿ ï]¿ ïù¿ ï’¿ ï€¿ ï‹¿ ñ ¿ ñ7¿ ñ≥¿ ñÎ¿ ó7¿ óî¿ óö¿ óõ¿ óœ¿ ò¿ ò?¿ òå¿ òï¿ ô¿ ô=¿ ô¨¿ ô≤¿ ô≥¿ ô‹¿ ö¿ öj¿ ö∏¿ öπ¿ öÏ¿ õ¿ õJ¿ õR¿ õX¿ õY¿ õß¿ õÎ¿ ú¿ úw¿ úx¿ ú†¿ úË¿ úÈ¿ ù¿ ù/¿ ùë¿ ùÍ¿ ùÚ¿ ùÛ¿ û5¿ ûf¿ ûà¿ û¡¿ ü¿ ü*¿ ü3¿ ük¿ ü≠¿ ü≥¿ ü¥¿ †¿ †U¿ †ú¿ †Ê¿ †Ì¿ °B¿ °Ö¿ °”¿ ¢ ¿ ¢p¿ ¢ó¿ ¢ò¿ ¢æ¿ ¢·¿ £¿ £W¿ £à¿ £™¿ £≥¿ £¸¿ §7¿ §=¿ §>¿ §Ñ¿ §∞¿ §Û¿ •C¿ •I¿ •J¿ •y¿ •Ω¿ •Ó¿ ¶,¿ ¶5¿ ¶ç¿ ß¿ ß¿ ß ¿ ßH¿ ßÄ¿ ßﬁ¿ ßﬂ¿ ®-¿ ®Q¿ ®§¿ ®Œ¿ ®Ù¿ ©>¿ ©°¿ ©√¿ ©Ó¿ ™¿ ™(¿ ™L¿ ™|¿ ™¢¿ ™ ¿ ™”¿ ´9¿ ´°¿ ´Ó¿ ¨¿ ¨/¿ ¨l¿ ¨u¿ ¨π¿ ¨Ô¿ ¨ı¿ ¨ˆ¿ ≠"¿ ≠z¿ ≠°¿ ≠≈¿ ≠Á¿ Æ+¿ Æ6¿ Æ>¿ Æ?¿ Æg¿ Æµ¿ ÆÒ¿ Ø ¿ ØD¿ Øî¿ ØÂ¿ ∞1¿ ∞F¿ ∞í¿ ∞√¿ ∞¯¿ ±¿ ±¿ ±¿ ±s¿ ±‹¿ ±‚¿ ±„¿ ≤¿ ≤q¿ ≤¨¿ ≤≤¿ ≤≥¿ ≤›¿ ≥"¿ ≥Z¿ ≥`¿ ≥a¿ ≥é¿ ≥÷¿ ¥¿ ¥¿ ¥¿ ¥:¿ ¥p¿ ¥™¿ ¥±¿ ¥µ¿ ¥∂¿ ¥¬¿ ¥˜¿ µ%¿ µ[¿ µè¿ µ˚¿ ∂]¿ ∂Ω¿ ∂Î¿ ∑2¿ ∑6¿ ∑8¿ ∑9¿ ∑Ü¿ ∑ä¿ ∑”¿ ∑◊¿ ∏¿ ∏W¿ ∏ñ¿ ∏–¿ π¿ π9¿ πR¿ πv¿ πõ¿ πø¿ π‰¿ ∫¿ ∫7¿ ∫a¿ ∫b¿ ∫y¿ ∫•¿ ∫›¿ ª¿ ª¿ ªM¿ ª|¿ ª}¿ ªâ¿ ªÈ¿ ªÎ¿ ªÏ¿ ºf¿ º¿¿ ºı¿ Ω%¿ ΩW¿ Ωå¿ æ¿ æ6¿ æo¿ æ£¿ æΩ¿ ææ¿ æ ¿ æﬂ¿ æˆ¿ æ˜¿ ø&¿ øR¿ øe¿ ø¶¿ øø¿ ø¿¿ ø‡¿ ¿3¿ ¿M¿ ¿y¿ ¿Ü¿ ¿–¿ ¡ ¿ ¡A¿ ¡G¿ ¡K¿ ¡L¿ ¡X¿ ¡k¿ ¡é¿ ¡£¿ ¡ß¿ ¡®¿ ¡¥¿ ¡¯¿ ¬¿ ¬W¿ ¬ç¿ ¬Ê¿ ¬Ù¿ ¬˙¿ √v¿ √√¿ √ﬁ¿ √‰¿ ƒ'¿ ƒi¿ ƒ•¿ ƒÙ¿ ≈/¿ ≈N¿ ≈r¿ ≈†¿ ≈™¿ ≈π¿ ∆¿ ∆V¿ ∆°¿ ∆À¿ ∆Á¿ «¿ «¿ «M¿ «U¿ «[¿ «_¿ «`¿ «¶¿ «⁄¿ «Ë¿ »¿ »¿ »3¿ »d¿ »¨¿ »œ¿ »Î¿ »Ú¿ …[¿ …r¿ …ó¿ …µ¿ …æ¿ …≈¿ …∆¿  ¿  9¿  U¿  \¿  œ¿  –¿ À¿ ÀÑ¿ Ã¿ Ã	¿ Ã*¿ Ãé¿ ÃÙ¿ Õd¿ Õe¿ Õ”¿ ŒC¿ ŒD¿ ŒÄ¿ ŒΩ¿ Œ¡¿ Œ¬¿ œ	¿ œ¿ œL¿ œö¿ œæ¿ œÏ¿ œˆ¿ œ˛¿ –¿ –
¿ –¿ –D¿ –n¿ –å¿ –ê¿ –ë¿ –ù¿ –ƒ¿ –÷¿ –˛¿ —¿ —]¿ —ú¿ —∏¿ —Ë¿ “¿ “¿ “*¿ “G¿ “u¿ “û¿ “—¿ “¯¿ ”	¿ ”¿ ”S¿ ”n¿ ”°¿ ”ƒ¿ ”Û¿ ‘¿ ‘%¿ ‘1¿ ‘>¿ ‘Y¿ ‘Ñ¿ ‘´¿ ‘€¿ ‘˛¿ ’¿ ’¿ ’#¿ ’*¿ ’.¿ ’/¿ ’M¿ ’Æ¿ ’≤¿ ’≥¿ ’ﬂ¿ ÷¿ ÷0¿ ÷7¿ ÷;¿ ÷=¿ ÷>¿ ÷Ä¿ ÷Ñ¿ ÷»¿ ÷Ã¿ ◊¿ ◊R¿ ◊Ä¿ ◊Ñ¿ ◊ò¿ ◊Ê¿ ÿ2¿ ÿz¿ ÿ¢¿ ÿ¶¿ Ÿí¿ Ÿñ¿ Ÿﬂ¿ ŸÔ¿ ŸÛ¿ ⁄¿ ⁄U¿ ⁄§¿ ⁄Û¿ €-¿ €1¿ €ñ¿ €ö¿ €„¿ €Û¿ €˜¿ ‹¿ ‹X¿ ‹©¿ ‹ı¿ ›-¿ ›|¿ ›≥¿ ›∑¿ ﬁ¿ ﬁ¿ ﬁg¿ ﬁw¿ ﬁ{¿ ﬁ∑¿ ﬁª¿ ﬂ¿ ﬂI¿ ﬂê¿ ﬂ◊¿ ‡¿ ‡P¿ ‡î¿ ‡÷¿ ‡Â¿ ‡È¿ ·)¿ ·o¿ ·Ø¿ ·¿ ‚(¿ ‚i¿ ‚É¿ ‚á¿ ‚û¿ ‚¢¿ ‚ª¿ ‚ø¿ ‚¸¿ „3¿ „q¿ „ü¿ „£¿ „Í¿ ‰'¿ ‰u¿ ‰ø¿ Â¿ Â¿ Â¿ Â'¿ Âx¿ Â¬¿ Â∆¿ Â“¿ Ê¿ ÊK¿ Êa¿ Ê•¿ Ê€¿ ÊÁ¿ ÊÔ¿ Êˆ¿ Ê˛¿ Á¿ Á¿ ÁV¿ Áï¿ ÁÃ¿ Á–¿ Áﬁ¿ Á‚¿ Ë2¿ ËV¿ Ë•¿ Ë‡¿ È1¿ ÈÇ¿ È–¿ Í¿ Í)¿ Íx¿ Í¡¿ Í“¿ Î#¿ Îr¿ Î√¿ Ï¿ ÏI¿ Ïê¿ ÏÌ¿ Ì¿ ÌR¿ Ìe¿ Ìt¿ ÌÖ¿ Ìî¿ Ì≥¿ Ì⁄¿ Ó¿ Ó#¿ Óh¿ Óy¿ Óì¿ Óß¿ Óƒ¿ Ó‚¿ Ó¯¿ Ô¿ Ô5¿ ÔN¿ Ôä¿ Ôß¿ Ô–¿ ÔÎ¿ 	¿ 6¿ f¿ ~¿ û¿ ¡¿ ¿ Ò ¿ Ò!¿ Òg¿ Ò≤¿ Ò˙¿ Ú"¿ Ú(¿ Úu¿ Ú√¿ Ú…¿ Û¿ ÛV¿ Û¢¿ ÛÎ¿ Ù1¿ Ù7¿ ÙG¿ ÙM¿ Ùï¿ Ù∫¿ Ù”¿ Ù‘¿ ı"¿ ın¿ ıú¿ ı¢¿ ıË¿ ˆ¿ ˆ¿ ˆE¿ ˆK¿ ˆ[¿ ˆa¿ ˆ´¿ ˆ≈¿ ˆÍ¿ ˆÎ¿ ˜#¿ ˜H¿ ˜I¿ ˜t¿ ˜z¿ ˜æ¿ ˜ˇ¿ ¯K¿ ¯ò¿ ¯À¿ ¯—¿ ˘¿ ˘p¿ ˘ø¿ ˙¿ ˙/¿ ˙5¿ ˙É¿ ˙”¿ ˚ ¿ ˚U¿ ˚k¿ ˚l¿ ˚∏¿ ˚æ¿ ˚Ë¿ ¸¿ ¸¿ ¸]¿ ¸c¿ ¸Œ¿ ˝¿ ˝¿ ˝n¿ ˝t¿ ˝ﬁ¿ ˛"¿ ˛#¿ ˛l¿ ˛r¿ ˛º¿ ˇ¿ ˇ
¿ ˇC¿ ˇI¿ ˇÑ¿ ˇ∂¿ ˇÂ¿ ˇÊ¿ 5¿ ;¿ o¿ ß¿ ®¿ Ú¿>¿h¿n¿ä¿ê¿◊¿›¿0¿_¿e¿{¿µ¿ˆ¿G¿Q¿W¿©¿ª¿”¿‘¿+¿T¿U¿ü¿‰¿¿¿0¿6¿Ä¿Ü¿‹¿¿¿'¿W¿õ¿È¿˘¿ˇ¿U¿g¿Ç¿É¿›¿	¿
¿e¿k¿µ¿Ô¿	¿	¿	^¿	d¿	¶¿	∆¿	«¿
¿
¿
c¿
Ñ¿
ä¿
⁄¿
¿¿¿D¿J¿ô¿Á¿¿#¿s¿ƒ¿¿7¿=¿Ö¿“¿ ¿¿S¿ú¿±¿∑¿¿N¿ö¿∫¿¿¿–¿÷¿$¿[¿°¿Ì¿/¿L¿M¿ñ¿Â¿1¿7¿¿–¿¿"¿:¿b¿c¿¨¿≤¿ˇ¿H¿N¿í¿≥¿…¿ ¿¿@¿A¿ã¿ô¿ü¿Â¿0¿~¿»¿˘¿&¿K¿L¿ê¿©¿Ø¿Ë¿Ó¿'¿Q¿R¿î¿≠¿≥¿Ï¿Ú¿+¿X¿Y¿ü¿•¿¿#¿)¿v¿«¿Õ¿›¿„¿0¿B¿a¿b¿Ø¿—¿◊¿$¿h¿n¿Æ¿¥¿ ¿¿K¿Q¿ü¿±¿∑¿Õ¿¿h¿µ¿¿M¿_¿e¿≥¿≈¿À¿ ¿ c¿ ≥¿!¿!=¿!C¿!ì¿!‹¿" ¿"&¿"s¿"∫¿"Ï¿#	¿#]¿#w¿#å¿#í¿#∆¿#⁄¿$+¿$4¿$L¿$∑¿%¿%l¿%u¿%Ü¿%È¿&A¿&n¿&µ¿&æ¿&œ¿'/¿'ç¿'Î¿(L¿(©¿)¿)0¿)9¿)p¿)x¿)|¿)}¿) ¿)Ï¿)Ú¿*C¿*ã¿*ë¿*—¿*◊¿*Á¿*Ì¿+6¿+Å¿+ô¿+—¿+Ó¿,+¿,/¿,0¿,}¿,≠¿,≥¿,ˆ¿,¸¿-F¿-ê¿-ﬁ¿-¿-ˆ¿.C¿.ë¿.◊¿/¿/¿/W¿/¶¿/ı¿0?¿0Q¿0ü¿1¿1(¿1^¿1t¿1œ¿1⁄¿1Ù¿2X¿2≠¿2∏¿2À¿30¿3ä¿3π¿4¿4¿4 ¿4Ç¿4‚¿5B¿5¨¿5∑¿5¿5˙¿6 ¿6+¿6/¿60¿6~¿6å¿6í¿6ﬂ¿7-¿7z¿7À¿7‡¿7Ê¿8&¿8,¿8<¿8B¿8ì¿8ÿ¿9,¿9T¿9q¿9è¿9Ù¿:¿:,¿:Ñ¿:Ø¿:µ¿:π¿:∫¿:∆¿:¯¿:˙¿:˚¿;¿;¿;g¿;è¿;Ì¿;˘¿<.¿</¿<;¿<Ñ¿<æ¿<ˇ¿=¿=¿=¿=¿=o¿=Ã¿=Õ¿=˜¿=¯¿>6¿>e¿>£¿>“¿?¿?H¿?î¿?ﬂ¿?‡¿?¸¿@-¿@3¿@|¿@Ø¿@Ì¿A.¿A/¿A^¿Ad¿At¿Az¿A∆¿A€¿B¿B¿B>¿BD¿BT¿BZ¿B™¿B¡¿B˜¿B¯¿C&¿CQ¿Ce¿Cç¿Có¿C≈¿CÀ¿Cœ¿C–¿D¿D/¿DC¿Dn¿Dx¿D©¿DØ¿D≥¿D¥¿D◊¿D›¿E.¿E`¿Ef¿E¥¿F¿F¿F¿F`¿Fw¿F}¿FŒ¿F‰¿G,¿GW¿G]¿GÇ¿GÜ¿Gá¿G≥¿Gπ¿H¿HH¿HN¿Hú¿HÏ¿H˙¿I ¿IH¿I_¿Ie¿I∂¿Iœ¿J¿J9¿J?¿Jg¿Jk¿Jl¿J•¿J”¿J‘¿JÊ¿K7¿K8¿KÖ¿K†¿L#¿LR¿Lb¿Lc¿Lñ¿L™¿L⁄¿L‰¿LÍ¿LÓ¿LÔ¿M¿M	¿Mb¿Mó¿M˙¿M˚¿NN¿No¿O
¿O?¿OO¿OP¿Oè¿O£¿Oﬂ¿OÈ¿OÔ¿OÛ¿OÙ¿P¿P¿P[¿Pß¿P∫¿Q¿QQ¿Qâ¿Qä¿Q∂¿Q˚¿RP¿R¢¿RÕ¿S=¿Ss¿S—¿T¿TF¿Të¿T◊¿U ¿U0¿UY¿Uì¿U≈¿U’¿V-¿V9¿Vs¿VÃ¿V÷¿VÏ¿VÙ¿Vı¿WM¿Wß¿W√¿WÚ¿Xl¿Xß¿X‘¿Xﬁ¿Y¿Y¿Y¿YL¿Ym¿Yµ¿Yı¿Z%¿ZK¿Zx¿Z÷¿ZÁ¿Zˆ¿[¿[¿[¿[N¿[W¿[]¿[a¿[b¿[Ü¿[≠¿[Â¿\¿\¿\%¿\f¿\ï¿\°¿\∂¿\¬¿\»¿\Ã¿\Õ¿]¿]¿]^¿]u¿]ô¿]¿¿]≈¿]…¿] ¿^¿^¿^^¿^x¿^£¿^Œ¿^‘¿^ÿ¿^Ÿ¿_¿_;¿_?¿_@¿_{¿_ñ¿_Ø¿_Â¿`¿`¿`0¿`H¿`i¿`¿`±¿`∏¿`»¿a¿a;¿aÜ¿a«¿b#¿b.¿b6¿bI¿bS¿bT¿bá¿bÔ¿c¿c¿c:¿cY¿c¿cö¿c√¿c”¿c€¿d¿dI¿dl¿dm¿dô¿d≠¿d—¿d€¿d‹¿e!¿eR¿eZ¿ev¿e|¿e}¿eØ¿eº¿eÂ¿fD¿fl¿fx¿fÑ¿fÖ¿f¶¿f“¿fÒ¿g
¿g'¿g/¿g5¿g6¿g^¿gy¿g©¿gÿ¿gÓ¿h¿h+¿h5¿hr¿hë¿hö¿h≤¿hÓ¿i¿i>¿iL¿iV¿i_¿iu¿ií¿i±¿i·¿j
¿j¿j¿j5¿jW¿j¿jõ¿jØ¿j—¿jÒ¿j¯¿j˘¿k¿kN¿kT¿kU¿kÜ¿kô¿k™¿kæ¿k’¿k˘¿lA¿lV¿l]¿la¿lb¿l∞¿lÒ¿l˜¿mI¿m]¿mc¿m§¿mÛ¿n¿n¿nW¿n¶¿n ¿n–¿o#¿oi¿o∂¿oº¿p¿pZ¿pé¿pî¿p„¿q1¿qg¿qm¿qΩ¿r¿rZ¿rÅ¿rá¿rù¿rÁ¿s1¿sa¿sg¿s ¿s‹¿sÏ¿sÚ¿tA¿tU¿t°¿tÓ¿t˛¿uO¿u©¿u‚¿uˇ¿v¿v2¿vJ¿vb¿vÉ¿vô¿v—¿vÿ¿vË¿w¿w,¿ww¿w∏¿x¿x¿x'¿x:¿xD¿xr¿xs¿xì¿y¿y+¿y]¿yn¿y}¿y¶¿y–¿yÓ¿z¿z(¿zJ¿zj¿zª¿zƒ¿zÃ¿{¿{¿{¿{8¿{x¿{ª¿|¿|A¿|B¿|à¿|â¿| ¿|Ò¿}W¿}X¿}ô¿}ﬁ¿~¿~:¿~Ü¿~¬¿~˛¿¿	¿
¿;¿h¿®¿¨¿≠¿ˇ¿ÄR¿Ä¶¿ÄÕ¿ÅC¿Å~¿ÇI¿Çƒ¿Ç ¿ÇÀ¿Ç›¿É¿ÉP¿ÉX¿ÉY¿É∑¿Ñ¿Ñ)¿Ñv¿Ñz¿Ñ{¿Ñ¨¿Ñ≠¿Ñ˝¿ÖJ¿Öt¿Öì¿ÖÓ¿Ü?¿Üh¿Üu¿Ü´¿ÜŒ¿Ü◊¿Ü›¿Ü·¿Ü‚¿ÜÒ¿ÜÚ¿á&¿á'¿áN¿áÇ¿áÜ¿áá¿áì¿á®¿áø¿à¿àá¿à˘¿âD¿âÉ¿âñ¿â®¿âÿ¿âﬂ¿â‡¿ä%¿äQ¿äd¿äk¿äo¿äp¿ä|¿ä©¿äœ¿ãB¿ãõ¿å¿å¿ån¿å›¿å„¿ç¿ç,¿çé¿ç»¿ç‚¿é;¿éu¿éÑ¿éõ¿é‘¿è1¿èl¿è{¿èâ¿èì¿è®¿è¥¿è‹¿ê ¿êP¿ê|¿êã¿ê≥¿êª¿ê¡¿ê≈¿ê∆¿ê“¿êÛ¿ëD¿ë{¿ë‹¿í,¿íR¿í∞¿í›¿í„¿ì(¿ì[¿ìÑ¿ìÖ¿ì≠¿ì–¿ì‘¿ì’¿ì·¿ìÙ¿î¿îH¿îÅ¿î¨¿î¡¿î≈¿î∆¿î‹¿î˘¿ï¿ï"¿ïG¿ïk¿ïë¿ï∏¿ï‹¿ñ¿ñ¿ñO¿ñt¿ñó¿ñæ¿ñÁ¿ñÓ¿ó¿óC¿óI¿óJ¿óê¿ó¨¿óı¿ó˛¿ò¿ò¿ò¿ò2¿òD¿ò[¿òí¿òù¿ò¶¿ò¨¿ò∞¿ò±¿ô ¿ô$¿ô@¿ôU¿ôg¿ôÅ¿ôü¿ô…¿ô˝¿ö:¿öi¿öû¿öÊ¿õ¿õ:¿õE¿õf¿õ™¿õÈ¿ú
¿úJ¿ún¿úw¿ú}¿úÅ¿úÇ¿úŒ¿úÔ¿ù¿ù¿ù/¿ùI¿ùd¿ùê¿ù¡¿ù˛¿û-¿ûb¿ûß¿û‘¿ûı¿ü ¿ü¿üb¿ü°¿ü¬¿†¿†&¿†/¿†5¿†9¿†:¿†Y¿†Å¿†Ç¿†»¿†Œ¿†¸¿°/¿°J¿°ì¿°°¿°ß¿°π¿°◊¿¢¿¢¿¢¿¢¿¢+¿¢R¿¢Ä¿¢≤¿¢¿£#¿£g¿£h¿£ö¿£≠¿£Ω¿£Ó¿§¿§T¿§î¿§ù¿§∑¿§◊¿•¿•'¿•ê¿•ƒ¿•À¿•Â¿•˙¿¶¿¶"¿¶@¿¶b¿¶m¿¶é¿¶Ø¿¶œ¿¶Ò¿ß¿ß¿ß#¿ß$¿ßE¿ßî¿ß¸¿®B¿®W¿®i¿®Å¿®∆¿®¯¿©&¿©I¿©V¿©a¿©¿©°¿©¬¿©Â¿™¿™¿™¿™¿™=¿™X¿™Y¿™•¿™«¿™Ú¿´¿´3¿´|¿´á¿´ê¿´•¿´∑¿´∆¿´È¿¨¿¨+¿¨N¿¨Ü¿¨è¿¨ï¿¨ñ¿¨ø¿¨Â¿≠:¿≠f¿≠â¿≠”¿Æ¿Æ¿Æ"¿Æ4¿ÆY¿Æy¿Æõ¿Æª¿Æﬁ¿ØI¿Øà¿Øë¿Øó¿Øò¿Ø…¿Ø¯¿∞$¿∞w¿∞„¿±¿±¿±2¿±D¿±o¿±ï¿±∑¿±Ë¿≤¿≤.¿≤m¿≤v¿≤|¿≤}¿≤Ø¿≤ƒ¿≤÷¿≤È¿≥¿≥*¿≥l¿≥{¿≥à¿≥£¿≥ª¿≥ﬂ¿≥ˇ¿¥<¿¥n¿¥í¿¥∞¿¥Ô¿µ,¿µ?¿µP¿µ_¿µl¿µw¿µü¿µ¡¿µ·¿∂¿∂E¿∂Ñ¿∂ç¿∂ì¿∂î¿∂¬¿∂◊¿∂È¿∑¿∑8¿∑Z¿∑z¿∑ù¿∑¡¿∏ ¿∏	¿∏¿∏¿∏#¿∏3¿∏Z¿∏ô¿∏”¿π ¿πF¿πr¿π{¿π•¿πƒ¿π‚¿∫¿∫#¿∫*¿∫+¿∫M¿∫l¿∫ç¿∫§¿∫∏¿∫”¿ª¿ª)¿ªä¿ª≤¿ªø¿ª‚¿º¿º(¿ºM¿ºr¿º}¿ºå¿ºØ¿º“¿ºÛ¿Ω¿Ω%¿Ω+¿Ω,¿ΩN¿Ω{¿Ω´¿Ω∏¿ΩË¿æ¿æ¿æ¿æd¿æ¢¿æ¿æ˜¿æ¯¿øB¿øy¿ø¿¿¿¿¿$¿¿%¿¿T¿¿ú¿¿ù¿¿∏¿¿‘¿¿ˇ¿¡(¿¡A¿¡è¿¬¿¬-¿¬\¿¬ö¿¬´¿¬ÿ¿√¿√-¿√v¿√û¿√–¿ƒ'¿ƒè¿ƒ‰¿≈¿≈{¿≈´¿≈Â¿∆7¿∆g¿∆z¿∆û¿∆Ø¿∆æ¿∆Ã¿∆◊¿∆‡¿∆Á¿∆Î¿∆Ì¿∆Ó¿«!¿«G¿«H¿«f¿«g¿«s¿«ú¿«Ú¿«ˆ¿«˜¿»¿»)¿»Q¿»|¿»Ä¿»Ç¿»É¿»ø¿»√¿…¿…,¿…c¿…¬¿…’¿…ˆ¿…˜¿ H¿ u¿ v¿ ÷¿ Ú¿ Û¿ÀC¿Àb¿Àd¿Àe¿À±¿Ã¿ÃR¿Ã£¿Ã◊¿Ã€¿Õ&¿Õp¿Õ¡¿Õ◊¿Õ€¿Œ(¿Œu¿Œ≈¿œ¿œH¿œL¿œå¿œœ¿œ¿–¿–0¿–Z¿–Ñ¿–£¿–§¿–‹¿–‚¿—¿—.¿—/¿—g¿—|¿—}¿—â¿—®¿— ¿“¿“¿“"¿“2¿“8¿“9¿“M¿“]¿“c¿“d¿“∞¿“Ô¿”&¿”*¿”+¿”7¿”M¿”ç¿”ë¿”ì¿”î¿”»¿”Á¿”ˆ¿‘¿‘9¿‘V¿‘u¿‘ê¿‘Ø¿‘…¿‘›¿‘Ì¿’¿’¿’.¿’4¿’5¿’ß¿’¿¿’·¿÷¿÷%¿÷D¿÷_¿÷¿÷ö¿÷∂¿÷“¿÷˜¿÷¯¿◊¿◊N¿◊P¿◊Q¿◊ó¿◊›¿◊ﬁ¿◊Í¿◊ˇ¿ÿ¿ÿF¿ÿR¿ÿï¿ÿ‡¿ÿÁ¿Ÿ.¿Ÿ2¿Ÿ3¿Ÿ?¿ŸR¿Ÿp¿ŸÖ¿Ÿâ¿Ÿä¿Ÿñ¿Ÿœ¿Ÿı¿⁄>¿⁄B¿⁄C¿⁄T¿⁄Ñ¿⁄Æ¿⁄Ã¿⁄–¿⁄—¿€¿€J¿€n¿€r¿€s¿€∏¿‹¿‹6¿‹^¿‹Ü¿‹ç¿‹ë¿‹í¿‹«¿‹ˆ¿›¿›¿›"¿›#¿›h¿›¶¿›ﬂ¿ﬁ¿ﬁå¿ﬁ∫¿ﬁ‡¿ﬂ6¿ﬂ@¿ﬂM¿ﬂà¿ﬂ≤¿ﬂ∏¿‡¿‡e¿‡t¿‡z¿‡å¿‡ê¿‡ë¿‡ù¿‡ƒ¿‡‡¿·¿·D¿·Z¿·é¿·‚¿·˙¿‚¿‚¿‚&¿‚?¿‚Y¿‚†¿‚…¿‚Á¿„$¿„O¿„z¿„°¿„À¿„¿‰%¿‰N¿‰o¿‰û¿‰À¿‰ÿ¿‰„¿‰Ï¿‰Û¿‰˜¿‰¯¿‰˙¿‰˚¿Â9¿Â=¿Âä¿Âé¿ÂŸ¿Ê¿Ê7¿Êù¿Ê»¿Ê⁄¿ÊÔ¿Á ¿Á ¿Á?¿ÁP¿ÁQ¿Át¿Áv¿Áw¿Á¶¿Áø¿Á‹¿Ë ¿Ë¿Ë<¿Ë=¿ËU¿Ëâ¿Ëä¿Ëñ¿ËÃ¿Ë˘¿Ë˝¿Ëˇ    Ä•  Ä∫  Ä‘ÄÎ Ä ÅÅÅ  Å= ÅdÅzÅ|  Å§  Åª  Å—  ÅÌ  Ç	  Ç  Ç5  ÇJ  Ça  Çw  Çô  Çø  ÇÓ  É  É  É>    á íôç~Üw/// Manages [SnackBar]s and [MaterialBanner]s for descendant [Scaffold]s.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=lytQi-slT5Y}
///
/// This class provides APIs for showing snack bars and material banners at the
/// bottom and top of the screen, respectively.
///
/// To display one of these notifications, obtain the [ScaffoldMessengerState]
/// for the current [BuildContext] via [ScaffoldMessenger.of] and use the
/// [ScaffoldMessengerState.showSnackBar] or the
/// [ScaffoldMessengerState.showMaterialBanner] functions.
///
/// When the [ScaffoldMessenger] has nested [Scaffold] descendants, the
/// ScaffoldMessenger will only present the notification to the root Scaffold of
/// the subtree of Scaffolds. In order to show notifications for the inner, nested
/// Scaffolds, set a new scope by instantiating a new ScaffoldMessenger in
/// between the levels of nesting.
///
/// {@tool dartpad}
/// Here is an example of showing a [SnackBar] when the user presses a button.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [SnackBar], which is a temporary notification typically shown near the
///    bottom of the app using the [ScaffoldMessengerState.showSnackBar] method.
///  * [MaterialBanner], which is a temporary notification typically shown at the
///    top of the app using the [ScaffoldMessengerState.showMaterialBanner] method.
///  * [debugCheckHasScaffoldMessenger], which asserts that the given context
///    has a [ScaffoldMessenger] ancestor.
///  * Cookbook: [Display a SnackBar](https://flutter.dev/docs/cookbook/design/snackbars) ç´Ä´ ç˝éI/// Creates a widget that manages [SnackBar]s for [Scaffold] descendants.é	é  é$é3  é@éFéTéMéGéPéZyéŒ`/// The widget below this widget in the tree.
///
/// {@macro flutter.widgets.ProxyWidget.child}  éÿá˘ïƒÜÖ/// The state from the closest instance of this class that encloses the given
/// context.
///
/// {@tool dartpad}
/// Typical usage of the [ScaffoldMessenger.of] function is to call it in
/// response to a user gesture or an application state change.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger.of.0.dart **
/// {@end-tool}
///
/// A less elegant but more expedient solution is to assign a [GlobalKey] to the
/// [ScaffoldMessenger], then use the `key.currentState` property to obtain the
/// [ScaffoldMessengerState] rather than using the [ScaffoldMessenger.of]
/// function. The [MaterialApp.scaffoldMessengerKey] refers to the root
/// ScaffoldMessenger that is provided by default.
///
/// {@tool dartpad}
/// Sometimes [SnackBar]s are produced by code that doesn't have ready access
/// to a valid [BuildContext]. One such example of this is when you show a
/// SnackBar from a method outside of the `build` function. In these
/// cases, you can assign a [GlobalKey] to the [ScaffoldMessenger]. This
/// example shows a key being used to obtain the [ScaffoldMessengerState]
/// provided by the [MaterialApp].
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger.of.1.dart **
/// {@end-tool}
///
/// If there is no [ScaffoldMessenger] in scope, then this will assert in
/// debug mode, and throw an exception in release mode.
///
/// See also:
///
///  * [maybeOf], which is a similar function but will return null instead of
///    throwing if there is no [ScaffoldMessenger] ancestor.
///  * [debugCheckHasScaffoldMessenger], which asserts that the given context
///    has a [ScaffoldMessenger] ancestor. ï«ï’   ñ’ÇqòhÅa/// The state from the closest instance of this class that encloses the given
/// context, if any.
///
/// Will return null if a [ScaffoldMessenger] is not found in the given context.
///
/// See also:
///
///  * [of], which is a similar function, except that it will throw an
///    exception if a [ScaffoldMessenger] is not found in the given context. òpò~   ôJMôm   ôJôK ôõæõ=Åõ/// State for a [ScaffoldMessenger].
///
/// A [ScaffoldMessengerState] object can be used to [showSnackBar] or
/// [showMaterialBanner] for every registered [Scaffold] that is a descendant of
/// the associated [ScaffoldMessenger]. Scaffolds will register to receive
/// [SnackBar]s and [MaterialBanner]s from their closest ScaffoldMessenger
/// ancestor.
///
/// Typically obtained via [ScaffoldMessenger.of].  õóNõ∫ õ«õ‘õ‚õ’õ„õ‰õÈÄ¥ú< 
úOúTúöúUúnúôúoúúõúúú°.ú∂  ú”Äñù 
ù'ù,ùfù-ùFùeùGùQùgùhùm(ùÇ  ùôù†  ù≤ù∏   ù“Ç¬ù„   ù“ù”†òÅ†ù  †ß†∂   °µÄ¨°∫  °∆°’   ¢eÄœ¢j    £–Ä¬£’  £›£Ï   §©é˜®ËÉÿ/// Shows a [SnackBar] across all registered [Scaffold]s.
///
/// A scaffold can show at most one snack bar at a time. If this function is
/// called while another snack bar is already visible, the given snack bar
/// will be added to a queue and displayed after the earlier snack bars have
/// closed.
///
/// To control how long a [SnackBar] remains visible, use [SnackBar.duration].
///
/// To remove the [SnackBar] with an exit animation, use [hideCurrentSnackBar]
/// or call [ScaffoldFeatureController.close] on the returned
/// [ScaffoldFeatureController]. To remove a [SnackBar] suddenly (without an
/// animation), use [removeCurrentSnackBar].
///
/// See [ScaffoldMessenger.of] for information about how to obtain the
/// [ScaffoldMessengerState].
///
/// {@tool dartpad}
/// Here is an example of showing a [SnackBar] when the user presses a button.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger_state.show_snack_bar.0.dart **
/// {@end-tool} ®ı®ˇ   ≥§Ç∆≥©  ≥∆≥◊   ∂nÇÂ∑uÄ˜/// Removes the current [SnackBar] (if any) immediately from registered
/// [Scaffold]s.
///
/// The removed snack bar does not run its normal exit animation. If there are
/// any queued snack bars, they begin their entrance animation immediately. ∑ç9∑£  ∑´∑ø∑¿πWÉ?πÛÄê/// Removes the current [SnackBar] by running its normal exit animation.
///
/// The closed completer is called after the animation is complete. ∫	7∫  ∫'∫;∫<ºöÅ”Ω)ÄÖ/// Removes all the snackBars currently in queue by clearing the queue
/// and running normal exit animation on the current snackBar.   æãâì¿ B¡É«/// Shows a [MaterialBanner] across all registered [Scaffold]s.
///
/// A scaffold can show at most one material banner at a time. If this function is
/// called while another material banner is already visible, the given material banner
/// will be added to a queue and displayed after the earlier material banners have
/// closed.
///
/// To remove the [MaterialBanner] with an exit animation, use [hideCurrentMaterialBanner]
/// or call [ScaffoldFeatureController.close] on the returned
/// [ScaffoldFeatureController]. To remove a [MaterialBanner] suddenly (without an
/// animation), use [removeCurrentMaterialBanner].
///
/// See [ScaffoldMessenger.of] for information about how to obtain the
/// [ScaffoldMessengerState].
///
/// {@tool dartpad}
/// Here is an example of showing a [MaterialBanner] when the user presses a button.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger_state.show_material_banner.0.dart **
/// {@end-tool} ¿ B‘¿ B‰   ¿ H"ÇG¿ H'  ¿ HJ¿ H[   ¿ JmÇÈ¿ KÜÅ	/// Removes the current [MaterialBanner] (if any) immediately from registered
/// [Scaffold]s.
///
/// The removed material banner does not run its normal exit animation. If there are
/// any queued material banners, they begin their entrance animation immediately. ¿ K§E¿ K¿  ¿ K»¿ K‚¿ K„¿ MZÉB¿ M¸Äñ/// Removes the current [MaterialBanner] by running its normal exit animation.
///
/// The closed completer is called after the animation is complete. ¿ NC¿ N4  ¿ N<¿ NV¿ NW¿ P†Ç%¿ Q?Äï/// Removes all the [MaterialBanner]s currently in queue by clearing the queue
/// and running normal exit animation on the current [MaterialBanner].   ¿ R…Ñπ¿ R‹  ¿ R‚¿ R  ¿ R…¿ R ¿ WÜÄí¿ Wó   ¿ WÜ¿ Wá ¿ XÅ¢¿ X"  ¿ XVÄÆ ¿ X\¿ Xs ¿ Xz¿ Xä  ¿ Xî6¿ Xµ  ¿ XÎ¿ X”¿ XÌ¿ Y4¿ Y%   ¿ YA{¿ YR  ¿ Ye¿ Y~  ¿ YA¿ YB ¿ Y¿íf¿ [ÄÅÆ/// The geometry of the [Scaffold] after all its contents have been laid out
/// except the [FloatingActionButton].
///
/// The [Scaffold] passes this pre-layout geometry to its
/// [FloatingActionButtonLocation], which produces an [Offset] that the
/// [Scaffold] uses to position the [FloatingActionButton].
///
/// For a description of the [Scaffold]'s geometry after it has
/// finished laying out, see the [ScaffoldGeometry]. ¿ [ûÇ ¿ \=¿ \VÄî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.
¿ \]¿ \l  ¿ \Ä¿ \è  ¿ \°¿ \∞  ¿ \ø&¿ \Œ  ¿ \Î¿ \˙  ¿ ]¿ ]  ¿ ]*¿ ]9  ¿ ]J¿ ]Y  ¿ ]j ¿ ]y  ¿ ]ê¿ ]ü   
¿ ]∂Ä™¿ ^HÄÄ/// The [Size] of [Scaffold.floatingActionButton].
///
/// If [Scaffold.floatingActionButton] is null, this will be [Size.zero]. ¿ ^eÄ∂¿ _Äì/// The [Size] of the [Scaffold]'s [BottomSheet].
///
/// If the [Scaffold] is not currently showing a [BottomSheet],
/// this will be [Size.zero]. ¿ _ ÇÄ¿ aìÇM/// The vertical distance from the Scaffold's origin to the bottom of
/// [Scaffold.body].
///
/// This is useful in a [FloatingActionButtonLocation] designed to
/// place the [FloatingActionButton] at the bottom of the screen, while
/// keeping it above the [BottomSheet], the [Scaffold.bottomNavigationBar],
/// or the keyboard.
///
/// The [Scaffold.body] is laid out with respect to [minInsets] already. This
/// means that a [FloatingActionButtonLocation] does not need to factor in
/// [EdgeInsets.bottom] of [minInsets] when aligning a [FloatingActionButton]
/// to [contentBottom]. ¿ a•Ç<¿ c◊Ç/// The vertical distance from the [Scaffold]'s origin to the top of
/// [Scaffold.body].
///
/// This is useful in a [FloatingActionButtonLocation] designed to
/// place the [FloatingActionButton] at the top of the screen, while
/// keeping it below the [Scaffold.appBar].
///
/// The [Scaffold.body] is laid out with respect to [minInsets] already. This
/// means that a [FloatingActionButtonLocation] does not need to factor in
/// [EdgeInsets.top] of [minInsets] when aligning a [FloatingActionButton] to
/// [contentTop]. ¿ cÊÅÈ¿ e∆Å∫/// The minimum padding to inset the [FloatingActionButton] by for it
/// to remain visible.
///
/// This value is the result of calling [MediaQueryData.padding] in the
/// [Scaffold]'s [BuildContext],
/// and is useful for insetting the [FloatingActionButton] to avoid features like
/// the system status bar or the keyboard.
///
/// If [Scaffold.resizeToAvoidBottomInset] is set to false,
/// [EdgeInsets.bottom] of [minInsets] will be 0.0. ¿ e‘ÅÁ¿ g≠Å∑/// The minimum padding to inset interactive elements to be within a safe,
/// un-obscured space.
///
/// This value reflects the [MediaQueryData.viewPadding] of the [Scaffold]'s
/// [BuildContext] when [Scaffold.resizeToAvoidBottomInset] is false or and
/// the [MediaQueryData.viewInsets] > 0.0. This helps distinguish between
/// different types of obstructions on the screen, such as software keyboards
/// and physical device notches. ¿ g¿Ç©¿ j]Çw/// The [Size] of the whole [Scaffold].
///
/// If the [Size] of the [Scaffold]'s contents is modified by values such as
/// [Scaffold.resizeToAvoidBottomInset] or the keyboard opening, then the
/// [scaffoldSize] will not reflect those changes.
///
/// This means that [FloatingActionButtonLocation]s designed to reposition
/// the [FloatingActionButton] based on events such as the keyboard popping
/// up should use [minInsets] to make sure that the [FloatingActionButton] is
/// inset by enough to remain visible.
///
/// See [minInsets] and [MediaQueryData.padding] for more information on the
/// appropriate insets to apply. ¿ jnÄù¿ jˇ/// The [Size] of the [Scaffold]'s [SnackBar].
///
/// If the [Scaffold] is not showing a [SnackBar], this will be [Size.zero]. ¿ kÄØ¿ k≠Äã/// The [Size] of the [Scaffold]'s [MaterialBanner].
///
/// If the [Scaffold] is not showing a [MaterialBanner], this will be [Size.zero]. ¿ kƒ_¿ l;/// The [TextDirection] of the [Scaffold]'s [BuildContext].   ¿ [o¿ [p¿ l(É›¿ m3Ä˘/// A snapshot of a transition between two [FloatingActionButtonLocation]s.
///
/// [ScaffoldState] uses this to seamlessly change transition animations
/// when a running [FloatingActionButtonLocation] transition is interrupted by a new transition. ¿ m|Y ¿ mÇ¿ m† ¿ m°
¿ mß  ¿ m≠¿ m≥  ¿ m∑¿ mΩ  ¿ m∆¿ mÃ   ¿ mŸ(¿ m¸  ¿ n&¿ n(  ¿ n/+¿ nR  ¿ n^¿ nk   ¿ nxÄÍ¿ nã  ¿ nï*¿ n∞  ¿ nx¿ ny¿ ofÄù¿ oy   ¿ of¿ og¿ m"¿ m#¿ pàµ¿ r¬Ç©/// Geometry information for [Scaffold] components after layout is finished.
///
/// To get a [ValueNotifier] for the scaffold geometry of a given
/// [BuildContext], use [Scaffold.geometryOf].
///
/// The ScaffoldGeometry is only available during the paint phase, because
/// its value is computed during the animation and layout phases prior to painting.
///
/// For an example of using the [ScaffoldGeometry], see the [BottomAppBar],
/// which uses the [ScaffoldGeometry] to paint a notch around the
/// [FloatingActionButton].
///
/// For information about the [Scaffold]'s geometry that is used while laying
/// out the [FloatingActionButton], see [ScaffoldPrelayoutGeometry]. ¿ r◊Ä¶ ¿ s!¿ s1A/// Create an object that describes the geometry of a [Scaffold].¿ s8¿ s>  ¿ sY¿ s_   ¿ sÅÄˆ¿ taÄ…/// The distance from the [Scaffold]'s top edge to the top edge of the
/// rectangle in which the [Scaffold.bottomNavigationBar] bar is laid out.
///
/// Null if [Scaffold.bottomNavigationBar] is null. ¿ t|ÄÆ¿ uÄÉ/// The [Scaffold.floatingActionButton]'s bounding rectangle.
///
/// This is null when there is no floating action button showing.  ¿ u/Å◊¿ u@  ¿ u[¿ uc   ¿ w
Å∞¿ wâi/// Creates a copy of this [ScaffoldGeometry] but with the given fields replaced with
/// the new values. ¿ wò¿ w°  ¿ wº¿ w√   ¿ r±¿ r≤¿ xæÖ3¿ xƒ  ¿ y&V ¿ y&¿ y? ¿ y@¿ yF  ¿ yO¿ yU  ¿ yc¿ yj¿ yz¿ ys¿ yk¿ yv¿ yÄ¿ yì  ¿ yû!¿ y¶  ¿ y√¿ y‘  ¿ y·Çl¿ z   ¿ y·¿ y‚¿ |QÅû¿ |V  ¿ |h¿ |q  ¿ |å¿ |ì  ¿ |∞!¿ |π    ¿ Ä@Ö4¿ ÄF  ¿ ÄuÅ¶ ¿ Ä{¿ Äé ¿ Äï¿ Äú  ¿ Ä©¿ Ä∞  ¿ Äæ!¿ ÄÕ  ¿ ÄÂ¿ ÄÙ  ¿ Å"¿ Å  $¿ Å0¿ Å6¿ ÅR¿ ÅK¿ Å7¿ ÅN¿ Å\¿ Åb¿ Å{¿ Åw¿ Åc¿ Åz¿ ÅÖ¿ Åã¿ Å†¿ Åô¿ Åå¿ Åú¿ Å™¿ Å∞¿ Å¬¿ Åæ¿ Å±¿ Å¡¿ ÅÃ¿ Å“¿ ÅÔ¿ ÅË¿ Å”¿ ÅÎ¿ Å˘¿ Åˇ¿ Ç¿ Ç¿ Ç ¿ Ç¿ Ç ¿ Ç,  ¿ ÇC¿ ÇP  ¿ Ç`!¿ Çm  ¿ Ñ˝u¿ Ö   ¿ Ñ˝¿ Ñ˛¿ ÉƒÅ5¿ Éﬁ  ¿ É·¿ ÉÈ  ¿ Éƒ¿ É≈ ¿ Ü›ÖC¿ Ü„  ¿ áÄ„ ¿ á¿ á ¿ á%¿ á4  ¿ áC$¿ áR  ¿ ám¿ á|  ¿ áà¿ áé¿ á°¿ áö¿ áè¿ áù¿ á´¿ á±¿ á–¿ á…¿ á≤¿ áÃ¿ á⁄¿ á‡¿ áÌ¿ áÊ¿ á·¿ áÈ¿ áÛ¿ à   ¿ à¿ à  ¿ à!!¿ à,   ¿ àGÉ◊¿ àZ  ¿ à`¿ àn  ¿ àG¿ àH ¿ å"´¿ å(  ¿ å]Éñ ¿ å]¿ ål ¿ ås¿ åÇ  ¿ åê¿ åü  ¿ å≤¿ å¡  ¿ å”¿ å‚  ¿ ç2¿ ç(  ¿ çQ1¿ ç`  ¿ çà7¿ çó  ¿ ç≈0¿ ç‘  ¿ ç˚ ¿ é
  ¿ é!¿ é0  ¿ éB¿ éQ  ¿ é`$¿ éo  ¿ éä,¿ éô  *¿ éø¿ é≈¿ é◊¿ é–¿ é∆¿ é”¿ é·¿ éÁ¿ é˝¿ éˆ¿ éË¿ é˘¿ è¿ è¿ è&¿ è¿ è¿ è"¿ è0¿ è6¿ èc¿ è\¿ è7¿ è_¿ èm¿ ès¿ èü¿ èò¿ èt¿ èõ¿ è©¿ èØ¿ è¬¿ èª¿ è∞¿ èæ¿ èÃ¿ è“¿ èÒ¿ èÍ¿ è”¿ èÌ¿ è˜¿ ê  ¿ ê!¿ ê  ¿ ê5¿ êF  ¿ êS¿ êd  ¿ êv!¿ êä  ¿ êõ0¿ êª  ¿ ê–G¿ êÛ  ¿ ëF¿ ë>  ¿ ëe6¿ ër  ¿ ëüE¿ ë¬  ¿ ëÈ¿ ëÙ  ¿ í
¿ í  ¿ í*)¿ í5   ¿ íX¢\¿ íi  ¿ íw	¿ í}  ¿ íX¿ íY¿ ¥∏Ç}¿ ¥…  ¿ ¥ÿ¿ ¥È  ¿ ¥∏¿ ¥π ¿ ∑9Ñ±¿ ∏÷Åñ/// Handler for scale and rotation animations in the [FloatingActionButton].
///
/// Currently, there are two types of [FloatingActionButton] animations:
///
/// * Entrance/Exit animations, which this widget triggers
///   when the [FloatingActionButton] is added, updated, or removed.
/// * Motion animations, which are triggered by the [Scaffold]
///   when its [FloatingActionButtonLocation] is updated. ¿ πÅO ¿ π¿ π6 ¿ π=¿ πL  ¿ πV¿ πe  ¿ πz¿ πâ  ¿ πü¿ πÆ  ¿ π√¿ π“  ¿ πÎ¿ πÒ¿ ∫
¿ ∫¿ πÚ¿ ∫¿ ∫¿ ∫¿ ∫4¿ ∫-¿ ∫¿ ∫0¿ ∫>¿ ∫D¿ ∫^¿ ∫W¿ ∫E¿ ∫Z¿ ∫d¿ ∫r  ¿ ∫{(¿ ∫ì  ¿ ∫ß4¿ ∫   ¿ ∫ﬂ0¿ ∫ˇ  ¿ ªf¿ ªi8/// Controls the current child widget.child as it exits.  ¿ ªi¿ ª∞   ¿ ª¿ ªÄ ¿ ªÏöP¿ ªÚ   ¿ º˜,¿ Ω  ¿ Ω'.¿ Ω>  ¿ ΩY1¿ Ωp  ¿ æ-¿ æ  ¿ æ85¿ æO  ¿ æq0¿ æà  ¿ æ•¿ æ≠  ¿ «bÄ±¿ «Ç ¿ «ó¿ «ú¿ «£¿ «ù¿ «§¿ «Í¿ «Ø¿ «™¿ «µ¿ «±¿ «∑¿ «·¿ «ﬁ¿ «„¿ «Î¿ «Ï¿ «Ò¿ »¿ «Ú¿ «¸¿ »¿ »¿ «˝¿ »¿ »
¿ » 	¿ æ¿Çä¿ æ—   ¿ æ¿¿ æ¡¿ ¡NX¿ ¡_   ¿ ¡N¿ ¡O¿ ¡™Ö¥¿ ¡ª  ¿ ¡À)¿ ¡Ï  ¿ ¡™¿ ¡´¿ »Ü®¿ »    ¿ ŒƒÅE¿ Œ…  ¿ ŒÔ¿ œ    ¿ –ÄÇ¿ –  ¿ –2¿ –;   ¿ –ìÑö¿ –¶  ¿ –¨¿ –∫  ¿ –ì¿ –î¿ ’1ÄÄ¿ ’6    ¿ ’µÄÖ¿ ’∫  ¿ ’œ¿ ’◊    ¿ ÷>¿ dª¿ ÏÛñÆ/// Implements the basic Material Design visual layout structure.
///
/// This class provides APIs for showing drawers and bottom sheets.
///
/// To display a persistent bottom sheet, obtain the
/// [ScaffoldState] for the current [BuildContext] via [Scaffold.of] and use the
/// [ScaffoldState.showBottomSheet] function.
///
/// {@tool dartpad}
/// This example shows a [Scaffold] with a [body] and [FloatingActionButton].
/// The [body] is a [Text] placed in a [Center] in order to center the text
/// within the [Scaffold]. The [FloatingActionButton] is connected to a
/// callback that increments a counter.
///
/// ![The Scaffold has a white background with a blue AppBar at the top. A blue FloatingActionButton is positioned at the bottom right corner of the Scaffold.](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold.png)
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This example shows a [Scaffold] with a blueGrey [backgroundColor], [body]
/// and [FloatingActionButton]. The [body] is a [Text] placed in a [Center] in
/// order to center the text within the [Scaffold]. The [FloatingActionButton]
/// is connected to a callback that increments a counter.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold_background_color.png)
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.1.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This example shows a [Scaffold] with an [AppBar], a [BottomAppBar] and a
/// [FloatingActionButton]. The [body] is a [Text] placed in a [Center] in order
/// to center the text within the [Scaffold]. The [FloatingActionButton] is
/// centered and docked within the [BottomAppBar] using
/// [FloatingActionButtonLocation.centerDocked]. The [FloatingActionButton] is
/// connected to a callback that increments a counter.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold_bottom_app_bar.png)
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.2.dart **
/// {@end-tool}
///
/// ## Scaffold layout, the keyboard, and display "notches"
///
/// The scaffold will expand to fill the available space. That usually
/// means that it will occupy its entire window or device screen. When
/// the device's keyboard appears the Scaffold's ancestor [MediaQuery]
/// widget's [MediaQueryData.viewInsets] changes and the Scaffold will
/// be rebuilt. By default the scaffold's [body] is resized to make
/// room for the keyboard. To prevent the resize set
/// [resizeToAvoidBottomInset] to false. In either case the focused
/// widget will be scrolled into view if it's within a scrollable
/// container.
///
/// The [MediaQueryData.padding] value defines areas that might
/// not be completely visible, like the display "notch" on the iPhone
/// X. The scaffold's [body] is not inset by this padding value
/// although an [appBar] or [bottomNavigationBar] will typically
/// cause the body to avoid the padding. The [SafeArea]
/// widget can be used within the scaffold's body to avoid areas
/// like display notches.
///
/// ## Troubleshooting
///
/// ### Nested Scaffolds
///
/// The Scaffold is designed to be a top level container for
/// a [MaterialApp]. This means that adding a Scaffold
/// to each route on a Material app will provide the app with
/// Material's basic visual layout structure.
///
/// It is typically not necessary to nest Scaffolds. For example, in a
/// tabbed UI, where the [bottomNavigationBar] is a [TabBar]
/// and the body is a [TabBarView], you might be tempted to make each tab bar
/// view a scaffold with a differently titled AppBar. Rather, it would be
/// better to add a listener to the [TabController] that updates the
/// AppBar
///
/// {@tool snippet}
/// Add a listener to the app's tab controller so that the [AppBar] title of the
/// app's one and only scaffold is reset each time a new tab is selected.
///
/// ```dart
/// TabController(vsync: tickerProvider, length: tabCount)..addListener(() {
///   if (!tabController.indexIsChanging) {
///     setState(() {
///       // Rebuild the enclosing scaffold with a new AppBar title
///       appBarTitle = 'Tab ${tabController.index}';
///     });
///   }
/// })
/// ```
/// {@end-tool}
///
/// Although there are some use cases, like a presentation app that
/// shows embedded flutter content, where nested scaffolds are
/// appropriate, it's best to avoid nesting scaffolds.
///
/// See also:
///
///  * [AppBar], which is a horizontal bar typically shown at the top of an app
///    using the [appBar] property.
///  * [BottomAppBar], which is a horizontal bar typically shown at the bottom
///    of an app using the [bottomNavigationBar] property.
///  * [FloatingActionButton], which is a circular button typically shown in the
///    bottom right corner of the app using the [floatingActionButton] property.
///  * [Drawer], which is a vertical panel that is typically displayed to the
///    left of the body (and often hidden on phones) using the [drawer]
///    property.
///  * [BottomNavigationBar], which is a horizontal array of buttons typically
///    shown along the bottom of the app using the [bottomNavigationBar]
///    property.
///  * [BottomSheet], which is an overlay typically shown near the bottom of the
///    app. A bottom sheet can either be persistent, in which case it is shown
///    using the [ScaffoldState.showBottomSheet] method, or modal, in which case
///    it is shown using the [showModalBottomSheet] function.
///  * [ScaffoldState], which is the state associated with this widget.
///  * <https://material.io/design/layout/responsive-layout-grid.html>
///  * Cookbook: [Add a Drawer to a screen](https://flutter.dev/docs/cookbook/design/drawer) ¿ ÌÑ ¿ ÌZ¿ Ìb:/// Creates a visual scaffold for Material Design widgets.¿ Ìi	¿ Ìp  ¿ Ìx¿ Ì~  ¿ Ìâ	¿ Ìè  ¿ Ìò¿ Ìû  ¿ Ì∑!¿ ÌΩ  ¿ Ìﬁ!¿ Ì‰  ¿ Ó¿ Ó  ¿ Ó'?¿ Ó-  ¿ Ól¿ Ór  ¿ Ó}¿ ÓÉ  ¿ Óó¿ Óù  ¿ Ó´¿ Ó±  ¿ Ó»¿ ÓŒ  ¿ ÓÊ¿ ÓÏ  ¿ Ó¸¿ Ô  ¿ Ô¿ Ô  ¿ Ô9¿ Ô?  ¿ ÔR6¿ ÔX  ¿ Ôé¿ Ôî  ¿ Ô´#¿ Ô±  ¿ Ô‘¿ Ô⁄  ¿ ÔÔ¿ Ôı  ¿ '¿   ¿ :*¿ @  ¿ j¿ p  #¿ ÓH¿ Ó\¿ Ó]¿ ÔH¿ Ôq¿ ÔÇ¿ ÔÉ¿ Ô†¿ Ô…¿ 0¿ `¿ Ö¿ ã¿ õ¿ î¿ å¿ ó¿ •¿ ´¿ æ¿ ∑¿ ¨¿ ∫¿ »¿ Œ¿ Ì¿ Ê¿ œ¿ È¿ ˜¿ ˝¿ Ò¿ Ò¿ ˛¿ Ò¿ Ò#ÉÆ¿ Ù«Ét/// If true, and [bottomNavigationBar] or [persistentFooterButtons]
/// is specified, then the [body] extends to the bottom of the Scaffold,
/// instead of only extending to the top of the [bottomNavigationBar]
/// or the [persistentFooterButtons].
///
/// If true, a [MediaQuery] widget whose bottom padding matches the height
/// of the [bottomNavigationBar] will be added above the scaffold's [body].
///
/// This property is often useful when the [bottomNavigationBar] has
/// a non-rectangular shape, like [CircularNotchedRectangle], which
/// adds a [FloatingActionButton] sized notch to the top edge of the bar.
/// In this case specifying `extendBody: true` ensures that scaffold's
/// body will be visible through the bottom navigation bar's notch.
///
/// See also:
///
///  * [extendBodyBehindAppBar], which extends the height of the body
///    to the top of the scaffold. ¿ Ù÷Ç¿ ˆ“Å÷/// If true, and an [appBar] is specified, then the height of the [body] is
/// extended to include the height of the app bar and the top of the body
/// is aligned with the top of the app bar.
///
/// This is useful if the app bar's [AppBar.backgroundColor] is not
/// completely opaque.
///
/// This property is false by default. It must not be null.
///
/// See also:
///
///  * [extendBody], which extends the height of the body to the bottom
///    of the scaffold. ¿ ˆÌY¿ ˜@5/// An app bar to display at the top of the scaffold. ¿ ˜KÑ¿ ˚eÉÁ/// The primary content of the scaffold.
///
/// Displayed below the [appBar], above the bottom of the ambient
/// [MediaQuery]'s [MediaQueryData.viewInsets], and behind the
/// [floatingActionButton] and [drawer]. If [resizeToAvoidBottomInset] is
/// false then the body is not resized when the onscreen keyboard appears,
/// i.e. it is not inset by `viewInsets.bottom`.
///
/// The widget in the body of the scaffold is positioned at the top-left of
/// the available space between the app bar and the bottom of the scaffold. To
/// center this widget instead, consider putting it in a [Center] widget and
/// having that be the body. To expand this widget instead, consider
/// putting it in a [SizedBox.expand].
///
/// If you have a column of widgets that should normally fit on the screen,
/// but may overflow and would in such cases need to scroll, consider using a
/// [ListView] as the body of the scaffold. This is also a good choice for
/// the case where your body is a scrollable list. ¿ ˚nÄû¿ ˚¯u/// A button displayed floating above [body], in the bottom right corner.
///
/// Typically a [FloatingActionButton]. ¿ ¸Äˇ¿ ¸ÙÄ∏/// Responsible for determining where the [floatingActionButton] should go.
///
/// If null, the [ScaffoldState] will use the default location, [FloatingActionButtonLocation.endFloat]. ¿ ˝Å¿ ˛Äƒ/// Animator to move the [floatingActionButton] to a new [floatingActionButtonLocation].
///
/// If null, the [ScaffoldState] will use the default animator, [FloatingActionButtonAnimator.scaling]. ¿ ˛%Åæ¿ ˇÃÅÄ/// A set of buttons that are displayed at the bottom of the scaffold.
///
/// Typically this is a list of [TextButton] widgets. These buttons are
/// persistently visible, even if the [body] of the scaffold scrolls.
///
/// These widgets will be wrapped in an [OverflowBar].
///
/// The [persistentFooterButtons] are rendered above the
/// [bottomNavigationBar] but below the [body]. ¿ ˇËÄΩ¿ åÄÇ/// The alignment of the [persistentFooterButtons] inside the [OverflowBar].
///
/// Defaults to [AlignmentDirectional.centerEnd]. ¿ ™É'¿ÀÇÏ/// A panel displayed to the side of the [body], often hidden on mobile
/// devices. Swipes in from either left-to-right ([TextDirection.ltr]) or
/// right-to-left ([TextDirection.rtl])
///
/// Typically a [Drawer].
///
/// To open the drawer, use the [ScaffoldState.openDrawer] function.
///
/// To close the drawer, use either [ScaffoldState.closeDrawer], [Navigator.pop]
/// or press the escape key on the keyboard.
///
/// {@tool dartpad}
/// To disable the drawer edge swipe on mobile, set the
/// [Scaffold.drawerEnableOpenDragGesture] to false. Then, use
/// [ScaffoldState.openDrawer] to open the drawer and [Navigator.pop] to close
/// it.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.drawer.0.dart **
/// {@end-tool} ¿÷|¿CT/// Optional callback that is called when the [Scaffold.drawer] is opened or closed. ¿WÉ)¿wÇÎ/// A panel displayed to the side of the [body], often hidden on mobile
/// devices. Swipes in from right-to-left ([TextDirection.ltr]) or
/// left-to-right ([TextDirection.rtl])
///
/// Typically a [Drawer].
///
/// To open the drawer, use the [ScaffoldState.openEndDrawer] function.
///
/// To close the drawer, use either [ScaffoldState.closeEndDrawer], [Navigator.pop]
/// or press the escape key on the keyboard.
///
/// {@tool dartpad}
/// To disable the drawer edge swipe, set the
/// [Scaffold.endDrawerEnableOpenDragGesture] to false. Then, use
/// [ScaffoldState.openEndDrawer] to open the drawer and [Navigator.pop] to
/// close it.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.end_drawer.0.dart **
/// {@end-tool} ¿ÖÄÇ¿ıW/// Optional callback that is called when the [Scaffold.endDrawer] is opened or closed. ¿Å¿˛Ä‹/// The color to use for the scrim that obscures primary content while a drawer is open.
///
/// If this is null, then [DrawerThemeData.scrimColor] is used. If that
/// is also null, then it defaults to [Colors.black54]. ¿	Ä±¿	µÄé/// The color of the [Material] widget that underlies the entire Scaffold.
///
/// The theme's [ThemeData.scaffoldBackgroundColor] by default. ¿	…ÅJ¿ Å/// A bottom navigation bar to display at the bottom of the scaffold.
///
/// Snack bars slide from underneath the bottom navigation bar while bottom
/// sheets are stacked on top.
///
/// The [bottomNavigationBar] is rendered below the [persistentFooterButtons]
/// and the [body]. ¿Ü2¿?Ö⁄/// The persistent bottom sheet to display.
///
/// A persistent bottom sheet shows information that supplements the primary
/// content of the app. A persistent bottom sheet remains visible even when
/// the user interacts with other parts of the app.
///
/// A closely related widget is a modal bottom sheet, which is an alternative
/// to a menu or a dialog and prevents the user from interacting with the rest
/// of the app. Modal bottom sheets can be created and displayed with the
/// [showModalBottomSheet] function.
///
/// Unlike the persistent bottom sheet displayed by [showBottomSheet]
/// this bottom sheet is not a [LocalHistoryEntry] and cannot be dismissed
/// with the scaffold appbar's back button.
///
/// If a persistent bottom sheet created with [showBottomSheet] is already
/// visible, it must be closed before building the Scaffold with a new
/// [bottomSheet].
///
/// The value of [bottomSheet] can be any widget at all. It's unlikely to
/// actually be a [BottomSheet], which is used by the implementations of
/// [showBottomSheet] and [showModalBottomSheet]. Typically it's a widget
/// that includes [Material].
///
/// See also:
///
///  * [showBottomSheet], which displays a bottom sheet as a route that can
///    be dismissed with the scaffold's back button.
///  * [showModalBottomSheet], which displays a modal bottom sheet.
///  * [BottomSheetThemeData], which can be used to customize the default
///    bottom sheet property values when using a [BottomSheet]. ¿OÇ¿HÅ⁄/// If true the [body] and the scaffold's floating widgets should size
/// themselves to avoid the onscreen keyboard whose height is defined by the
/// ambient [MediaQuery]'s [MediaQueryData.viewInsets] `bottom` property.
///
/// For example, if there is an onscreen keyboard displayed above the
/// scaffold, the body can be resized to avoid overlapping the keyboard, which
/// prevents widgets inside the body from being obscured by the keyboard.
///
/// Defaults to true. ¿eÅb¿¿ÅA/// Whether this scaffold is being displayed at the top of the screen.
///
/// If true then the height of the [appBar] will be extended by the height
/// of the screen's status bar, i.e. the top padding for [MediaQuery].
///
/// The default value of this property, like the default value of
/// [AppBar.primary], is true. ¿Ãr¿'@/// {@macro flutter.material.DrawerController.dragStartBehavior} ¿CÇ¿6Å“/// The width of the area within which a horizontal swipe will open the
/// drawer.
///
/// By default, the value used is 20.0 added to the padding edge of
/// `MediaQuery.of(context).padding` that corresponds to the surrounding
/// [TextDirection]. This ensures that the drag area for notched devices is
/// not obscured. For example, if `TextDirection.of(context)` is set to
/// [TextDirection.ltr], 20.0 will be added to
/// `MediaQuery.of(context).padding.left`. ¿NÅ¿4ÄŒ/// Determines if the [Scaffold.drawer] can be opened with a drag
/// gesture on mobile.
///
/// On desktop platforms, the drawer is not draggable.
///
/// By default, the drag gesture is enabled on mobile. ¿TÅ¿8ÄÃ/// Determines if the [Scaffold.endDrawer] can be opened with a
/// gesture on mobile.
///
/// On desktop platforms, the drawer is not draggable.
///
/// By default, the drag gesture is enabled on mobile. ¿[Ç¿RÅ–/// Restoration ID to save and restore the state of the [Scaffold].
///
/// If it is non-null, the scaffold will persist and restore whether the
/// [drawer] and [endDrawer] was open or closed.
///
/// The state of this widget is persisted in a [RestorationBucket] claimed
/// from the surrounding [RestorationScope] using the provided restoration ID.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.  ¿dé¿"—á/// Finds the [ScaffoldState] from the closest instance of this class that
/// encloses the given context.
///
/// If no instance of this class encloses the given context, will cause an
/// assert in debug mode, and throw an exception in release mode.
///
/// This method can be expensive (it walks the element tree).
///
/// {@tool dartpad}
/// Typical usage of the [Scaffold.of] function is to call it from within the
/// `build` method of a child of a [Scaffold].
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.of.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// When the [Scaffold] is actually created in the same `build` function, the
/// `context` argument to the `build` function can't be used to find the
/// [Scaffold] (since it's "above" the widget being returned in the widget
/// tree). In such cases, the following technique with a [Builder] can be used
/// to provide a new scope with a [BuildContext] that is "under" the
/// [Scaffold]:
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.of.1.dart **
/// {@end-tool}
///
/// A more efficient solution is to split your build function into several
/// widgets. This introduces a new context from which you can obtain the
/// [Scaffold]. In this solution, you would have an outer widget that creates
/// the [Scaffold] populated by instances of your new inner widgets, and then
/// in these inner widgets you would use [Scaffold.of].
///
/// A less elegant but more expedient solution is assign a [GlobalKey] to the
/// [Scaffold], then use the `key.currentState` property to obtain the
/// [ScaffoldState] rather than using the [Scaffold.of] function.
///
/// If there is no [Scaffold] in scope, then this will throw an exception.
/// To return null if there is no [Scaffold], use [maybeOf] instead. ¿"‘¿"‚   ¿)ÇØ¿+±Ç/// Finds the [ScaffoldState] from the closest instance of this class that
/// encloses the given context.
///
/// If no instance of this class encloses the given context, will return null.
/// To throw an exception instead, use [of] instead of this function.
///
/// This method can be expensive (it walks the element tree).
///
/// See also:
///
///  * [of], a similar function to this one that throws if no instance
///    encloses the given context. Also includes some sample code in its
///    documentation. ¿+π¿+«   ¿,2â¸¿0|É¯/// Returns a [ValueListenable] for the [ScaffoldGeometry] for the closest
/// [Scaffold] ancestor of the given context.
///
/// The [ValueListenable.value] is only available at paint time.
///
/// Notifications are guaranteed to be sent before the first paint pass
/// with the new geometry, but there is no guarantee whether a build or
/// layout passes are going to happen between the notification and the next
/// paint pass.
///
/// The closest [Scaffold] ancestor for the context might change, e.g when
/// an element is moved from one scaffold to another. For [StatefulWidget]s
/// using this listenable, a change of the [Scaffold] ancestor will
/// trigger a [State.didChangeDependencies].
///
/// A typical pattern for listening to the scaffold geometry would be to
/// call [Scaffold.geometryOf] in [State.didChangeDependencies], compare the
/// return value with the previous listenable, if it has changed, unregister
/// the listener, and register a listener to the new [ScaffoldGeometry]
/// listenable. ¿0á¿0ï   ¿62ÑÜ¿8ÊÇâ/// Whether the Scaffold that most tightly encloses the given context has a
/// drawer.
///
/// If this is being used during a build (for example to decide whether to
/// show an "open drawer" button), set the `registerForUpdates` argument to
/// true. This will then set up an [InheritedWidget] relationship with the
/// [Scaffold] so that the client widget gets rebuilt whenever the [hasDrawer]
/// value changes.
///
/// This method can be expensive (it walks the element tree).
///
/// See also:
///
///  * [Scaffold.of], which provides access to the [ScaffoldState] object as a
///    whole, from which you can show bottom sheets, and so forth. ¿8¿8˛  ¿9¿9  ¿9"¿:º;¿:÷   ¿:º¿:Ω ¿:˚¿ ãÒ¿;ïÄì/// State for a [Scaffold].
///
/// Can display [BottomSheet]s. Retrieve a [ScaffoldState] from the current
/// [BuildContext] using [Scaffold.of].  ¿=V¿=> ¿=K¿=T¿=j¿=U¿=k¿=l¿=qY¿=ò ¿=®¿=±¿=«¿=≤¿=»¿=…¿=œ&¿=ﬂ ¿=Í¿=Û¿=Ù¿?‚¿?Í  ¿@±:¿@∆ ¿@÷¿@‰¿@Í¿@Â¿@Ô=¿A ¿A¿A%¿A+¿A&¿Jß*¿Jø  ¿JËM¿K#  ¿Mô_¿M‡  ¿PºR¿P› ¿Q¿Q¿Pˆ¿Q¿P˜¿Q=¿Q<  ¿QS4¿Qc ¿Q|¿QÖ¿QÜ¿{:<¿{S  ¿{z?¿{ú  ¿{ΩC¿{€  ¿|;¿|"  ¿|DB¿|]  ¿ÜÙ0¿á  ¿†<¿†A ¿†R¿†[$¿†a ¿†s¿†y¿†z¿;Ô>¿<   ¿;Ô¿;¿=˙j¿>A;/// Whether this scaffold has a non-null [Scaffold.appBar].   ¿>gj¿>Æ;/// Whether this scaffold has a non-null [Scaffold.drawer].   ¿>‘s¿?>/// Whether this scaffold has a non-null [Scaffold.endDrawer].   ¿?JÄî¿?üI/// Whether this scaffold has a non-null [Scaffold.floatingActionButton].   ¿?˛Ä∞¿@äy/// The max height the [Scaffold.appBar] uses.
///
/// This is based on the appBar preferred height plus the top padding.   ¿A1ÄŸ¿AÊÄü/// Whether the [Scaffold.drawer] is opened.
///
/// See also:
///
///  * [ScaffoldState.openDrawer], which opens the [Scaffold.drawer] of a
///    [Scaffold].   ¿BÄË¿BÃÄ®/// Whether the [Scaffold.endDrawer] is opened.
///
/// See also:
///
///  * [ScaffoldState.openEndDrawer], which opens the [Scaffold.endDrawer] of
///    a [Scaffold].   ¿|ãÄÀ¿|˛c/// Gets the current value of the visibility animation for the
/// [Scaffold.floatingActionButton].   ¿}ZÅÆ¿}‰ÄÅ/// Sets the current value of the visibility animation for the
/// [Scaffold.floatingActionButton].  This value must not be null. ¿~	¿~   ¿á)\¿á2    ¿<1Ä—¿<B  ¿<O¿<c  ¿<m¿<s  ¿<1¿<2¿B˙Ä‘¿Bˇ  ¿C¿C   ¿C“Ä‡¿C◊  ¿C¿Cˆ   ¿D∂Çœ¿F’Åˇ/// Opens the [Drawer] (if any).
///
/// If the scaffold has a non-null [Scaffold.drawer], this function will cause
/// the drawer to begin its entrance animation.
///
/// Normally this is not needed since the [Scaffold] automatically shows an
/// appropriate [IconButton], and handles the edge-swipe gesture, to show the
/// drawer.
///
/// To close the drawer, use either [ScaffoldState.closeEndDrawer] or
/// [Navigator.pop].
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿GâÇ·¿IΩÇ/// Opens the end side [Drawer] (if any).
///
/// If the scaffold has a non-null [Scaffold.endDrawer], this function will cause
/// the end side drawer to begin its entrance animation.
///
/// Normally this is not needed since the [Scaffold] automatically shows an
/// appropriate [IconButton], and handles the edge-swipe gesture, to show the
/// drawer.
///
/// To close the drawer, use either [ScaffoldState.closeEndDrawer] or
/// [Navigator.pop].
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿KáÅf¿Kå    ¿NPÅ¢¿NU    ¿Qåâ‘¿Që    ¿[dÅg¿[i    ¿\œÄ˘¿]eÄä/// Closes [Scaffold.drawer] if it is currently opened.
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿]ÃÅ¿^eÄç/// Closes [Scaffold.endDrawer] if it is currently opened.
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿^€c¿^‡    ¿_Bç¿_e ¿_w¿_w
¿_¿_é  ¿_ö¿_†  ¿_≥0¿_—  ¿_È¿_Ò  ¿`¿`  ¿`¿`*  ¿`4¿`;  ¿`L¿`]  ¿`m¿`t  ¿`É,¿`â  ¿`´¿ldé≤¿uŒàË/// Shows a Material Design bottom sheet in the nearest [Scaffold]. To show
/// a persistent bottom sheet, use the [Scaffold.bottomSheet].
///
/// Returns a controller that can be used to close and otherwise manipulate the
/// bottom sheet.
///
/// To rebuild the bottom sheet (e.g. if it is stateful), call
/// [PersistentBottomSheetController.setState] on the controller returned by
/// this method.
///
/// The new bottom sheet becomes a [LocalHistoryEntry] for the enclosing
/// [ModalRoute] and a back button is added to the app bar of the [Scaffold]
/// that closes the bottom sheet.
///
/// The [transitionAnimationController] controls the bottom sheet's entrance and
/// exit animations. It's up to the owner of the controller to call
/// [AnimationController.dispose] when the controller is no longer needed.
///
/// To create a persistent bottom sheet that is not a [LocalHistoryEntry] and
/// does not add a back button to the enclosing Scaffold's app bar, use the
/// [Scaffold.bottomSheet] constructor parameter.
///
/// A persistent bottom sheet shows information that supplements the primary
/// content of the app. A persistent bottom sheet remains visible even when
/// the user interacts with other parts of the app.
///
/// A closely related widget is a modal bottom sheet, which is an alternative
/// to a menu or a dialog and prevents the user from interacting with the rest
/// of the app. Modal bottom sheets can be created and displayed with the
/// [showModalBottomSheet] function.
///
/// {@tool dartpad}
/// This example demonstrates how to use `showBottomSheet` to display a
/// bottom sheet when a user taps a button. It also demonstrates how to
/// close a bottom sheet using the Navigator.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_state.show_bottom_sheet.0.dart **
/// {@end-tool}
/// See also:
///
///  * [BottomSheet], which becomes the parent of the widget returned by the
///    `builder`.
///  * [showBottomSheet], which calls this method given a [BuildContext].
///  * [showModalBottomSheet], which can be used to display a modal bottom
///    sheet.
///  * [Scaffold.of], for information about how to obtain the [ScaffoldState].
///  * <https://material.io/design/components/sheets-bottom.html#standard-bottom-sheet>¿uﬁ¿uﬁ¿uÊ¿uı  ¿v¿v  ¿v¿v(  ¿v6¿vD  ¿vN¿vU  ¿vf¿vw  ¿vá¿vé  ¿vù2¿v≥   ¿Äü¿J./// Shows the [Scaffold.floatingActionButton].   ¿ÄÑx¿Ä  ¿Ä .¿ÄD   ¿ÖvÅj¿Ö{    ¿áâÇÂ¿áö   ¿áâ¿áä¿ärÜR¿äÉ  ¿äì¿äù  ¿är¿äs¿ê»É¿êŸ   ¿ê»¿ê…¿ì◊ÄÌ¿ìË   ¿ì◊¿ìÿ¿î»ÉÁ¿îÕ  	¿î‡¿î  ¿î˝¿ï  ¿ï¿ï  ¿ï&¿ï5  ¿ïK¿ïZ  ¿ïo ¿ï~  ¿ïï!¿ï§  ¿ïº¿ï¬  ¿ï‡&¿ïÊ  ¿ï’¿ñ¿ò≥ÉÕ¿ò∏  ¿ò»¿òÿ  ¿ò·¿ò   ¿úÑÉ¥¿úâ  ¿úñ¿ú¶  ¿úØ¿úæ   ¿†ÑÅô¿°s/// Whether to show a [ModalBarrier] over the body of the scaffold.
///
/// The `value` parameter must not be null. ¿°
¿°  ¿°¿°%   ¿¢!§…¿¢4  ¿¢:¿¢H  ¿¢!¿¢" ¿∆ÓÅì¿∆Ù  ¿«## ¿«#¿«7 ¿«8¿«>   ¿«J¿«]   ¿«iÄå¿«z  ¿«Ñ¿«ì  ¿«i¿«j¿«˘ÄÜ¿»
  ¿»¿»   ¿«˘¿«˙ ¿»ÉÇ‡¿…2Ä®/// An interface for controlling a feature of a [Scaffold].
///
/// Commonly obtained from [ScaffoldMessengerState.showSnackBar] or
/// [ScaffoldState.showBottomSheet].¿…L¿…L¿…^¿…^¿…e\¿…Ñ¿…Ö¿…Ü ¿…á¿…ç  ¿…ï¿…õ  ¿…¶
¿…¨  ¿…≤¿…∏   ¿…ƒ¿…Ã  ¿…◊¿…Í  ¿ xx¿ Î]/// Remove the feature (e.g., bottom sheet, snack bar, or material banner) from the scaffold. ¿ ık¿ÀXM/// Mark the feature (e.g., bottom sheet or snack bar) as needing to rebuild. ¿…˘{¿ XN/// Completes when the feature controlled by this object is no longer visible.     ¿Ãáë¿œíÉä/// A curve that progresses linearly until a specified [startingPoint], at which
/// point [curve] will begin. Unlike [Interval], [curve] will not start at zero,
/// but will use [startingPoint] as the Y position.
///
/// For example, if [startingPoint] is set to `0.5`, and [curve] is set to
/// [Curves.easeOut], then the bottom-left quarter of the curve will be a
/// straight line, and the top-right quarter will contain the entire contents of
/// [Curves.easeOut].
///
/// This is useful in situations where a widget must track the user's finger
/// (which requires a linear animation), and afterwards can be flung using a
/// curve specified with the [curve] argument, after the finger is released. In
/// such a case, the value of [startingPoint] would be the progress of the
/// animation at the time when the finger was released.
///
/// The [startingPoint] and [curve] arguments must not be null. ¿œ—Ä— ¿œ¯¿–/// Creates a suspended curve.¿–¿–   ¿–8 ¿–>  ¿–E¿–K¿–L¿–e¿–k¿–Å¿–z¿–l¿–}¿–å¿–í¿–†¿–ô¿–ì¿–ú¿–¶ÄÜ¿—e/// The progress value at which [curve] should begin.
///
/// This defaults to [Curves.easeOutCubic]. ¿—1I¿—u5/// The curve to use when [startingPoint] is reached.  ¿—Å™¿—í  ¿—ú¿—§  ¿—¿—Ä¿”-c¿”@   ¿”-¿”. ¿”îÉª¿”ö  ¿” Åi ¿”–¿”‰ ¿”Î	¿”Ú  ¿”˙!¿‘	  ¿‘!¿‘'  ¿‘=¿‘L  ¿‘Z¿‘i  ¿‘y¿‘à  ¿‘î¿‘ö  ¿‘≥¿‘π  ¿‘Õ¿‘”  ¿‘·
¿‘Á  ¿‘Ò¿‘˜  ¿’¿’  ¿’¿’$  ¿‘3¿‘®¿’7-¿’Q  ¿’©¿’¥  ¿’¬¿’÷  ¿’„¿’˜  ¿÷¿÷  ¿÷'¿÷;  ¿÷F¿÷Q  ¿÷a¿÷n  ¿÷Å¿÷è  ¿÷ú¿÷Ø  ¿÷∏¿÷ƒ  ¿÷‘!¿÷Í   ¿÷˙S¿◊    ¿÷˙¿÷˚ ¿◊Qç®¿◊W   ¿◊ôB¿◊± ¿◊¬ 	¿◊‡ÅQ¿◊Ò   ¿◊‡¿◊·¿Ÿ5S¿ŸF   ¿Ÿ5¿Ÿ6¿ŸåÄµ¿Ÿù  ¿Ÿ≠¿Ÿ√  ¿Ÿå¿Ÿç¿⁄EÄä¿⁄J    ¿⁄”Äû¿⁄ÿ  ¿⁄È¿⁄˚   ¿€uÅ¿€z  ¿€â¿€ô  ¿€£¿€™   ¿‹îÄç¿‹ô  ¿‹≠¿‹æ   ¿›%Éj¿›*  ¿›8,¿›Y   ¿‡ìÑc¿‡¶  ¿‡¨¿‡∫  ¿‡ì¿‡î ¿‰˚Çz¿Ê=Å;/// A [ScaffoldFeatureController] for standard bottom sheets.
///
/// This is the type of objects returned by [ScaffoldState.showBottomSheet].
///
/// This controller is used to display both standard and persistent bottom
/// sheets. A bottom sheet is only persistent if it is set as the
/// [Scaffold.bottomSheet].¿Ê]¿Ê]¿ÊüÄ∞¿Êƒ¿Ê≈¿Ê∆ ¿ÊÃ¿Ê”  ¿Êﬁ¿ÊÂ  ¿ÊÛ¿Ê˙  ¿Á¿Á  ¿Á$¿Á*  ¿ÁE¿ÁJ¿ÁK¿ÁL¿ÁM¿ÁS¿Á^     ¿ÁwÅá¿Á}  ¿Á®Äì ¿ÁÆ¿Áº ¿Á√¿Á“  ¿Á‡¿ÁÔ  ¿Ë¿Ë  ¿Ë!¿Ë'¿Ë9¿Ë2¿Ë(¿Ë5¿Ë?¿ËJ  ¿ËW0¿Ëw   ¿Ëåp¿Ëù  ¿Ë∞¿Ë¿  ¿Ëå¿Ëç  Ü5Ä…Ü:   ÜLÜL  ÜTÜT  Ü^	Ü^  ÜkÜk  ÜzÜz  ÜÜÜÜ  ÜòÜò  Ü¨Ü¨  Ü√Ü√  Ü€Ü€  ÜÂ	ÜÂ  ÜÚ	ÜÚ           ÑpÑ4 Ñ\ÑxÑyÑÉoÑ¶ ÑŒÑÍÑÎÑı6Ö ÖÖù3Ö™ ÖÕÖ“/Öﬂ Ö˛Ü/Ü Ü/  åô <ÄÜÄ§Ä•Ä∫Ä‘ÄÅÅÅ=Å|Å£Å§ÅªÅ—ÅÌÇ	ÇÇ5ÇJÇaÇwÇôÇøÇÓÉÉÉ>ÉSÉTÉlÉëÉ∑É”ÉÈÑÑÑÉÑÙÑıÖ-ÖyÖùÖ“ÜÜ4Ü5ÜJÜRÜ\ÜiÜxÜÑÜñÜ™Ü¡ÜŸÜ„ÜÜ˝Üˇá áJáNáëáïáÂàààhà≤à„ââ"âjâªääYä|äÄäîä„äÁã:ãJãNã\ã`ãÆãˇåQå•åÛççxç©çıéé é9éWéXéàéééøé’é÷è&è5è;èQèùèﬁè‰ê<êNêTêßê˘ëEëèëƒë ë‡í0í}íƒìì[ìÄìÜìﬁììˆîBî|îÇîíîòîËï'ïwï§ïﬂï¸ñ1ñ2ñ§ñŒñ“ñ”ó#ó:ó@óìóôó©óØó¯òGòàò•ò¶ôôCôGôHôTôòôöôõô¿ôƒöö\ößöÚõ õõ7õïõÁúüú—ùkùóù∞ùœù–ù‹ù˝û;ûãû’ü%üKütü†ü¬üÍ†+†1†n†ë†ï†ñ†¡†ﬂ†‡†˝° °D°L°M°v°†°®°Æ°≤°≥°‡¢¢I¢^¢b¢c¢¢∂¢’¢˘£#£+£1£5£6£Ü£Œ£˜§T§è§ì§î§¶§ß§„§È•8•Ö•‘•‚•Ë¶9¶?¶ê¶–ßßNßTßùßΩß√ßŸ®*®0®ö®¨©
©©3©Ç©Ø©∂™™;™Y™â™Ø™µ´´R´°´Ò¨¨^¨á¨î¨∆¨Á¨Ú≠K≠R≠\≠p≠ò≠¢≠º≠÷≠ÈÆÆ`Æ≤Æ˚ØSØsØ¬∞∞O∞`∞y∞Õ±#±h±ø≤≤T≤e≤ì≤‚≤Û≥≥9≥E≥O≥d≥p≥≥Ö≥Ü≥ù≥°≥¢≥‡≥ˆ¥¥C¥Y¥}¥â¥•¥ ¥Ù¥˛µµ3µIµsµƒµ–µÏµ˚∂∂.∂R∂a∂g∂k∂l∂∂∂…∂œ∑ ∑n∑Ã∑Ë∏∏∏∏m∏è∏±∏∑∏’∏π*πPπTπUπ†π¶πÏ∫F∫b∫º∫ ∫–ª#ªEªmªèªúª€ªÙºº@ºJºTºZºxºìºóºòº·Ω"Ω<ΩñΩ§Ω™ææ*æOæjænæoæàæâæÀæ—ø&øø‘ø‚øË¿ @E¿ @Ö¿ @⁄¿ A¿ A¿ A^¿ A~¿ AÑ¿ Aö¿ AÒ¿ A˜¿ Bg¿ By¿ Bı¿ C¿ C¿ Cs¿ C†¿ Cß¿ Cˇ¿ D>¿ Db¿ Dò¿ Dƒ¿ D ¿ E%¿ E¿ E’¿ F%¿ FD¿ Fû¿ FÕ¿ F‹¿ G¿ G7¿ G@¿ Gü¿ G¶¿ G∏¿ G‰¿ GÏ¿ H¿ H¿ H¿ H ¿ Hd¿ Hz¿ H†¿ HÕ¿ H„¿ I¿ I¿ I5¿ I`¿ Iê¿ Iö¿ I©¿ Iœ¿ IÎ¿ I˙¿ J¿ J-¿ JQ¿ J`¿ Jf¿ Jj¿ Jk¿ Jª¿ JŒ¿ J‘¿ K+¿ K¿ KÔ¿ L¿ L/¿ L=¿ LC¿ L¢¿ Lƒ¿ LÊ¿ LÏ¿ LÌ¿ M'¿ MS¿ MW¿ MX¿ M©¿ MØ¿ Mı¿ Na¿ N}¿ N„¿ NÒ¿ N˜¿ OV¿ Ox¿ O¶¿ O»¿ O’¿ P¿ P3¿ PY¿ P¿ Pâ¿ Pì¿ Pô¿ Pù¿ Pû¿ PÔ¿ Q8¿ QX¿ Qæ¿ QÃ¿ Q“¿ RR¿ Rp¿ R°¿ R¬¿ R∆¿ R«¿ R”¿ R˙¿ S(¿ Sf¿ S£¿ S§¿ S≈¿ T¿ T4¿ T~¿ Tº¿ Tı¿ U	¿ UQ¿ Uõ¿ U™¿ UÔ¿ V5¿ VÉ¿ Vô¿ Vß¿ VÓ¿ V¸¿ W¿ W¿ W¿ W¿ W9¿ W]¿ Wx¿ W¿ WÉ¿ WÑ¿ Wê¿ W£¿ W«¿ WÂ¿ X ¿ X¿ X¿ X¿ X¿ XT¿ Xv¿ Xê¿ XÃ¿ Y¿ Y¿ Y>¿ Y?¿ YK¿ YΩ¿ Yø¿ Y¿¿ Z¿ Z4¿ Z8¿ Zr¿ Z∫¿ Zˆ¿ Z˙¿ [:¿ [o¿ [z¿ [ú¿ [Ì¿ \5¿ \Y¿ \|¿ \ù¿ \ª¿ \Á¿ ]¿ ]&¿ ]F¿ ]f¿ ]å¿ ]≠¿ ]≥¿ ]¥¿ ]È¿ ]Ô¿ ^;¿ ^b¿ ^c¿ ^ó¿ ^ù¿ ^ﬂ¿ ^ˇ¿ _¿ _¿ _f¿ _}¿ _É¿ _»¿ `¿ ``¿ `w¿ `}¿ `Õ¿ a¿ aj¿ aÑ¿ a¢¿ a£¿ aÍ¿ b¿ b¿ bL¿ bì¿ b¡¿ b«¿ c¿ cd¿ c¥¿ c»¿ c„¿ c‰¿ d,¿ dE¿ dK¿ dï¿ d∏¿ e¿ e9¿ e?¿ e}¿ e≥¿ e—¿ e“¿ f¿ f8¿ f>¿ fç¿ f€¿ g'¿ gw¿ gö¿ gΩ¿ gæ¿ gË¿ gÓ¿ h=¿ hâ¿ hæ¿ hƒ¿ i¿ i_¿ iØ¿ iÿ¿ iﬁ¿ j-¿ jP¿ jk¿ jl¿ jù¿ j£¿ jÚ¿ k¿ k¿ kE¿ kK¿ k†¿ k¡¿ k¬¿ l ¿ l%¿ l'¿ l(¿ lt¿ lx¿ l¡¿ m"¿ m-¿ my¿ mz¿ m÷¿ m◊¿ n¿ n-¿ n\¿ nu¿ nv¿ nÇ¿ n√¿ n‚¿ o¿ o>¿ oX¿ o_¿ oc¿ od¿ op¿ oÜ¿ p ¿ p¿ p¿ p¿ pT¿ pX¿ pö¿ p…¿ pÕ¿ q¿ ql¿ qp¿ qº¿ q˛¿ r¿ r¿ rl¿ r±¿ rº¿ r’¿ s¿ s4¿ sU¿ sx¿ s~¿ s¿ s»¿ t¿ t¿ tQ¿ ty¿ tz¿ t∫¿ t¿¿ u¿ u,¿ u-¿ uq¿ uè¿ u¢¿ u®¿ u©¿ u«¿ uÊ¿ v¿ v'¿ v-¿ v.¿ vW¿ vã¿ v´¿ væ¿ v∆¿ w¿ w¿ w¿ w`¿ wv¿ wî¿ w∏¿ w‹¿ w„¿ x ¿ xU¿ x∞¿ x∑¿ xª¿ xΩ¿ xæ¿ y$¿ y]¿ y}¿ y~¿ yú¿ y¡¿ yﬁ¿ yﬂ¿ yÎ¿ z
¿ z¿ z_¿ z©¿ z≈¿ {¿ {o¿ {Œ¿ {Ÿ¿ {·¿ {Ù¿ {˛¿ |J¿ |N¿ |O¿ |d¿ |à¿ |¨¿ |”¿ |⁄¿ }<¿ }^¿ }î¿ }Œ¿ }’¿ }Ï¿ }¿ }Ú¿ }Û¿ ~?¿ ~ë¿ ~î¿ ~ﬂ¿ 2¿ Å¿ œ¿ Ä¿ Ä@¿ Äs¿ Äë¿ Ä•¿ Ä∫¿ Ä·¿ Å¿ Å)¿ ÅU¿ Å~¿ Å£¿ Å≈¿ ÅÚ¿ Ç¿ Ç¿ ÇA¿ Ç^¿ ÇÉ¿ ÇÑ¿ Ç’¿ É&¿ Éy¿ É¬¿ ÉŒ¿ ÉÒ¿ Ñ¿ Ñ¿ Ñ%¿ ÑM¿ Ñã¿ Ñ«¿ Ñˆ¿ Ñ˙¿ Ñ˚¿ Ö¿ Ös¿ Öu¿ Öv¿ ÖÀ¿ Ü¿ Ü6¿ Ü9¿ Üé¿ Ü›¿ á
¿ á!¿ á?¿ ái¿ áÅ¿ á§¿ á”¿ á¿ áÒ¿ à¿ à¿ àD¿ àE¿ àQ¿ àx¿ à™¿ àΩ¿ à√¿ àƒ¿ àﬁ¿ â"¿ âz¿ âπ¿ â∫¿ â„¿ ä5¿ äY¿ äZ¿ äå¿ ä∂¿ ã	¿ ã*¿ ã+¿ ãF¿ ãh¿ ãó¿ ãØ¿ ãÕ¿ ã‹¿ ãÈ¿ å ¿ å¿ å¿ å¿ å¿ å!¿ å"¿ å[¿ åo¿ åå¿ åÆ¿ åœ¿ åÛ¿ ç¿ çM¿ çÑ¿ ç¡¿ ç˜¿ é¿ é>¿ é\¿ éÜ¿ é∏¿ é⁄¿ è ¿ è)¿ èf¿ è¢¿ è≈¿ èÙ¿ èı¿ ê¿ ê3¿ êQ¿ êt¿ êô¿ êÕ¿ êŒ¿ ë¿ ëc¿ ëù¿ ëÊ¿ ëÁ¿ í¿ í'¿ í(¿ íU¿ íV¿ íb¿ íÑ¿ íÃ¿ íÕ¿ ì¿ ìj¿ ì∫¿ ìˆ¿ ì˜¿ îT¿ î{¿ îò¿ îæ¿ î›¿ îﬁ¿ ï¿ ï]¿ ïù¿ ï’¿ ï€¿ ï‹¿ ñ ¿ ñ7¿ ñ≥¿ ñÎ¿ ó7¿ óî¿ óö¿ óõ¿ óœ¿ ò¿ ò?¿ òå¿ òï¿ ô¿ ô=¿ ô¨¿ ô≤¿ ô≥¿ ô‹¿ ö¿ öj¿ ö∏¿ öπ¿ öÏ¿ õ¿ õJ¿ õR¿ õX¿ õY¿ õß¿ õÎ¿ ú¿ úw¿ úx¿ ú†¿ úË¿ úÈ¿ ù¿ ù/¿ ùë¿ ùÍ¿ ùÚ¿ ùÛ¿ û5¿ ûf¿ ûà¿ û¡¿ ü¿ ü*¿ ü3¿ ük¿ ü≠¿ ü≥¿ ü¥¿ †¿ †U¿ †ú¿ †Ê¿ †Ì¿ °B¿ °Ö¿ °”¿ ¢ ¿ ¢p¿ ¢ó¿ ¢ò¿ ¢æ¿ ¢·¿ £¿ £W¿ £à¿ £™¿ £≥¿ £¸¿ §7¿ §=¿ §>¿ §Ñ¿ §∞¿ §Û¿ •C¿ •I¿ •J¿ •y¿ •Ω¿ •Ó¿ ¶,¿ ¶5¿ ¶ç¿ ß¿ ß¿ ß ¿ ßH¿ ßÄ¿ ßﬁ¿ ßﬂ¿ ®-¿ ®Q¿ ®§¿ ®Œ¿ ®Ù¿ ©>¿ ©°¿ ©√¿ ©Ó¿ ™¿ ™(¿ ™L¿ ™|¿ ™¢¿ ™ ¿ ™”¿ ´9¿ ´°¿ ´Ó¿ ¨¿ ¨/¿ ¨l¿ ¨u¿ ¨π¿ ¨Ô¿ ¨ı¿ ¨ˆ¿ ≠"¿ ≠z¿ ≠°¿ ≠≈¿ ≠Á¿ Æ+¿ Æ6¿ Æ>¿ Æ?¿ Æg¿ Æµ¿ ÆÒ¿ Ø ¿ ØD¿ Øî¿ ØÂ¿ ∞1¿ ∞F¿ ∞í¿ ∞√¿ ∞¯¿ ±¿ ±¿ ±¿ ±s¿ ±‹¿ ±‚¿ ±„¿ ≤¿ ≤q¿ ≤¨¿ ≤≤¿ ≤≥¿ ≤›¿ ≥"¿ ≥Z¿ ≥`¿ ≥a¿ ≥é¿ ≥÷¿ ¥¿ ¥¿ ¥¿ ¥:¿ ¥p¿ ¥™¿ ¥±¿ ¥µ¿ ¥∂¿ ¥¬¿ ¥˜¿ µ%¿ µ[¿ µè¿ µ˚¿ ∂]¿ ∂Ω¿ ∂Î¿ ∑2¿ ∑6¿ ∑8¿ ∑9¿ ∑Ü¿ ∑ä¿ ∑”¿ ∑◊¿ ∏¿ ∏W¿ ∏ñ¿ ∏–¿ π¿ π9¿ πR¿ πv¿ πõ¿ πø¿ π‰¿ ∫¿ ∫7¿ ∫a¿ ∫b¿ ∫y¿ ∫•¿ ∫›¿ ª¿ ª¿ ªM¿ ª|¿ ª}¿ ªâ¿ ªÈ¿ ªÎ¿ ªÏ¿ ºf¿ º¿¿ ºı¿ Ω%¿ ΩW¿ Ωå¿ æ¿ æ6¿ æo¿ æ£¿ æΩ¿ ææ¿ æ ¿ æﬂ¿ æˆ¿ æ˜¿ ø&¿ øR¿ øe¿ ø¶¿ øø¿ ø¿¿ ø‡¿ ¿3¿ ¿M¿ ¿y¿ ¿Ü¿ ¿–¿ ¡ ¿ ¡A¿ ¡G¿ ¡K¿ ¡L¿ ¡X¿ ¡k¿ ¡é¿ ¡£¿ ¡ß¿ ¡®¿ ¡¥¿ ¡¯¿ ¬¿ ¬W¿ ¬ç¿ ¬Ê¿ ¬Ù¿ ¬˙¿ √v¿ √√¿ √ﬁ¿ √‰¿ ƒ'¿ ƒi¿ ƒ•¿ ƒÙ¿ ≈/¿ ≈N¿ ≈r¿ ≈†¿ ≈™¿ ≈π¿ ∆¿ ∆V¿ ∆°¿ ∆À¿ ∆Á¿ «¿ «¿ «M¿ «U¿ «[¿ «_¿ «`¿ «¶¿ «⁄¿ «Ë¿ »¿ »¿ »3¿ »d¿ »¨¿ »œ¿ »Î¿ »Ú¿ …[¿ …r¿ …ó¿ …µ¿ …æ¿ …≈¿ …∆¿  ¿  9¿  U¿  \¿  œ¿  –¿ À¿ ÀÑ¿ Ã¿ Ã	¿ Ã*¿ Ãé¿ ÃÙ¿ Õd¿ Õe¿ Õ”¿ ŒC¿ ŒD¿ ŒÄ¿ ŒΩ¿ Œ¡¿ Œ¬¿ œ	¿ œ¿ œL¿ œö¿ œæ¿ œÏ¿ œˆ¿ œ˛¿ –¿ –
¿ –¿ –D¿ –n¿ –å¿ –ê¿ –ë¿ –ù¿ –ƒ¿ –÷¿ –˛¿ —¿ —]¿ —ú¿ —∏¿ —Ë¿ “¿ “¿ “*¿ “G¿ “u¿ “û¿ “—¿ “¯¿ ”	¿ ”¿ ”S¿ ”n¿ ”°¿ ”ƒ¿ ”Û¿ ‘¿ ‘%¿ ‘1¿ ‘>¿ ‘Y¿ ‘Ñ¿ ‘´¿ ‘€¿ ‘˛¿ ’¿ ’¿ ’#¿ ’*¿ ’.¿ ’/¿ ’M¿ ’Æ¿ ’≤¿ ’≥¿ ’ﬂ¿ ÷¿ ÷0¿ ÷7¿ ÷;¿ ÷=¿ ÷>¿ ÷Ä¿ ÷Ñ¿ ÷»¿ ÷Ã¿ ◊¿ ◊R¿ ◊Ä¿ ◊Ñ¿ ◊ò¿ ◊Ê¿ ÿ2¿ ÿz¿ ÿ¢¿ ÿ¶¿ Ÿí¿ Ÿñ¿ Ÿﬂ¿ ŸÔ¿ ŸÛ¿ ⁄¿ ⁄U¿ ⁄§¿ ⁄Û¿ €-¿ €1¿ €ñ¿ €ö¿ €„¿ €Û¿ €˜¿ ‹¿ ‹X¿ ‹©¿ ‹ı¿ ›-¿ ›|¿ ›≥¿ ›∑¿ ﬁ¿ ﬁ¿ ﬁg¿ ﬁw¿ ﬁ{¿ ﬁ∑¿ ﬁª¿ ﬂ¿ ﬂI¿ ﬂê¿ ﬂ◊¿ ‡¿ ‡P¿ ‡î¿ ‡÷¿ ‡Â¿ ‡È¿ ·)¿ ·o¿ ·Ø¿ ·¿ ‚(¿ ‚i¿ ‚É¿ ‚á¿ ‚û¿ ‚¢¿ ‚ª¿ ‚ø¿ ‚¸¿ „3¿ „q¿ „ü¿ „£¿ „Í¿ ‰'¿ ‰u¿ ‰ø¿ Â¿ Â¿ Â¿ Â'¿ Âx¿ Â¬¿ Â∆¿ Â“¿ Ê¿ ÊK¿ Êa¿ Ê•¿ Ê€¿ ÊÁ¿ ÊÔ¿ Êˆ¿ Ê˛¿ Á¿ Á¿ ÁV¿ Áï¿ ÁÃ¿ Á–¿ Áﬁ¿ Á‚¿ Ë2¿ ËV¿ Ë•¿ Ë‡¿ È1¿ ÈÇ¿ È–¿ Í¿ Í)¿ Íx¿ Í¡¿ Í“¿ Î#¿ Îr¿ Î√¿ Ï¿ ÏI¿ Ïê¿ ÏÌ¿ Ì¿ ÌR¿ Ìe¿ Ìt¿ ÌÖ¿ Ìî¿ Ì≥¿ Ì⁄¿ Ó¿ Ó#¿ Óh¿ Óy¿ Óì¿ Óß¿ Óƒ¿ Ó‚¿ Ó¯¿ Ô¿ Ô5¿ ÔN¿ Ôä¿ Ôß¿ Ô–¿ ÔÎ¿ 	¿ 6¿ f¿ ~¿ û¿ ¡¿ ¿ Ò ¿ Ò!¿ Òg¿ Ò≤¿ Ò˙¿ Ú"¿ Ú(¿ Úu¿ Ú√¿ Ú…¿ Û¿ ÛV¿ Û¢¿ ÛÎ¿ Ù1¿ Ù7¿ ÙG¿ ÙM¿ Ùï¿ Ù∫¿ Ù”¿ Ù‘¿ ı"¿ ın¿ ıú¿ ı¢¿ ıË¿ ˆ¿ ˆ¿ ˆE¿ ˆK¿ ˆ[¿ ˆa¿ ˆ´¿ ˆ≈¿ ˆÍ¿ ˆÎ¿ ˜#¿ ˜H¿ ˜I¿ ˜t¿ ˜z¿ ˜æ¿ ˜ˇ¿ ¯K¿ ¯ò¿ ¯À¿ ¯—¿ ˘¿ ˘p¿ ˘ø¿ ˙¿ ˙/¿ ˙5¿ ˙É¿ ˙”¿ ˚ ¿ ˚U¿ ˚k¿ ˚l¿ ˚∏¿ ˚æ¿ ˚Ë¿ ¸¿ ¸¿ ¸]¿ ¸c¿ ¸Œ¿ ˝¿ ˝¿ ˝n¿ ˝t¿ ˝ﬁ¿ ˛"¿ ˛#¿ ˛l¿ ˛r¿ ˛º¿ ˇ¿ ˇ
¿ ˇC¿ ˇI¿ ˇÑ¿ ˇ∂¿ ˇÂ¿ ˇÊ¿ 5¿ ;¿ o¿ ß¿ ®¿ Ú¿>¿h¿n¿ä¿ê¿◊¿›¿0¿_¿e¿{¿µ¿ˆ¿G¿Q¿W¿©¿ª¿”¿‘¿+¿T¿U¿ü¿‰¿¿¿0¿6¿Ä¿Ü¿‹¿¿¿'¿W¿õ¿È¿˘¿ˇ¿U¿g¿Ç¿É¿›¿	¿
¿e¿k¿µ¿Ô¿	¿	¿	^¿	d¿	¶¿	∆¿	«¿
¿
¿
c¿
Ñ¿
ä¿
⁄¿
¿¿¿D¿J¿ô¿Á¿¿#¿s¿ƒ¿¿7¿=¿Ö¿“¿ ¿¿S¿ú¿±¿∑¿¿N¿ö¿∫¿¿¿–¿÷¿$¿[¿°¿Ì¿/¿L¿M¿ñ¿Â¿1¿7¿¿–¿¿"¿:¿b¿c¿¨¿≤¿ˇ¿H¿N¿í¿≥¿…¿ ¿¿@¿A¿ã¿ô¿ü¿Â¿0¿~¿»¿˘¿&¿K¿L¿ê¿©¿Ø¿Ë¿Ó¿'¿Q¿R¿î¿≠¿≥¿Ï¿Ú¿+¿X¿Y¿ü¿•¿¿#¿)¿v¿«¿Õ¿›¿„¿0¿B¿a¿b¿Ø¿—¿◊¿$¿h¿n¿Æ¿¥¿ ¿¿K¿Q¿ü¿±¿∑¿Õ¿¿h¿µ¿¿M¿_¿e¿≥¿≈¿À¿ ¿ c¿ ≥¿!¿!=¿!C¿!ì¿!‹¿" ¿"&¿"s¿"∫¿"Ï¿#	¿#]¿#w¿#å¿#í¿#∆¿#⁄¿$+¿$4¿$L¿$∑¿%¿%l¿%u¿%Ü¿%È¿&A¿&n¿&µ¿&æ¿&œ¿'/¿'ç¿'Î¿(L¿(©¿)¿)0¿)9¿)p¿)x¿)|¿)}¿) ¿)Ï¿)Ú¿*C¿*ã¿*ë¿*—¿*◊¿*Á¿*Ì¿+6¿+Å¿+ô¿+—¿+Ó¿,+¿,/¿,0¿,}¿,≠¿,≥¿,ˆ¿,¸¿-F¿-ê¿-ﬁ¿-¿-ˆ¿.C¿.ë¿.◊¿/¿/¿/W¿/¶¿/ı¿0?¿0Q¿0ü¿1¿1(¿1^¿1t¿1œ¿1⁄¿1Ù¿2X¿2≠¿2∏¿2À¿30¿3ä¿3π¿4¿4¿4 ¿4Ç¿4‚¿5B¿5¨¿5∑¿5¿5˙¿6 ¿6+¿6/¿60¿6~¿6å¿6í¿6ﬂ¿7-¿7z¿7À¿7‡¿7Ê¿8&¿8,¿8<¿8B¿8ì¿8ÿ¿9,¿9T¿9q¿9è¿9Ù¿:¿:,¿:Ñ¿:Ø¿:µ¿:π¿:∫¿:∆¿:¯¿:˙¿:˚¿;¿;¿;g¿;è¿;Ì¿;˘¿<.¿</¿<;¿<Ñ¿<æ¿<ˇ¿=¿=¿=¿=¿=o¿=Ã¿=Õ¿=˜¿=¯¿>6¿>e¿>£¿>“¿?¿?H¿?î¿?ﬂ¿?‡¿?¸¿@-¿@3¿@|¿@Ø¿@Ì¿A.¿A/¿A^¿Ad¿At¿Az¿A∆¿A€¿B¿B¿B>¿BD¿BT¿BZ¿B™¿B¡¿B˜¿B¯¿C&¿CQ¿Ce¿Cç¿Có¿C≈¿CÀ¿Cœ¿C–¿D¿D/¿DC¿Dn¿Dx¿D©¿DØ¿D≥¿D¥¿D◊¿D›¿E.¿E`¿Ef¿E¥¿F¿F¿F¿F`¿Fw¿F}¿FŒ¿F‰¿G,¿GW¿G]¿GÇ¿GÜ¿Gá¿G≥¿Gπ¿H¿HH¿HN¿Hú¿HÏ¿H˙¿I ¿IH¿I_¿Ie¿I∂¿Iœ¿J¿J9¿J?¿Jg¿Jk¿Jl¿J•¿J”¿J‘¿JÊ¿K7¿K8¿KÖ¿K†¿L#¿LR¿Lb¿Lc¿Lñ¿L™¿L⁄¿L‰¿LÍ¿LÓ¿LÔ¿M¿M	¿Mb¿Mó¿M˙¿M˚¿NN¿No¿O
¿O?¿OO¿OP¿Oè¿O£¿Oﬂ¿OÈ¿OÔ¿OÛ¿OÙ¿P¿P¿P[¿Pß¿P∫¿Q¿QQ¿Qâ¿Qä¿Q∂¿Q˚¿RP¿R¢¿RÕ¿S=¿Ss¿S—¿T¿TF¿Të¿T◊¿U ¿U0¿UY¿Uì¿U≈¿U’¿V-¿V9¿Vs¿VÃ¿V÷¿VÏ¿VÙ¿Vı¿WM¿Wß¿W√¿WÚ¿Xl¿Xß¿X‘¿Xﬁ¿Y¿Y¿Y¿YL¿Ym¿Yµ¿Yı¿Z%¿ZK¿Zx¿Z÷¿ZÁ¿Zˆ¿[¿[¿[¿[N¿[W¿[]¿[a¿[b¿[Ü¿[≠¿[Â¿\¿\¿\%¿\f¿\ï¿\°¿\∂¿\¬¿\»¿\Ã¿\Õ¿]¿]¿]^¿]u¿]ô¿]¿¿]≈¿]…¿] ¿^¿^¿^^¿^x¿^£¿^Œ¿^‘¿^ÿ¿^Ÿ¿_¿_;¿_?¿_@¿_{¿_ñ¿_Ø¿_Â¿`¿`¿`0¿`H¿`i¿`¿`±¿`∏¿`»¿a¿a;¿aÜ¿a«¿b#¿b.¿b6¿bI¿bS¿bT¿bá¿bÔ¿c¿c¿c:¿cY¿c¿cö¿c√¿c”¿c€¿d¿dI¿dl¿dm¿dô¿d≠¿d—¿d€¿d‹¿e!¿eR¿eZ¿ev¿e|¿e}¿eØ¿eº¿eÂ¿fD¿fl¿fx¿fÑ¿fÖ¿f¶¿f“¿fÒ¿g
¿g'¿g/¿g5¿g6¿g^¿gy¿g©¿gÿ¿gÓ¿h¿h+¿h5¿hr¿hë¿hö¿h≤¿hÓ¿i¿i>¿iL¿iV¿i_¿iu¿ií¿i±¿i·¿j
¿j¿j¿j5¿jW¿j¿jõ¿jØ¿j—¿jÒ¿j¯¿j˘¿k¿kN¿kT¿kU¿kÜ¿kô¿k™¿kæ¿k’¿k˘¿lA¿lV¿l]¿la¿lb¿l∞¿lÒ¿l˜¿mI¿m]¿mc¿m§¿mÛ¿n¿n¿nW¿n¶¿n ¿n–¿o#¿oi¿o∂¿oº¿p¿pZ¿pé¿pî¿p„¿q1¿qg¿qm¿qΩ¿r¿rZ¿rÅ¿rá¿rù¿rÁ¿s1¿sa¿sg¿s ¿s‹¿sÏ¿sÚ¿tA¿tU¿t°¿tÓ¿t˛¿uO¿u©¿u‚¿uˇ¿v¿v2¿vJ¿vb¿vÉ¿vô¿v—¿vÿ¿vË¿w¿w,¿ww¿w∏¿x¿x¿x'¿x:¿xD¿xr¿xs¿xì¿y¿y+¿y]¿yn¿y}¿y¶¿y–¿yÓ¿z¿z(¿zJ¿zj¿zª¿zƒ¿zÃ¿{¿{¿{¿{8¿{x¿{ª¿|¿|A¿|B¿|à¿|â¿| ¿|Ò¿}W¿}X¿}ô¿}ﬁ¿~¿~:¿~Ü¿~¬¿~˛¿¿	¿
¿;¿h¿®¿¨¿≠¿ˇ¿ÄR¿Ä¶¿ÄÕ¿ÅC¿Å~¿ÇI¿Çƒ¿Ç ¿ÇÀ¿Ç›¿É¿ÉP¿ÉX¿ÉY¿É∑¿Ñ¿Ñ)¿Ñv¿Ñz¿Ñ{¿Ñ¨¿Ñ≠¿Ñ˝¿ÖJ¿Öt¿Öì¿ÖÓ¿Ü?¿Üh¿Üu¿Ü´¿ÜŒ¿Ü◊¿Ü›¿Ü·¿Ü‚¿ÜÒ¿ÜÚ¿á&¿á'¿áN¿áÇ¿áÜ¿áá¿áì¿á®¿áø¿à¿àá¿à˘¿âD¿âÉ¿âñ¿â®¿âÿ¿âﬂ¿â‡¿ä%¿äQ¿äd¿äk¿äo¿äp¿ä|¿ä©¿äœ¿ãB¿ãõ¿å¿å¿ån¿å›¿å„¿ç¿ç,¿çé¿ç»¿ç‚¿é;¿éu¿éÑ¿éõ¿é‘¿è1¿èl¿è{¿èâ¿èì¿è®¿è¥¿è‹¿ê ¿êP¿ê|¿êã¿ê≥¿êª¿ê¡¿ê≈¿ê∆¿ê“¿êÛ¿ëD¿ë{¿ë‹¿í,¿íR¿í∞¿í›¿í„¿ì(¿ì[¿ìÑ¿ìÖ¿ì≠¿ì–¿ì‘¿ì’¿ì·¿ìÙ¿î¿îH¿îÅ¿î¨¿î¡¿î≈¿î∆¿î‹¿î˘¿ï¿ï"¿ïG¿ïk¿ïë¿ï∏¿ï‹¿ñ¿ñ¿ñO¿ñt¿ñó¿ñæ¿ñÁ¿ñÓ¿ó¿óC¿óI¿óJ¿óê¿ó¨¿óı¿ó˛¿ò¿ò¿ò¿ò2¿òD¿ò[¿òí¿òù¿ò¶¿ò¨¿ò∞¿ò±¿ô ¿ô$¿ô@¿ôU¿ôg¿ôÅ¿ôü¿ô…¿ô˝¿ö:¿öi¿öû¿öÊ¿õ¿õ:¿õE¿õf¿õ™¿õÈ¿ú
¿úJ¿ún¿úw¿ú}¿úÅ¿úÇ¿úŒ¿úÔ¿ù¿ù¿ù/¿ùI¿ùd¿ùê¿ù¡¿ù˛¿û-¿ûb¿ûß¿û‘¿ûı¿ü ¿ü¿üb¿ü°¿ü¬¿†¿†&¿†/¿†5¿†9¿†:¿†Y¿†Å¿†Ç¿†»¿†Œ¿†¸¿°/¿°J¿°ì¿°°¿°ß¿°π¿°◊¿¢¿¢¿¢¿¢¿¢+¿¢R¿¢Ä¿¢≤¿¢¿£#¿£g¿£h¿£ö¿£≠¿£Ω¿£Ó¿§¿§T¿§î¿§ù¿§∑¿§◊¿•¿•'¿•ê¿•ƒ¿•À¿•Â¿•˙¿¶¿¶"¿¶@¿¶b¿¶m¿¶é¿¶Ø¿¶œ¿¶Ò¿ß¿ß¿ß#¿ß$¿ßE¿ßî¿ß¸¿®B¿®W¿®i¿®Å¿®∆¿®¯¿©&¿©I¿©V¿©a¿©¿©°¿©¬¿©Â¿™¿™¿™¿™¿™=¿™X¿™Y¿™•¿™«¿™Ú¿´¿´3¿´|¿´á¿´ê¿´•¿´∑¿´∆¿´È¿¨¿¨+¿¨N¿¨Ü¿¨è¿¨ï¿¨ñ¿¨ø¿¨Â¿≠:¿≠f¿≠â¿≠”¿Æ¿Æ¿Æ"¿Æ4¿ÆY¿Æy¿Æõ¿Æª¿Æﬁ¿ØI¿Øà¿Øë¿Øó¿Øò¿Ø…¿Ø¯¿∞$¿∞w¿∞„¿±¿±¿±2¿±D¿±o¿±ï¿±∑¿±Ë¿≤¿≤.¿≤m¿≤v¿≤|¿≤}¿≤Ø¿≤ƒ¿≤÷¿≤È¿≥¿≥*¿≥l¿≥{¿≥à¿≥£¿≥ª¿≥ﬂ¿≥ˇ¿¥<¿¥n¿¥í¿¥∞¿¥Ô¿µ,¿µ?¿µP¿µ_¿µl¿µw¿µü¿µ¡¿µ·¿∂¿∂E¿∂Ñ¿∂ç¿∂ì¿∂î¿∂¬¿∂◊¿∂È¿∑¿∑8¿∑Z¿∑z¿∑ù¿∑¡¿∏ ¿∏	¿∏¿∏¿∏#¿∏3¿∏Z¿∏ô¿∏”¿π ¿πF¿πr¿π{¿π•¿πƒ¿π‚¿∫¿∫#¿∫*¿∫+¿∫M¿∫l¿∫ç¿∫§¿∫∏¿∫”¿ª¿ª)¿ªä¿ª≤¿ªø¿ª‚¿º¿º(¿ºM¿ºr¿º}¿ºå¿ºØ¿º“¿ºÛ¿Ω¿Ω%¿Ω+¿Ω,¿ΩN¿Ω{¿Ω´¿Ω∏¿ΩË¿æ¿æ¿æ¿æd¿æ¢¿æ¿æ˜¿æ¯¿øB¿øy¿ø¿¿¿¿¿$¿¿%¿¿T¿¿ú¿¿ù¿¿∏¿¿‘¿¿ˇ¿¡(¿¡A¿¡è¿¬¿¬-¿¬\¿¬ö¿¬´¿¬ÿ¿√¿√-¿√v¿√û¿√–¿ƒ'¿ƒè¿ƒ‰¿≈¿≈{¿≈´¿≈Â¿∆7¿∆g¿∆z¿∆û¿∆Ø¿∆æ¿∆Ã¿∆◊¿∆‡¿∆Á¿∆Î¿∆Ì¿∆Ó¿«!¿«G¿«H¿«f¿«g¿«s¿«ú¿«Ú¿«ˆ¿«˜¿»¿»)¿»Q¿»|¿»Ä¿»Ç¿»É¿»ø¿»√¿…¿…,¿…c¿…¬¿…’¿…ˆ¿…˜¿ H¿ u¿ v¿ ÷¿ Ú¿ Û¿ÀC¿Àb¿Àd¿Àe¿À±¿Ã¿ÃR¿Ã£¿Ã◊¿Ã€¿Õ&¿Õp¿Õ¡¿Õ◊¿Õ€¿Œ(¿Œu¿Œ≈¿œ¿œH¿œL¿œå¿œœ¿œ¿–¿–0¿–Z¿–Ñ¿–£¿–§¿–‹¿–‚¿—¿—.¿—/¿—g¿—|¿—}¿—â¿—®¿— ¿“¿“¿“"¿“2¿“8¿“9¿“M¿“]¿“c¿“d¿“∞¿“Ô¿”&¿”*¿”+¿”7¿”M¿”ç¿”ë¿”ì¿”î¿”»¿”Á¿”ˆ¿‘¿‘9¿‘V¿‘u¿‘ê¿‘Ø¿‘…¿‘›¿‘Ì¿’¿’¿’.¿’4¿’5¿’ß¿’¿¿’·¿÷¿÷%¿÷D¿÷_¿÷¿÷ö¿÷∂¿÷“¿÷˜¿÷¯¿◊¿◊N¿◊P¿◊Q¿◊ó¿◊›¿◊ﬁ¿◊Í¿◊ˇ¿ÿ¿ÿF¿ÿR¿ÿï¿ÿ‡¿ÿÁ¿Ÿ.¿Ÿ2¿Ÿ3¿Ÿ?¿ŸR¿Ÿp¿ŸÖ¿Ÿâ¿Ÿä¿Ÿñ¿Ÿœ¿Ÿı¿⁄>¿⁄B¿⁄C¿⁄T¿⁄Ñ¿⁄Æ¿⁄Ã¿⁄–¿⁄—¿€¿€J¿€n¿€r¿€s¿€∏¿‹¿‹6¿‹^¿‹Ü¿‹ç¿‹ë¿‹í¿‹«¿‹ˆ¿›¿›¿›"¿›#¿›h¿›¶¿›ﬂ¿ﬁ¿ﬁå¿ﬁ∫¿ﬁ‡¿ﬂ6¿ﬂ@¿ﬂM¿ﬂà¿ﬂ≤¿ﬂ∏¿‡¿‡e¿‡t¿‡z¿‡å¿‡ê¿‡ë¿‡ù¿‡ƒ¿‡‡¿·¿·D¿·Z¿·é¿·‚¿·˙¿‚¿‚¿‚&¿‚?¿‚Y¿‚†¿‚…¿‚Á¿„$¿„O¿„z¿„°¿„À¿„¿‰%¿‰N¿‰o¿‰û¿‰À¿‰ÿ¿‰„¿‰Ï¿‰Û¿‰˜¿‰¯¿‰˙¿‰˚¿Â9¿Â=¿Âä¿Âé¿ÂŸ¿Ê¿Ê7¿Êù¿Ê»¿Ê⁄¿ÊÔ¿Á ¿Á ¿Á?¿ÁP¿ÁQ¿Át¿Áv¿Áw¿Á¶¿Áø¿Á‹¿Ë ¿Ë¿Ë<¿Ë=¿ËU¿Ëâ¿Ëä¿Ëñ¿ËÃ¿Ë˘¿Ë˝¿Ëˇ    %_kDefaultFloatingActionButtonLocation%_kDefaultFloatingActionButtonAnimator_standardBottomSheetCurve _kBottomSheetDominatesPercentage_kMinBottomSheetScrimOpacity_kMaxBottomSheetScrimOpacity_ScaffoldSlotScaffoldMessengerScaffoldMessengerState_ScaffoldMessengerScopeScaffoldPrelayoutGeometry_TransitionSnapshotFabLocationScaffoldGeometry_ScaffoldGeometryNotifier_BodyBoxConstraints_BodyBuilder_ScaffoldLayout_FloatingActionButtonTransition$_FloatingActionButtonTransitionStateScaffoldScaffoldState_DismissDrawerActionScaffoldFeatureController_BottomSheetSuspendedCurve_StandardBottomSheet_StandardBottomSheetStatePersistentBottomSheetController_ScaffoldScope ÜY