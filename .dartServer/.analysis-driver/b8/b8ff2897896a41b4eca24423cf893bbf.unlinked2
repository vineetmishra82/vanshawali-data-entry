Å&textvaluebuildTextSpan	selectionclearclearComposingisSelectionWithinTextBounds _isSelectionWithinComposingRangecopycutpaste	selectAlliOSBlinkingCaretKeyFramestimemaxDuration
_keyFramesdxisDone_lastKeyFrameIndexx
controller	focusNodeobscuringCharacterobscureTexttextHeightBehaviortextWidthBasisreadOnly	forceLinetoolbarOptionsshowSelectionHandles
showCursorautocorrectsmartDashesTypesmartQuotesTypeenableSuggestionsstyle
strutStyle_strutStyle	textAligntextDirectiontextCapitalizationlocaletextScaleFactorcursorColorautocorrectionTextRectColorbackgroundCursorColormaxLinesminLinesexpands	autofocusselectionColorselectionControlskeyboardTypetextInputAction	onChangedonEditingCompleteonSubmittedonAppPrivateCommandonSelectionChangedonSelectionHandleTappedinputFormattersmouseCursorrendererIgnoresPointercursorWidthcursorHeightcursorRadiuscursorOpacityAnimatescursorOffsetpaintCursorAboveTextselectionHeightStyleselectionWidthStylekeyboardAppearancescrollPaddingenableInteractiveSelectiondebugDeterministicCursordragStartBehaviorscrollControllerscrollPhysicsscribbleEnabledselectionEnabledautofillHintsautofillClientclipBehaviorrestorationIdscrollBehaviorenableIMEPersonalizedLearning_userSelectionEnabled_inferKeyboardTypecreateStatedebugFillProperties_cursorTimer_cursorBlinkOpacityController$_backingCursorBlinkOpacityController_iosBlinkCursorSimulation_cursorVisibilityNotifier_editableKey_clipboardStatus_textInputConnection_selectionOverlay_internalScrollController_scrollController_toolbarLayerLink_startHandleLayerLink_endHandleLayerLink_didAutoFocus_currentAutofillScopecurrentAutofillScope_effectiveAutofillClient_shouldCreateInputConnection_floatingCursorResetTime_floatingCursorResetController_lastOrientationwantKeepAlive_cursorColor
cutEnabledcopyEnabledpasteEnabledselectAllEnabled_onChangedClipboardStatus%_textEditingValueforTextLayoutMetricscopySelectioncutSelection	pasteText	initState_tickersEnableddidChangeDependenciesdidUpdateWidgetdispose _lastKnownRemoteTextEditingValuecurrentTextEditingValueupdateEditingValueperformActionperformPrivateCommand_startCaretRect_lastTextPosition_pointOffsetOrigin_lastBoundedOffset_floatingCursorOffsetupdateFloatingCursor_onFloatingCursorResetTick_finalizeEditing_batchEditDepthbeginBatchEditendBatchEdit!_updateRemoteEditingValueIfNeeded_value	_hasFocus_isMultiline_getOffsetToRevealCaret_hasInputConnection_needsAutofill_openInputConnection_closeInputConnectionIfNeeded#_openOrCloseInputConnectionIfNeeded_restartConnectionScheduled_scheduleRestartConnection_restartConnectionIfNeededconnectionClosedrequestKeyboard(_updateOrDisposeSelectionOverlayIfNeeded _updateSelectionOverlayForScroll_createSelectionOverlay_handleSelectionChanged_currentCaretRect_handleCaretChanged_caretAnimationDuration_caretAnimationCurve_showCaretOnScreenScheduled_scheduleShowCaretOnScreen_lastBottomViewInsetdidChangeMetrics_formatAndSetValue_onCursorColorTickcursorCurrentlyVisiblecursorBlinkIntervalselectionOverlay_obscureShowCharTicksPending_obscureLatestCharIndex_cursorActive_startCursorBlink_onCursorTick_stopCursorBlink_startOrStopCursorTimerIfNeeded_didChangeTextEditingValue_handleFocusChanged_cachedText_cachedFirstRect_cachedSize_cachedPlaceholder_cachedTextStyle_updateSelectionRects_updateSizeAndTransform_updateComposingRectIfNeeded_updateCaretRectIfNeeded_textDirectionrenderEditabletextEditingValue_devicePixelRatiouserUpdateTextEditingValuebringIntoViewshowToolbarhideToolbartoggleToolbar_placeholderLocationinsertTextPlaceholderremoveTextPlaceholder
autofillIdtextInputConfigurationautofill_currentPromptRectRangeshowAutocorrectionPromptRect_semanticsOnCopy_semanticsOnCut_semanticsOnPaste_characterBoundary_nextWordBoundary
_linebreak_documentBoundary_makeOverridable_transposeCharacters_transposeCharactersAction_replaceText_replaceTextAction_scrollToDocumentBoundary_updateSelection_updateSelectionAction_adjacentLineAction"_expandSelectionToDocumentBoundary_expandSelectionToLinebreak_expandSelection_hideToolbarIfVisible_actionsbuild_extractChildren
inlineSpanstartHandleLayerLinkendHandleLayerLinkhasFocusoffsetonCaretChangedtextSelectionDelegatedevicePixelRatiopromptRectRangepromptRectColorcreateRenderObjectupdateRenderObjectchildeditableKeyupdateSelectionRectsenabled_nextElementIdentifier_elementIdentifierelementIdentifieronScribbleFocusisInScribbleRectboundssizegetLeadingTextBoundaryAtgetTrailingTextBoundaryAtgetTextBoundaryAt
textLayoutinnerTextBoundaryouterTextBoundary	isForwardleadingTextBoundarytrailingTextBoundarystategetTextBoundariesForIntent_expandNonCollapsedRangeinvokeisActionEnabledignoreNonCollapsedSelectionNEWLINE_CODE_UNIT_isAtWordwrapUpstream_isAtWordwrapDownstream_verticalMovementRun_runSelection(stopCurrentVerticalRunIfSelectionChangesonTriggered_stack_throttledPush_throttleTimer_kThrottleDuration_undo_redo_update_push_list_indexcurrentValuepushundoredotoString&SelectionChangedCallbackAppPrivateCommandCallback_kCursorBlinkHalfPeriod"_kObscureShowLatestCharCursorTicks_kIPadWidthTextEditingControllerToolbarOptions	_KeyFrame_DiscreteKeyFrameSimulationEditableTextEditableTextState	_Editable_ScribbleFocusable_ScribbleFocusableState_ScribblePlaceholder_TextBoundary_CodeUnitBoundary_WhitespaceBoundary_CharacterBoundary_WordBoundary
_LineBreak_DocumentBoundary_ExpandedTextBoundary_CollapsedSelectionBoundary_MixedBoundary_DeleteTextAction_UpdateTextSelectionAction%_ExtendSelectionOrCaretPositionAction(_UpdateTextSelectionToAdjacentLineAction_SelectAllAction_CopySelectionActionTextEditingValueCallback_TextEditingHistory_TextEditingHistoryState
_UndoStack_Throttleable
_Throttled	_throttleÇ‹	TextStyleCharacterRangeStringCharactersDragStartBehaviorSelectionChangedCauseTextEditingValueTextSelectionTextInputTypeSmartQuotesTypeSmartDashesTypevoidStringMapdynamicDurationmillisecondsintdoubleTextInputFormatterdispose	TextFieldValueNotifieremptytext	composingisValidisComposingRangeValidnotifyListenerscopyWith	selection	collapsedoffset	TextRangeoverridevalueTextSpanBuildContextboolwithComposingstylemerge
decorationTextDecoration	underlinechildren
textBefore
textInside	textAfterFlutterErrorisCollapsedstartlengthendreadOnlyList
Simulation_iOSBlinkingCaretKeyFrames
isNotEmptylasttimei	TextInputTextInputActiondoneAutomaticKeepAliveClientMixinwantKeepAliveFormIntentActionActionsinvokemaybeInvoke	ShortcutsoverridableDeleteCharacterIntentDeleteToNextWordBoundaryIntentextentDeleteToLineBreakIntentbaseSelectAllTextIntent%DoNothingAndStopPropagationTextIntentReplaceTextIntentUpdateSelectionIntentCopySelectionTextIntentPasteTextIntentCupertinoTextFieldRenderEditableselectPosition
selectWordSemanticsServiceannounceStatefulWidget	multiline
StrutStyle	TextAlignTextWidthBasisparentTextCapitalizationnoneBoxHeightStyletightBoxWidthStyle
EdgeInsetsall
BrightnesslightCliphardEdgedisabledenabled	selectAllpastecopycutautofillHintsmaxLinesFilteringTextInputFormattersingleLineFormatterIterable	FocusNodeTextHeightBehaviorforceStrutHeightinheritFromTextStylefromTextStyleTextDirectionltrrtlDirectionalitylocaleLocaleMediaQueryDatatextScaleFactor
MediaQueryColorCupertinoThemeDataprimaryColorTextFormFieldExpandedSizedBoxDefaultSelectionStyleTextSelectionThemeDataselectionColorshowToolbar	ThemeDataplatformTextSelectionControlsaddListener
ListenableValueChangedVoidCallbackTextInputClientperformPrivateCommandSystemMouseCursorsMouseCursorignorePointerpreferredLineHeightRadiusOffset
ScrollableScrollController
controllerScrollPhysicsphysicsScrollBehaviorselectionEnabledAutofillClientAutofillScopeAutofillHintsnameemailemailAddressRestorationBucketRestorationScopeRestorableTextEditingControllerRestorationManager	ScrollbarScrollConfigurationisEmptyfirstkIsWebdefaultTargetPlatformTargetPlatformiOSmacOSaddressCityaddressCityAndStateaddressStatecountryNamecreditCardNumbernumber
familyNamefullStreetAddress	givenNamejobTitlelocation
middleName
namePrefix
nameSuffixnewPasswordnewUsernamenicknameoneTimeCodeorganizationNamepassword
postalCodestreetAddressLine1streetAddressLine2sublocalitytelephoneNumberurlusernameiOSKeyboardTypeandroidfuchsialinuxwindowsstreetAddressbirthdaydatetimebirthdayDaybirthdayMonthbirthdayYearcountryCodecreditCardExpirationDatecreditCardExpirationDaycreditCardExpirationMonthcreditCardExpirationYearcreditCardFamilyNamecreditCardGivenNamecreditCardMiddleNamecreditCardNamecreditCardSecurityCodecreditCardTypegenderimpplanguagemiddleInitialphotopostalAddresspostalAddressExtendedpostalAddressExtendedPostalCodestreetAddressLevel1streetAddressLevel2streetAddressLevel3streetAddressLevel4streetAddressLine3phonetelephoneNumberAreaCodetelephoneNumberCountryCodetelephoneNumberDevicetelephoneNumberExtensiontelephoneNumberLocaltelephoneNumberLocalPrefixtelephoneNumberLocalSuffixtelephoneNumberNationaltransactionAmountnumberWithOptionsdecimaltransactionCurrencyDiagnosticPropertiesBuilderdebugFillPropertiesaddDiagnosticsPropertydefaultValueEnumPropertyDoublePropertyIntPropertyStateWidgetsBindingObserverTickerProviderStateMixinTextSelectionDelegateTimerAnimationControllervsynciOSBlinkingCaret	GlobalKeyClipboardStatusNotifierTextInputConnectionTextSelectionOverlaywidgetscrollController	LayerLinkAutofillGroupStateautofillClientOrientation	focusNodehasFocuscursorColorwithOpacitytoolbarOptionsobscureTextenableInteractiveSelectionsetStateWidgetcurrentContext
StateError	ClipboardsetDataClipboardDatatoolbarupdateSchedulerBindinginstanceaddPostFrameCallbackmountedFuturegetData
kTextPlainmax
baseOffsetextentOffsetreplaced	initState
showCursordidChangeDependenciesAutofillGroupofcontext
unregisterregister	autofocushasSize
FocusScope
TickerModecancelorientationdidUpdateWidgetremoveListenerhandlesVisibleshowSelectionHandles
autofillIdupdateKeepAliveupdateConfigtextInputConfigurationsetStyle
fontFamilyfontSize
fontWeighttextDirection	textAlignselectionControlscanPasteWidgetsBindingremoveObserversetEditingStatescribbleInProgressscribblekeyboardplatformDispatcherbrieflyShowPasswordwithAnimationresetCharTicksnewlineshouldUnfocusgonextprevioussearchsendcontinueActionemergencyCalljoinrouteunspecifiedonAppPrivateCommandRectTextPositionRawFloatingCursorPointstateFloatingCursorDragStateStartisAnimatingstopgetLocalRectForCaretcurrentTextPositioncentersetFloatingCursorUpdatecenteredPoint$calculateBoundedFloatingCursorOffsetrawCursorOffsetgetPositionForPointlocalToGlobalEnd	animateTodurationcurveCurves
decelerate
centerLeftisCompleted
forcePress
lerpDoubledxdyresetLerpValuepragmaonEditingCompletereportErrorFlutterErrorDetails	exceptionstacklibraryErrorDescriptionclearComposingunfocus	nextFocuspreviousFocusonSubmittedRevealedOffsetpositionallowImplicitScrollingrectSizesizewidthclampDoublerightleft
fromCenterheightbottomtopminScrollExtentmaxScrollExtentshiftattachedautofillConfigurationattachshowrequestAutofillcloseconsumeKeyboardTokenscheduleMicrotaskcurrentAutofillScopeconnectionClosedReceivedrequestFocusupdateForScrollclipboardStatusdebugRequiredFortoolbarLayerLinkstartHandleLayerLinkendHandleLayerLinkrenderObjectselectionDelegatedragStartBehavioronSelectionHandleTappedisSelectionWithinTextBounds	doubleTapdrag	longPresstapshowHandlesonSelectionChangedcallCurvefastOutSlowIn
hasClientsscrollPaddinggetHandleSizekMinInteractiveDimensiongetHandleAnchorTextSelectionHandleTypeshowOnScreeninflateRectjumpTowindow
viewInsetsinputFormattersfold	formatterformatEditUpdatenewValueuserInteraction	onChangedvisibleForTestingisActivedebugDeterministicCursorcursorOpacityAnimatesanimateWithwhenCompleteperiodiczero(stopCurrentVerticalRunIfSelectionChangesaddObserverscribbleEnabledphysicalSizeshortestSidetoPlainTextincludeSemanticsLabelsgetBoxesForSelectionScrollDirectionuserScrollDirectionidleforceSelectionRectgenerate
charactersgetRangestringcharacterAtboundspaintBoundswhereselectionRectmaptoListsetSelectionRectsMatrix4getTransformTosetEditableSizeAndTransformgetRectForComposingRangesetComposingRectsetCaretRectruntimeTypefindRenderObjectdevicePixelRatiotoolbarIsVisiblehideHandleshidehideToolbarhashCodeTextInputConfigurationgrowableAutofillConfigurationuniqueIdentifiercurrentEditingValue	inputTypekeyboardTypeautocorrectsmartDashesTypesmartQuotesTypeenableSuggestions_userSelectionEnabledinputActiontextInputActiontextCapitalizationkeyboardAppearanceenableIMEPersonalizedLearningcanCopy
handleCopycanCut	handleCutClipboardStatus	pasteablehandlePasteDirectionalTextEditingIntentforwarddefaultActionTransposeCharactersIntentatmoveBack
expandNextcurrentCharactersstringBeforestringAfterstringBeforeLengthcurrentCallbackActiononInvokecurrentTextEditingValuereplacementRangereplacementTextcauseScrollToDocumentBoundaryIntentnewSelection-ExtendSelectionVerticallyToAdjacentLineIntent'ExpandSelectionToDocumentBoundaryIntent ExpandSelectionToLineBreakIntenttextEditingValuegetTrailingTextBoundaryAtgetLeadingTextBoundaryAtexpandToextentAtIndexObjectDismissIntentTypeDoNothingActionconsumesKeyDirectionalFocusIntentDirectionalFocusActionforTextField ExtendSelectionByCharacterIntent'ExtendSelectionToNextWordBoundaryIntent ExtendSelectionToLineBreakIntent'ExtendSelectionToDocumentBoundaryIntent6ExtendSelectionToNextWordBoundaryOrCaretLocationIntentintentdebugCheckHasMediaQuerybuildMouseRegioncursormouseCursorchildactionsonTriggeredFocusincludeSemantics
debugLabelexcludeFromSemanticsaxisDirectionAxisDirectiondownscrollPhysicsrestorationIdscrollBehavior
scrollbars
overscrollviewportBuilderViewportOffsetCompositedTransformTargetlink	SemanticsonCopyonCutonPasteeditableKeyupdateSelectionRectskey
inlineSpanbackgroundCursorColor	forceLineminLinesexpands
strutStyletextScaleFactorOftextHeightBehaviorDefaultTextHeightBehaviortextWidthBasisobscuringCharacteronCaretChangedrendererIgnoresPointercursorWidthcursorHeightcursorRadiuscursorOffsetselectionHeightStyleselectionWidthStylepaintCursorAboveTexttextSelectionDelegatepromptRectRangepromptRectColorautocorrectionTextRectColorclipBehaviorSetcontainsreplaceRange	substring
InlineSpanbuildTextSpanMultiChildRenderObjectWidgetvisitChildren
WidgetSpanCaretChangedHandlerLocalizationsmaybeLocaleOfsetPromptRectRangeScribbleClienttoStringregisterScribbleElementunregisterScribbleElementselectPositionAtfromoverlaps	intersectHitTestResulthitTestpathanyHitTestEntryentrytarget	RenderBoxMatrixUtilstransformRectfromLTWHbaseline	identical	alignmentPlaceholderAlignmentaboveBaselinebelowBaselineTextPainterParagraphBuilderPlaceholderDimensionsdebugAssertIsValid	pushStylegetTextStyleaddPlaceholderscalepopminindexTextLayoutMetricsisWhitespace
codeUnitAtstringAfterLengthgetWordBoundaryaffinityTextAffinity
downstreamgetLineAtOffsetupstreamContextAction_valuegetTextBoundaryAtDirectionalCaretMovementIntentrenderEditablecollapseSelectioncontinuesAtWrapfromPositionextendTocollapseAtReversalVerticalCaretMovementRun%_textEditingValueforTextLayoutMetricsstartVerticalCaretMovementmoveNextmovePreviouscutSelectioncopySelectionUndoTextIntentundoRedoTextIntentredofunctionpushclearremoveRangeT
currentArgleadingEdgeValueNotifier
SimulationStatefulWidgetStateAutomaticKeepAliveClientMixinWidgetsBindingObserverTickerProviderStateMixinTextSelectionDelegateTextInputClientAutofillClientMultiChildRenderObjectWidgetScribbleClient
WidgetSpan_TextBoundaryContextActionWáäˇäˆ;fq"´W„é  package:flutter/services.dart " 
dart:async  	dart:math  dart:ui  "package:characters/characters.dart  package:flutter/foundation.dart  package:flutter/gestures.dart  package:flutter/rendering.dart  package:flutter/scheduler.dart  package:flutter/services.dart  actions.dart  autofill.dart  automatic_keep_alive.dart  
basic.dart  binding.dart  constants.dart  
debug.dart  default_selection_style.dart  focus_manager.dart  focus_scope.dart  focus_traversal.dart  framework.dart  localizations.dart  media_query.dart  scroll_configuration.dart  scroll_controller.dart  scroll_physics.dart  scrollable.dart  shortcuts.dart  	text.dart  text_editing_intents.dart  text_selection.dart  ticker_provider.dart  widget_span.dart  	dart:core¿V¨ ¿Ï—í¢ <ÄÜÄ§Ä•Ä∫Ä÷Ä˝Ä˛ÅQÅ{Å∫Å„ÇÇ4Ç5ÇLÇdÇàÇùÇ¥ÇÕÇ‚É	É&ÉAÉ`ÉyÉñÉ±É’ÉˆÑÑ.ÑGÑ[ÑÑùÑºÑ◊ÑÿÖmÖnÖæÖ„ÜLÜMÜöÜÎÜÏá3áÇá≠áÛáÙà?àfàòàôà‰ââ=â>âkâoâÆâ˝äLäöäßä´ä˜ã8ã<ãçã⁄åå"åpåπç	çWç†çÏé7évéªéøèè.è2èÄè èﬁê*êuêôêùê˘ë	ëëëëpëóë·íí¡ìì>ìDìëìüì…îîîwî}î¡î·ïï*ï|ïÃññFñOñ}ñ~ñ¨ñÕóólóπó˜ó˝ò:òÜò”ò˙ôô3ôHôÑô¶ô≠ô±ô≤ôæôÁôÛö8öâö€õõ	õ%õ)õ*õ^õdõµõıúaú∏ù	ùYù•ùﬂûûûû¡û÷ûÍüüFüXüyü±üºü˚†††††5†;†ã†©†€°,°z°«¢¢¢H¢è¢‹££	£W£Ñ£≤£Ë§+§1§T§ß§≈§‰•2•6•7•W•]•®•⁄•‡¶1¶¶–ßßßrßvßwß©ßØß˝®H®V®\®≠®˚©L©ä©§©‹©‡©·™%™c™Æ™≤™≥™ˆ´9´ñ´ö´ú´ù´À´œ¨¨j¨~¨Ç¨÷≠)≠5≠L≠Ö≠ã≠Œ≠Á≠˛ÆÆ,ÆHÆeÆÅÆüÆ¡Æ¬ÆÆˆØ!Ø4Ø5ØbØhØ∫Ø¿ØÎØ˝Ø˛∞-∞3∞á∞ç∞∏∞Ã∞Õ±±±2±J±L±M±è±°±À±ˆ≤>≤b≤Ü≤™≤Œ≤Ú≥≥:≥^≥Ç≥¶≥À≥–≥—¥¥'¥=¥?¥@¥w¥⁄µµBµuµáµ√∂ ∂∂&∂0∂E∂É∂Ñ∂†∂°∂≈∂∆∂“∂Ò∂Ú∂˛∑1∑2∑~∑ú∑ù∑©∑√∑Ì∑Ó∏=∏á∏´∏¿∏ÿππXπzπëπ∂π√πÎ∫∫
∫∫T∫¢∫À∫ˇª9ªWªfªnªÜªåªçª≥ª‰ªËªÍªÎº	ºº]º•ºÏºˇΩΩΩ"ΩrΩ√æææVæZæ™æıæ˘ø<ø@øUøYø§øÛ¿ @¿ @¿ @d¿ @´¿ @ˆ¿ AD¿ Aë¿ Aﬂ¿ B*¿ By¿ Bü¿ B£¿ B⁄¿ BÎ¿ BÔ¿ C@¿ C\¿ C`¿ C¨¿ C˘¿ D$¿ D(¿ Di¿ Dm¿ D∫¿ D¸¿ E ¿ EI¿ Eò¿ Eÿ¿ EÎ¿ EÔ¿ F=¿ Fç¿ F±¿ Fµ¿ FÔ¿ FÛ¿ G?¿ Gå¿ G–¿ H ¿ Hg¿ Hâ¿ Hç¿ H›¿ I$¿ Is¿ Iü¿ I£¿ I‡¿ I‰¿ J—¿ K|¿ L'¿ M¿ M¯¿ M¸¿ NS¿ NW¿ OA¿ P+¿ Q,¿ R+¿ Sp¿ Tn¿ Uò¿ Vc¿ Vg¿ Vî¿ Vò¿ WÇ¿ Xl¿ Y*¿ YŸ¿ [ ¿ […¿ \ê¿ ]=¿ ]z¿ ]~¿ ]î¿ ]ò¿ ]ˇ¿ ^f¿ _¿ _Ã¿ `z¿ `‡¿ aó¿ aõ¿ a∫¿ aæ¿ b¿ bN¿ bõ¿ bÎ¿ c8¿ cm¿ c•¿ c©¿ cË¿ d¿ d¿ df¿ d±¿ dµ¿ d¸¿ eI¿ e|¿ e¶¿ eπ¿ eΩ¿ e¯¿ f+¿ f/¿ fj¿ fn¿ f∏¿ f˘¿ g¿ g¿ gc¿ g∞¿ g˚¿ hE¿ h¿ hã¿ h≠¿ hÕ¿ i¿ i$¿ i*¿ i2¿ i6¿ iI¿ iM¿ i[¿ i_¿ iÆ¿ iÏ¿ j¿ jB¿ jH¿ jñ¿ jÊ¿ k&¿ k,¿ k{¿ kÃ¿ l	¿ lT¿ lZ¿ l©¿ l›¿ l„¿ m3¿ m|¿ mÀ¿ n¿ nf¿ n≠¿ nˇ¿ o¿ o¿ o=¿ oZ¿ ou¿ oò¿ o∂¿ o”¿ o˘¿ p¿ pB¿ p[¿ pw¿ pñ¿ pø¿ pÂ¿ p˝¿ q¿ q(¿ q?¿ qR¿ ql¿ qá¿ q§¿ q’¿ qÒ¿ r¿ r.¿ rG¿ rc¿ rÑ¿ rû¿ r’¿ rÈ¿ s¿ s¿ s9¿ sV¿ sx¿ sß¿ sΩ¿ sÊ¿ t¿ t¿ t0¿ tX¿ to¿ tñ¿ tœ¿ u¿ u;¿ uk¿ u°¿ u«¿ u‚¿ u˙¿ v ¿ vD¿ vo¿ và¿ vØ¿ v«¿ v‡¿ w¿ w0¿ wS¿ wu¿ w¬¿ wÊ¿ x
¿ xz¿ xÍ¿ y¿ yA¿ yb¿ yÑ¿ y¢¿ y∆¿ yÙ¿ z!¿ zO¿ z|¿ z®¿ z ¿ z˚¿ {,¿ {;¿ {à¿ {º¿ {∆¿ {Ê¿ {ı¿ |2¿ |w¿ |Å¿ |◊¿ |˘¿ }(¿ }N¿ }x¿ }◊¿ ~¿ ~¿ ~4¿ ~â¿ ~¶¿ ~“¿  ¿ +¿ S¿ w¿ è¿ ™¿ Ÿ¿ Ä¿ Ä,¿ ÄO¿ Äf¿ Äî¿ Äø¿ Ä‚¿ Å¿ Å,¿ ÅP¿ Åj¿ Åè¿ Å≈¿ ÅÊ¿ ÇR¿ Çy¿ Çú¿ Ç‹¿ É-¿ É<¿ ÉZ¿ Éá¿ Éà¿ ÉÆ¿ Éÿ¿ ÉŸ¿ Ñ¿ Ñ-¿ Ñ.¿ Ñp¿ Ñ≤¿ Ñ∏¿ Ñﬂ¿ ÑÂ¿ Ö¿ Ö-¿ ÖP¿ ÖQ¿ Öå¿ Öœ¿ Ö’¿ Ü¿ Üj¿ Ü∫¿ ÜÕ¿ Ü”¿ Ü¸¿ á¿ á+¿ á,¿ áV¿ áÜ¿ áá¿ á¬¿ áÈ¿ áÍ¿ à"¿ àI¿ àO¿ àã¿ à÷¿ à‹¿ â¿ â¿ â3¿ â4¿ âÇ¿ âà¿ â÷¿ ä¿ ä¿ ä7¿ ä=¿ äM¿ äS¿ äú¿ ä¥¿ äµ¿ ä›¿ ä„¿ ã3¿ ãÇ¿ ãœ¿ ã˜¿ å¿ å¿ åH¿ åN¿ åö¿ åÍ¿ ç¿ ç¿ ç'¿ ç-¿ çq¿ çî¿ çï¿ çœ¿ çÌ¿ çÛ¿ éE¿ éZ¿ é`¿ ép¿ év¿ éœ¿ éË¿ éÈ¿ è$¿ èL¿ èR¿ èz¿ èè¿ è©¿ è™¿ èÒ¿ ê¿ ê¿ êb¿ êã¿ êå¿ ê’¿ êı¿ êˆ¿ ë)¿ ëB¿ ëC¿ ë}¿ ë±¿ ë∑¿ ë˛¿ íA¿ íÖ¿ í–¿ ì¿ ì!¿ ìm¿ ì∂¿ î¿ î¿ î¿ îb¿ î•¿ î´¿ ï¿ ïh¿ ï}¿ ïÉ¿ ïÿ¿ ñ(¿ ñj¿ ñà¿ ñß¿ ñÌ¿ ñÛ¿ ó(¿ ó,¿ óM¿ óN¿ óá¿ ó∫¿ ó¿¿ ó¯¿ ò¿ ò*¿ ò+¿ òh¿ òé¿ òî¿ òŸ¿ ô ¿ ô¿ ôT¿ ô°¿ ôÔ¿ ö8¿ öà¿ öò¿ öû¿ ö÷¿ öÎ¿ õ¿ õ¿ õT¿ õõ¿ õµ¿ õª¿ ú¿ ú:¿ ú@¿ ú¿ úÖ¿ úï¿ úõ¿ úÌ¿ úÛ¿ ù¿ ù7¿ ù8¿ ùx¿ ù∞¿ ù∂¿ ù˝¿ ûO¿ ûU¿ ûç¿ û•¿ û¶¿ ûÂ¿ ü¿ ü#¿ üt¿ üì¿ üô¿ üÍ¿ †+¿ †@¿ †a¿ †b¿ †ì¿ †ô¿ †Ø¿ † ¿ †À¿ °	¿ °¿ °P¿ °†¿ °˘¿ ¢¿ ¢¿ ¢J¿ ¢P¿ ¢ï¿ ¢¡¿ ¢¬¿ £¿ £>¿ £D¿ £à¿ £ü¿ £ƒ¿ £≈¿ £˝¿ §K¿ §Q¿ §°¿ §‘¿ §⁄¿ •$¿ •@¿ •F¿ •î¿ •€¿ ¶,¿ ¶T¿ ¶Z¿ ¶´¿ ¶¸¿ ßM¿ ßâ¿ ßè¿ ßﬁ¿ ®+¿ ®[¿ ®a¿ ®≠¿ ®ª¿ ®Õ¿ ®◊¿ ®›¿ ©,¿ ©|¿ ©Ω¿ ©À¿ ©Î¿ ©ı¿ ©˚¿ ™F¿ ™á¿ ™ï¿ ™≤¿ ™º¿ ™¬¿ ´¿ ´>¿ ´L¿ ´v¿ ´Ä¿ ´Ü¿ ´ñ¿ ´ú¿ ´·¿ ´ˆ¿ ¨G¿ ¨\¿ ¨s¿ ¨t¿ ¨¨¿ ¨¸¿ ≠¿ ≠R¿ ≠Ö¿ ≠ã¿ ≠›¿ Æ/¿ Æ5¿ Æã¿ Æë¿ Æ‚¿ Ø-¿ Ø?¿ ØE¿ Øñ¿ ØÂ¿ ∞¿ ∞¿ ∞e¿ ∞∂¿ ∞–¿ ∞÷¿ ±!¿ ±E¿ ±S¿ ±p¿ ±z¿ ±Ä¿ ±Œ¿ ≤¿ ≤8¿ ≤F¿ ≤o¿ ≤y¿ ≤¿ ≤ó¿ ≤ù¿ ≤≠¿ ≤≥¿ ≥ ¿ ≥K¿ ≥g¿ ≥|¿ ≥Õ¿ ≥‚¿ ≥˘¿ ≥˙¿ ¥1¿ ¥v¿ ¥|¿ ¥√¿ ¥ˇ¿ µ¿ µQ¿ µu¿ µ{¿ µî¿ µö¿ µÎ¿ ∂2¿ ∂8¿ ∂k¿ ∂y¿ ∂â¿ ∂¬¿ ∂ ¿ ∂‘¿ ∂È¿ ∂ˇ¿ ∑ ¿ ∑9¿ ∑Ü¿ ∑ï¿ ∑õ¿ ∑Î¿ ∏;¿ ∏A¿ ∏j¿ ∏¿ ∏“¿ ∏Í¿ π¿ π¿ π7¿ π=¿ πã¿ π™¿ π∞¿ πÒ¿ ∫A¿ ∫å¿ ∫´¿ ∫¨¿ ∫Ì¿ ª:¿ ª@¿ ªç¿ ª◊¿ º'¿ º-¿ º=¿ ºC¿ ºî¿ º‡¿ ºÛ¿ ΩC¿ Ωí¿ Ω»¿ Ω›¿ æ¿ æ¿ æL¿ æÑ¿ æä¿ æ ¿ æı¿ ø
¿ ø.¿ ø/¿ øn¿ øò¿ øô¿ ø“¿ ¿¿ ¿I¿ ¿O¿ ¿î¿ ¿€¿ ¡¿ ¡B¿ ¡H¿ ¡ç¿ ¡“¿ ¡˝¿ ¬¿ ¬S¿ ¬´¿ ¬Ú¿ ¬¯¿ √¿ √\¿ √£¿ √©¿ ƒ¿ ƒ¿ ƒ/¿ ƒ5¿ ƒk¿ ƒ§¿ ƒ«¿ ≈¿ ≈b¿ ≈≠¿ ≈€¿ ≈·¿ ∆$¿ ∆i¿ ∆±¿ «¿ «P¿ «w¿ «å¿ «í¿ «¢¿ «®¿ «Ë¿ ».¿ »q¿ »±¿ »ˇ¿ …B¿ …k¿ …l¿ …≠¿   ¿  ¿  %¿  r¿  ö¿  †¿  Ô¿ À?¿ À[¿ Àa¿ À±¿ Ã ¿ ÃK¿ Ã¿ ÃÖ¿ Ã◊¿ ÃÏ¿ Õ¿ Õ¿ ÕQ¿ Õ°¿ ÕÆ¿ Õ¥¿ Õ˛¿ ŒL¿ Œí¿ Œß¿ Œ“¿ Œ”¿ œ¿ œ]¿ œc¿ œÆ¿ œæ¿ œƒ¿ –¿ –J¿ –P¿ –`¿ —¿ —d¿ —î¿ “"¿ “r¿ “†¿ “µ¿ “Ì¿ “Ó¿ ”0¿ ”¿ ”ê¿ ”•¿ ”€¿ ”‹¿ ‘$¿ ‘S¿ ‘T¿ ‘ì¿ ‘Õ¿ ‘”¿ ’!¿ ’r¿ ’Ω¿ ÷¿ ÷?¿ ÷E¿ ÷U¿ ÷[¿ ÷©¿ ÷Ï¿ ◊¿ ◊4¿ ◊5¿ ◊Å¿ ◊è¿ ◊ï¿ ◊›¿ ◊„¿ ÿ4¿ ÿÑ¿ ÿ”¿ ÿÔ¿ Ÿ¿ Ÿ¿ Ÿ]¿ Ÿ¨¿ Ÿ≤¿ Ÿ€¿ ⁄ ¿ ⁄¿ ⁄<¿ ⁄`¿ ⁄f¿ ⁄}¿ ⁄É¿ ⁄À¿ €¿ €d¿ €¥¿ €‘¿ €È¿ ‹¿ ‹¿ ‹B¿ ‹e¿ ‹k¿ ‹æ¿ ‹”¿ ‹Ò¿ ‹Ú¿ ›.¿ ›e¿ ›k¿ ›ó¿ ›¨¿ › ¿ ›À¿ ﬁ¿ ﬁ8¿ ﬁ>¿ ﬁé¿ ﬁ≤¿ ﬁ÷¿ ﬁ◊¿ ﬂ¿ ﬂ1¿ ﬂ2¿ ﬂv¿ ﬂô¿ ﬂö¿ ﬂ‰¿ ﬂÍ¿ ‡)¿ ‡Y¿ ‡Z¿ ‡§¿ ‡™¿ ‡Ë¿ ·¿ ·¿ ·=¿ ·C¿ ·v¿ ·|¿ ·¢¿ ·…¿ · ¿ ‚¿ ‚j¿ ‚p¿ ‚‘¿ „¿ „v¿ „Ï¿ „Ú¿ ‰¿ ‰/¿ ‰Q¿ ‰R¿ ‰ú¿ ‰‡¿ ‰ˆ¿ ‰¸¿ ÂA¿ Â¿ Âæ¿ Âƒ¿ Ê¿ ÊM¿ Êv¿ Ê|¿ Êî¿ Ê©¿ Ê“¿ Ê”¿ Á ¿ Áo¿ Áá¿ Áç¿ Á›¿ Ë¿ Ë¿ ËH¿ Ëx¿ Ëy¿ Ëµ¿ Ë‚¿ Ë„¿ È#¿ Èl¿ Èr¿ È≠¿ È≥¿ È÷¿ ÈÎ¿ Í¿ Í¿ ÍU¿ Íõ¿ Í°¿ ÍÎ¿ ÍÒ¿ Î¿ Î&¿ Î,¿ Îw¿ Î¬¿ ÎŸ¿ Îˇ¿ Ï ¿ Ï?¿ ÏÉ¿ Ïâ¿ Ï®¿ ÏÆ¿ Ï∆¿ Ï€¿ Ï˘¿ Ï˙¿ Ì:¿ Ìf¿ Ìl¿ Ì§¿ ÌÕ¿ Ì‚¿ Ó¿ Ó¿ Ó[¿ Ó≠¿ Óø¿ Ó≈¿ Ô¿ Ôc¿ Ô¶¿ ÔÙ¿ %¿ +¿ y¿ ¢¿ ®¿ …¿ œ¿ Ú¿ ¯¿ ÒE¿ Òy¿ Ò¿ Òù¿ Ú¿ Úq¿ Ú∆¿ Û¿ Ûl¿ Û©¿ ÛØ¿ Û“¿ Ûÿ¿ Ù(¿ Ùy¿ Ù≈¿ ÙÊ¿ ÙÏ¿ ı3¿ ı9¿ ıá¿ ı—¿ ı◊¿ ˆ$¿ ˆt¿ ˆ¿¿ ˜¿ ˜\¿ ˜¨¿ ˜≤¿ ¯ ¿ ¯M¿ ¯õ¿ ¯Î¿ ˘<¿ ˘M¿ ˘S¿ ˘û¿ ˘Ì¿ ˙4¿ ˙:¿ ˙Ü¿ ˙°¿ ˙ß¿ ˙ı¿ ˚C¿ ˚ë¿ ˚ﬂ¿ ¸%¿ ¸ì¿ ¸ô¿ ¸Æ¿ ¸Ú¿ ˝¿ ˝¿ ˝k¿ ˝q¿ ˝∏¿ ˝¸¿ ˛$¿ ˛%¿ ˛[¿ ˛a¿ ˛Ñ¿ ˛ü¿ ˛†¿ ˛‚¿ ˛¯¿ ˛˛¿ ˇI¿ ˇé¿ ˇî¿ ˇﬂ¿ +¿ 1¿ y¿ æ¿ ¯¿ ˛¿¿¿a¿s¿í¿ì¿À¿¿¿i¿≠¿¬¿»¿¿\¿†¿∏¿æ¿¿W¿e¿ç¿é¿„¿¿¿o¿p¿π¿Â¿¿/¿6¿p¿ª¿¡¿¬¿¯¿˘¿J¿ù¿Ô¿C¿J¿õ¿Ï¿	#¿	6¿	]¿	~¿	°¿	¯¿
4¿
ë¿
Œ¿
¿`¿û¿Ÿ¿¿U¿≤¿¿l¿°¿˛¿[¿ó¿”¿0¿n¿À¿¿?¿Ç¿ﬂ¿<¿|¿Ÿ¿¿¿ ¿n¿î¿µ¿¡¿“¿˜¿¿?¿d¿u¿}¿É¿Ñ¿ù¿√¿…¿ ¿¿\¿£¿„¿¿T¿ê¿À¿¿9¿Ä¿∆¿¿U¿î¿“¿¿J¿á¿ ¿¿;¿p¿µ¿Ê¿¿H¿{¿Æ¿Í¿"¿W¿Ü¿ª¿¿&¿\¿è¿≈¿ ¿3¿c¿§¿Ì¿9¿p¿∑¿˛¿E¿å¿“¿ ¿ ^¿ ù¿ ÿ¿!¿!a¿!¢¿!Ê¿"&¿"l¿"≤¿"ı¿#M¿#ã¿#∏¿#Î¿#Ú¿#Û¿$6¿$:¿$;¿$G¿$Å¿$Ç¿$é¿$”¿$˛¿%X¿%§¿&¿&^¿&Ω¿'d¿(¿(v¿(°¿(˙¿)_¿)∂¿*¿*Z¿*•¿*˝¿+Y¿+√¿,8¿,§¿-¿-é¿-ı¿.x¿.ı¿.˘¿.˚¿.¸¿/¿0¿0¿0V¿0ü¿0≤¿0⁄¿0ﬁ¿1¿1¿1Ä¿1”¿2¿2`¿2a¿2é¿2π¿2∫¿2È¿3d¿3e¿3ò¿3œ¿4¿4¿4#¿4$¿4Q¿4]¿4°¿4¢¿4Ú¿4Û¿5B¿5P¿5V¿5§¿5Ò¿5˜¿6B¿6å¿6í¿6±¿6÷¿6¯¿72¿7y¿7z¿7≈¿8¿8R¿8S¿8ä¿8ã¿8¨¿8≠¿8π¿8¿8Ò¿9R¿9S¿9_¿9æ¿9ø¿9À¿:¿:¿:%¿:q¿:r¿:~¿;¿;¿;6¿;H¿;í¿;ö¿;û¿;ü¿;ﬁ¿<%¿<M¿<É¿<â¿<™¿<Æ¿<Ø¿<‹¿<Ë¿=¿=\¿={¿=≤¿=¿¿=∆¿=ı¿>=¿>o¿>ß¿>¡¿>¬¿>È¿?
¿?-¿?P¿?u¿?Ü¿?´¿?–¿@¿@<¿@Z¿@Ö¿@ﬂ¿@Ó¿A¿A&¿A7¿A?¿AE¿Ae¿Ai¿Aj¿Añ¿A¢¿A’¿B¿B¿B¿BZ¿Bâ¿B®¿B…¿B◊¿B›¿C%¿Cr¿C§¿CÓ¿D)¿D@¿D|¿DÜ¿Dê¿D•¿D´¿DÀ¿Dœ¿D–¿DÛ¿Dˇ¿E=¿EX¿Ef¿El¿E¨¿EÀ¿EÈ¿E˜¿E˝¿F-¿Fh¿F∑¿Fœ¿F›¿F„¿F‰¿G1¿GH¿G£¿Gı¿H;¿HB¿HC¿Hc¿H§¿H±¿H∏¿HÍ¿I4¿Io¿IÜ¿I¬¿IÃ¿I÷¿IÎ¿IÒ¿Iı¿Iˆ¿J¿J&¿JV¿Já¿J—¿JË¿Jˆ¿J¸¿K¿K=¿Kö¿K£¿K∞¿K∑¿KÈ¿L!¿L'¿L+¿L,¿LB¿LC¿LO¿Ld¿L{¿Lπ¿L¯¿M/¿Mt¿M≠¿M±¿M≤¿N¿N$¿NC¿ND¿NP¿Nq¿Nî¿Nï¿N·¿O¿OJ¿Oz¿Oª¿O¡¿O¬¿O¿P¿PG¿Px¿P∂¿P¿¿P ¿P–¿P—¿Q¿QO¿Q~¿Q®¿Q÷¿QÛ¿R0¿R}¿Rù¿R∫¿R¬¿R»¿R…¿S3¿SA¿SG¿SH¿Sì¿S€¿Sˇ¿T%¿T3¿T9¿Td¿Tä¿T√¿Tﬂ¿TÁ¿U$¿U;¿UC¿UI¿UM¿UN¿UZ¿Uã¿U±¿UÊ¿V-¿Vn¿Vô¿Vü¿VË¿W¿W¿W\¿W]¿Wö¿W˜¿X8¿X>¿X?¿Xr¿X±¿XÍ¿Y¿Y	¿Y
¿YK¿Yæ¿Z¿Z¿Z¿Z5¿Z\¿Zé¿Z¨¿Z≤¿Z≥¿Z‹¿[¿[l¿[t¿[z¿[{¿[¶¿[“¿\#¿\B¿\c¿\ã¿\≥¿\◊¿\ˇ¿](¿]O¿]Z¿]b¿]h¿]“¿]Ù¿]˙¿]˛¿]ˇ¿^¿^¿^H¿^{¿^Ω¿^Ï¿_¿_<¿_^¿_z¿_ì¿_»¿_˘¿`¿`9¿`s¿`•¿`Ê¿a¿a0¿aE¿aì¿aó¿aò¿aΩ¿aæ¿b	¿b¿b[¿bü¿b¿c¿c¿cd¿có¿cÕ¿cŒ¿c⁄¿d¿d¿d!¿dU¿d¢¿dÚ¿e;¿e<¿eä¿e´¿e‘¿e‚¿eË¿eÈ¿f¿fU¿fo¿f™¿f∞¿fﬁ¿fﬂ¿f˙¿gF¿gÄ¿g¬¿g–¿g÷¿g◊¿h#¿hL¿hÛ¿i ¿i¿i;¿i<¿iw¿i±¿j¿jk¿jl¿jœ¿k)¿kj¿kp¿kq¿k¿¿l¿l]¿l{¿l∞¿lœ¿m¿mY¿mà¿m£¿m©¿m≠¿mÆ¿m∫¿mÈ¿mˇ¿n#¿nn¿n∂¿n ¿nÁ¿o ¿o*¿o9¿oZ¿oy¿oö¿oø¿o‚¿p¿p:¿pI¿pt¿pû¿pø¿p‡¿q¿q*¿qu¿qæ¿qˆ¿r¿r¿r¿r¿r¿re¿rî¿rò¿rô¿r„¿r¸¿r˝¿sN¿s[¿s~¿s¿s…¿sÁ¿sË¿t¿t<¿t=¿té¿tﬁ¿u$¿u}¿u~¿uä¿u∆¿v¿v¿vE¿v_¿vâ¿vƒ¿vˆ¿w¿w(¿wy¿wõ¿w∆¿w«¿x4¿xà¿xâ¿x◊¿y¿yh¿yw¿y¢¿yÏ¿zT¿zU¿z∏¿{C¿{£¿{≤¿{⁄¿|¿|Y¿|ê¿}¿}¿}!¿}'¿}+¿},¿}R¿}œ¿~¿~n¿~Ω¿<¿ª¿√¿·¿Ä¿Ä"¿ÄC¿ÄP¿Äñ¿Äˆ¿ÅV¿ÅW¿Å‰¿ÅÍ¿ÅÓ¿ÅÔ¿Ç¿Çm¿Ç∏¿Ç‰¿Ç¿É¿É8¿Én¿Éé¿É¶¿Éƒ¿Ñ¿Ñ$¿Ñ,¿Ñ9¿Ñw¿Ñ«¿Ö¿Ö2¿ÖM¿Ög¿Öå¿Ö∏¿Ö›¿Ü ¿Ü'¿ÜL¿Ü{¿Ü†¿Ü∆¿ÜÙ¿á¿áD¿áW¿á|¿á¶¿áπ¿á‚¿à¿à#¿à-¿à5¿à;¿à<¿à~¿àù¿à´¿à±¿à≤¿àı¿àˇ¿â¿â@¿ât¿âí¿â®¿âƒ¿ä¿ä¿ä ¿ä!¿äo¿ä¿¿ã¿ã:¿ãv¿ã}¿ãŒ¿å¿ål¿åz¿åì¿å∑¿åΩ¿å¡¿å¬¿å›¿åﬁ¿ç/¿ço¿çu¿çƒ¿é¿é1¿éK¿ée¿éi¿éj¿é∫¿è¿è¿èZ¿èf¿è~¿èò¿è§¿è¿¿ê¿ê¿ê?¿êC¿êD¿êq¿ê®¿ê∂¿êº¿êÏ¿ë&¿ë4¿ë:¿ëq¿ë§¿ë®¿ë©¿ë„¿í
¿í/¿í3¿í4¿íg¿íò¿íô¿íÊ¿ì5¿ìÑ¿ìò¿ìù¿ìÈ¿î:¿îà¿îô¿îœ¿ï¿ïX¿ï^¿ï_¿ïí¿ïµ¿ï“¿ï”¿ïÏ¿ñ&¿ñR¿ñÑ¿ñÕ¿ó¿óV¿ó}¿óä¿óÿ¿ò)¿ò_¿òê¿ò≠¿ò»¿ô¿ô¿ô¿ôa¿ôú¿ôı¿ö¿ö"¿ö#¿öq¿öÑ¿ö±¿ö‰¿õ¿õH¿õO¿õP¿õò¿õı¿õ˘¿õ˙¿úE¿úï¿ú§¿ù¿ù¿ù1¿ùZ¿ùh¿ùn¿ùé¿ù¿¿ù¡¿û¿ûU¿ûk¿ût¿û¡¿ü¿ü_¿üÄ¿üÃ¿†*¿†}¿†û¿†ƒ¿†Ê¿°¿°.¿°B¿°j¿°é¿°∂¿°ﬂ¿¢¿¢¿¢6¿¢H¿¢d¿¢≥¿¢ﬁ¿£¿£¿£L¿£Y¿£}¿£É¿£á¿£à¿£±¿£–¿£ı¿§¿§G¿§M¿§Q¿§R¿§Å¿§¡¿§ﬂ¿§¸¿•#¿•M¿•S¿•W¿•X¿•Ñ¿•™¿•—¿•ﬂ¿•Â¿¶¿¶@¿¶D¿¶è¿¶î¿¶·¿ß.¿ß]¿ßÉ¿ß¨¿ßÌ¿ß˚¿®¿®$¿®E¿®r¿®s¿®÷¿©?¿©ë¿©ª¿©º¿©Ê¿©¯¿™¿™¿™?¿™a¿™á¿™Æ¿™”¿™€¿™¸¿´+¿´/¿´0¿´1¿´=¿´Y¿´x¿´∞¿´”¿¨¿¨E¿¨K¿¨O¿¨P¿¨â¿¨è¿¨›¿≠+¿≠y¿≠»¿≠Á¿Æ¿Æ¿Æ5¿ÆB¿Æ∂¿Æº¿Æ¿¿Æ¡¿Æı¿Ø¿Ø1¿Ø\¿Øk¿Øë¿Ø≥¿Øª¿Ø¡¿Ø≈¿Ø∆¿ØÚ¿∞¿∞ ¿∞!¿∞D¿∞r¿∞õ¿∞≥¿∞»¿∞Ë¿±¿±F¿±u¿±ô¿±Ã¿±Î¿≤¿≤]¿≤d¿≤h¿≤i¿≤ñ¿≤Ó¿≥=¿≥ã¿≥Æ¿≥Û¿¥¿¥¿¥¿¥5¿¥6¿¥z¿¥æ¿µ¿µ@¿µn¿µÉ¿µî¿µ¿¿µÁ¿∂¿∂@¿∂k¿∂ë¿∂ª¿∂÷¿∂Â¿∑¿∑)¿∑F¿∑P¿∑_¿∑e¿∑ë¿∑µ¿∑’¿∑‚¿∏	¿∏,¿∏;¿∏f¿∏n¿∏µ¿∏›¿∏„¿π0¿πW¿πè¿πô¿π“¿πÛ¿∫'¿∫E¿∫[¿∫w¿∫…¿∫”¿∫Ÿ¿∫⁄¿ª*¿ªJ¿ªy¿ªî¿ªö¿ªû¿ªü¿ª∫¿º¿ºF¿ºi¿ºm¿ºn¿º≥¿Ω¿ΩD¿ΩE¿Ωq¿Ωr¿Ωµ¿Ω‹¿ΩÍ¿Ω¿æ¿æZ¿æÖ¿æÕ¿æ›¿æÂ¿æÊ¿ø*¿ø+¿øy¿ø≥¿øÌ¿¿'¿¿q¿¿û¿¿◊¿¿Ô¿¡¿¡¿¡b¿¡~¿¡≠¿¡≈¿¡“¿¬¿¬6¿¬l¿¬Ö¿¬ê¿¬ò¿¬ô¿¬‘¿¬˛¿¬ˇ¿√V¿√W¿√r¿√ó¿√∂¿√„¿ƒ
¿ƒ¿ƒ:¿ƒw¿ƒ§¿ƒÀ¿ƒ÷¿ƒÂ¿≈¿≈A¿≈~¿≈â¿≈ë¿≈ô¿≈ù¿≈û¿≈¬¿≈√¿≈œ¿≈Î¿∆?¿∆É¿∆±¿∆ª¿«¿«d¿«π¿«Û¿«˚¿»¿»N¿»R¿»S¿»Ä¿»Ú¿…D¿…ì¿…†¿…Ì¿ ;¿ à¿ ÷¿À¿ÀE¿À¢¿ÀÈ¿ÀÍ¿Ã¿Ã¿ÃM¿Ã^¿Ã”¿ÃÁ¿Õ
¿Õ@¿Õ`¿Õx¿Õñ¿Õﬁ¿ÕÍ¿ÕÚ¿Õ¯¿Õ˘¿ŒF¿Œá¿Œù¿Œ±¿œ¿œM¿œ†¿œ∞¿œÃ¿œË¿–¿–S¿–ã¿–ë¿–®¿–¥¿–·¿—¿—:¿—Z¿—r¿—ê¿—–¿—‹¿—‰¿—Í¿—Î¿—ˇ¿“¿“¿“"¿“à¿“Ï¿“¿“Ò¿”>¿”r¿”á¿”’¿”÷¿‘$¿‘r¿‘ì¿‘®¿‘Á¿‘Ë¿’ ¿’5¿’x¿’y¿’°¿’¡¿’¬¿÷¿÷X¿÷v¿÷w¿÷î¿◊¿◊¿◊;¿◊I¿◊O¿◊k¿◊ö¿◊À¿◊Ÿ¿◊ﬂ¿ÿ¿ÿo¿ÿ|¿ÿﬁ¿ÿ‰¿ÿË¿ÿÈ¿Ÿ¿Ÿ.¿Ÿí¿ŸΩ¿Ÿ ¿Ÿ˘¿⁄¿⁄¿⁄!¿⁄"¿⁄J¿⁄h¿⁄∑¿⁄Œ¿€a¿€n¿€±¿‹¿‹¿‹{¿‹Å¿‹Ö¿‹Ü¿‹¿¿‹€¿›
¿›&¿›?¿›Y¿›Å¿›á¿›ã¿›å¿›∑¿ﬁ¿ﬁ¿ﬁ%¿ﬁt¿ﬁé¿ﬁî¿ﬁò¿ﬁô¿ﬁø¿ﬁË¿ﬂ¿ﬂ?¿ﬂè¿ﬂ∞¿ﬂ˜¿‡;¿‡?¿‡@¿‡_¿‡ä¿‡±¿‡·¿‡ˆ¿·D¿·u¿·ƒ¿·‚¿‚¿‚#¿‚J¿‚†¿‚¸¿„¿„¿„¿„<¿„[¿„z¿„á¿„ª¿„Û¿„˘¿‰¿‰¿‰¿‰0¿‰J¿‰j¿‰â¿‰®¿‰©¿‰ﬁ¿Â¿Â¿Â¿ÂL¿ÂZ¿Â`¿Â•¿Â˜¿Ê¿Ê¿Ê¿Êk¿Ê¿ÁO¿Á´¿Á÷¿Ë¿ËL¿Ëç¿Ëø¿È¿È©¿È√¿ÈÁ¿Í¿Í(¿ÍY¿Íá¿ÍŒ¿Íı¿Î¿Î2¿ÎK¿ÎW¿ÎX¿Î™¿Ïa¿ÏÄ¿Ïô¿Ï•¿Ï¶¿Ï„¿Ì¿Ì"¿Ì/¿Ì}¿Ì´¿Ìƒ¿Ì–¿Ì¿Ì˚¿Ó*¿ÓO¿Óg¿Óq¿Ó˝¿Ô¿Ô¿Ô´¿Ô√¿ÔÕ¿Ô‚¿:¿p¿v¿z¿{¿û¿Ω¿Í¿Ò/¿Òy¿Òò¿Ò˘¿Ú&¿ÚE¿ÚK¿ÚO¿ÚP¿Ú†¿ÚÔ¿Û=¿Ûé¿Û«¿ÛÔ¿Ù&¿ÙE¿Ù\¿Ù±¿Ù˘¿ı¿ıc¿ı±¿ˆ¿ˆ¿ˆ9¿ˆv¿ˆ‹¿ˆ‚¿ˆÊ¿ˆÁ¿˜¿˜*¿˜}¿˜∞¿¯¿¯v¿¯≠¿¯µ¿˘¿˘¿˘!¿˘"¿˘G¿˘ú¿˙¿˙¿˙#¿˙$¿˙U¿˙[¿˙™¿˙›¿˚H¿˚I¿˚U¿˚à¿˚â¿˚‘¿˚’¿˚·¿¸;¿¸¿¸Õ¿¸˛¿˝*¿˝C¿˝^¿˝ï¿˝õ¿˝ú¿˝Ï¿˛;¿˛Ñ¿˛©¿˛—¿˛˙¿ˇ¿ˇ%¿ˇ3¿ˇ9¿ˇ:¿ˇw¿ˇ{¿ˇ|¿ˇà¿ˇ∂¿  ¿ L¿ M¿ Ä¿ ∫¿ æ¿ ø¿¿¿]¿°¿≠¿ƒ¿¿`¿Ø¿˚¿¿!¿'¿(¿t¿à¿é¿Æ¿‘¿Â¿È¿Í¿ˆ¿&¿=¿h¿â¿»¿¸¿$¿*¿.¿/¿\¿u¿ú¿À¿‡¿Ì¿¿¿¿¿Y¿d¿i¿¥¿˙¿¿¿(¿R¿u¿É¿â¿ä¿∫¿»¿Œ¿œ¿·¿4¿<¿@¿A¿M¿n¿ë¿ü¿•¿¶¿∏¿Ÿ¿·¿Â¿Ê¿Ú¿	'¿	(¿	4¿	j¿	¡¿
¿
.¿
V¿
~¿
∂¿
¿¿
Ë¿
È¿¿2¿S¿z¿°¿–¿ˇ¿2¿r¿œ¿Ò¿¿¿N¿É¿∑¿¿	¿¿¿¿`¿a¿ç¿≥¿¥¿¿¿˙¿¿O¿W¿[¿\¿†¿√¿⁄¿Ô¿¿F¿T¿X¿Y¿ú¿ø¿’¿Í¿¿?¿M¿Q¿R¿ó¿∫¿“¿Á¿¿t¿û¿¨¿∞¿±¿≤¿¿¿O¿…¿¿¿¿c¿è¿±¿≤¿–¿¿2¿?¿ñ¿◊¿¿á¿ç¿é¿∆¿˚¿1¿¿†¿Á¿Î¿Ï¿.¿Z¿|¿}¿õ¿—¿˝¿
¿a¿¢¿·¿Á¿Ë¿7¿X¿ß¿Ú¿¿1¿â¿„¿Á¿Ë¿M¿N¿ò¿Í¿Ó¿Ô¿7¿R¿X¿°¿¬¿»¿	¿I¿t¿ò¿¡¿¿˛¿¿¿*¿`¿ú¿Ú¿ ¿ "¿ /¿ \¿ b¿ ô¿ ö¿ ∫¿ “¿ ˘¿!*¿!\¿!É¿!Ø¿!˛¿"	¿"¿"8¿"?¿"C¿"⁄¿"€¿#¿#9¿#à¿#ß¿#≈¿#Ã¿$¿$¿$P¿$ù¿$Ï¿%¿%'¿%K¿%Q¿%U¿%Ã¿%Õ¿&¿&=¿&á¿&°¿&‡¿&Ì¿'!¿''¿'+¿',¿'d¿'ì¿'≥¿(¿(¿(¿(!¿(®¿(©¿)É¿)Ñ¿)‡¿*"¿*\¿*`¿*a¿*Ø¿*Í¿+¿+"¿+#¿+Ö¿+ﬁ¿,¿,¿,¿,¿,~¿,±¿,·¿-¿-.¿-/¿-Z¿-ì¿-Ã¿-Õ¿.S¿.s¿.£¿.…¿.–¿.¯¿.¸¿.˝¿/5¿/m¿/á¿/ö¿/†¿/Ã¿/–¿/—¿0¿0k¿0ñ¿0…¿1¿1_¿1`¿1n¿1ﬂ¿2a¿2Œ¿2œ¿2Ï¿3É¿4&¿4¥¿5E¿5Î¿6E¿6Ë¿7v¿8¿8¿8¿8W¿8¢¿9)¿9*¿9w¿9|¿9}¿9â¿9∞¿9ﬁ¿:¿:¿:e¿:}¿:∫¿:–¿:Î¿;¿;8¿;j¿;π¿;∆¿;ﬁ¿<¿<,¿<T¿<s¿<ù¿<Û¿= ¿=M¿=à¿=ª¿>¿>Z¿>è¿>¿?¿?=¿?N¿?ù¿?œ¿?˙¿@¿@V¿@å¿@∆¿@ı¿A(¿AY¿Aê¿A¡¿AÒ¿B-¿BF¿Bn¿Bô¿Bﬁ¿C¿CT¿C{¿CÆ¿C˚¿DE¿Dä¿D√¿D¯¿E+¿EX¿Eã¿Eæ¿EÔ¿F&¿Fe¿Fœ¿G¿G;¿Gj¿G⁄¿H¿H`¿Hô¿H¡¿H˛¿IM¿IÜ¿I¡¿I¸¿JF¿Jë¿J⁄¿K%¿Kw¿K¨¿KÈ¿L+¿Lx¿L≥¿LÃ¿L„¿L¯¿M¿M¿M+¿M8¿MC¿ML¿MS¿MW¿MX¿Må¿Mí¿M◊¿N#¿N@¿N^¿N¿Nµ¿Nˇ¿OJ¿Of¿O´¿O„¿OÏ¿PR¿P™¿PÀ¿Q%¿Q[¿Q™¿Q¥¿Qº¿QÙ¿Q˙¿RM¿Rù¿RÓ¿S¿Sq¿SÀ¿T@¿TO¿T∞¿T∏¿T˚¿UD¿U_¿U•¿U∞¿Uπ¿Uø¿U¿¿U˜¿V#¿V;¿VV¿Vä¿Vë¿Vï¿Vó¿Vò¿Vœ¿V›¿VÏ¿W
¿W#¿WK¿Wq¿Wá¿Wß¿W≈¿W‚¿W˛¿X¿X=¿XY¿Xu¿Xà¿X£¿X∏¿X—¿XÙ¿Y¿Y2¿YC¿Yi¿Yà¿Y¢¿Yª¿Y‰¿Z¿Z¿Z1¿ZQ¿Zy¿Z≤¿ZÈ¿[¿[>¿[b¿[|¿[ñ¿[∂¿[‹¿\¿\A¿\B¿\ä¿\æ¿\¯¿]$¿]O¿]o¿]è¿]ó¿]™¿]≤¿]≈¿]…¿] ¿]È¿^	¿^%¿^M¿^s¿^ô¿^¡¿^Ÿ¿^¿_¿_¿_5¿_K¿_k¿_ä¿_™¿_«¿_Ï¿`¿`'¿`A¿`q¿`ò¿`∑¿`‰¿a	¿a%¿aC¿aa¿a~¿a°¿a—¿aˇ¿b(¿b]¿b~¿b¢¿b¬¿b›¿bﬁ¿bÍ¿c&¿cA¿cY¿cy¿c´¿cŸ¿d¿d+¿dG¿da¿d{¿dï¿dØ¿d«¿dÂ¿e¿e3¿eO¿es¿e±¿e”¿eÈ¿f¿f<¿fj¿fä¿f∏¿fﬁ¿f˛¿g ¿gB¿gd¿gñ¿g»¿g¯¿h6¿hj¿hî¿hº¿h‰¿i¿i¿i¿i¿i¿im¿i~¿iò¿i∫¿iÓ¿j¿j>¿j\¿jx¿jî¿j∞¿jÃ¿jÊ¿k¿k.¿kX¿kv¿kú¿k‹¿l ¿l¿l@¿lo¿lü¿l«¿l˜¿m¿m;¿m_¿mÉ¿mß¿m€¿n¿nM¿nÉ¿nØ¿n„¿o¿o1¿o^¿ob¿od¿oe¿oó¿o¥¿oÕ¿oÍ¿p	¿p1¿pL¿pR¿pS¿pi¿pÜ¿p•¿p–¿pÊ¿pÁ¿pÛ¿q9¿q;¿q<¿qò¿qÒ¿qÚ¿q˛¿r¿r*¿rD¿rÜ¿rå¿rê¿rë¿rù¿r‘¿r˙¿s*¿sl¿sr¿ss¿s£¿s·¿sÁ¿sÎ¿sÏ¿s¯¿t¿tG¿t\¿t`¿ta¿t”¿t‘¿t˝¿u ¿u!¿u-¿uc¿ud¿up¿uò¿uΩ¿v¿v;¿v?¿v@¿vL¿vq¿võ¿v»¿v‹¿v‚¿w¿w¿w%¿wQ¿we¿wk¿w´¿w›¿x¿xs¿xw¿xx¿xÑ¿xò¿x›¿y¿y)¿y/¿yg¿yŒ¿y“¿y”¿yﬂ¿z¿z¿z#¿z%¿z&¿zV¿zu¿zè¿z§¿z∏¿z–¿zÓ¿{¿{[¿{£¿{„¿{Ó¿{Ô¿|L¿|_¿|`¿|l¿|„¿}¿}.¿}B¿}í¿}ò¿}¥¿}∆¿}Ÿ¿}Í¿~¿~¿~#¿~8¿~>¿~B¿~D¿~E¿~ó¿~æ¿~¬¿¿Y¿©¿Ã¿–¿Ä¿Äg¿Ä≤¿Ä˛¿ÅK¿Åö¿Åœ¿Å”¿Ç!¿ÇW¿Çv¿Çè¿Çê¿Çπ¿Ç∫¿É¿ÉD¿ÉE¿Éê¿É—¿É“¿Ñ	¿Ñ¿ÑW¿Ñé¿Ñï¿Ñô¿Ñõ¿Ñú¿ÑÏ¿ÑÌ¿Ö¿ÖO¿ÖP¿Ö\¿Öá¿Öà¿Öî¿Ö˝¿Ü	¿Üü¿Ü°¿Ü¢¿ÜÒ¿á@¿át¿á¶¿á⁄¿á€¿áÁ¿à¿à¿à¿à`¿à†¿àˆ¿â"¿â*¿â0¿âZ¿â^¿â_¿âk¿â≠¿ä¿ä]¿äç¿äï¿äõ¿ä⁄¿äﬁ¿ä‡¿ä·¿ã,¿ãw¿ã∏¿ãÈ¿å¿å¿å)¿åT¿åU¿åa¿å¢¿å˘¿ç¿çy¿çÄ¿çÑ¿çÖ¿çë¿ç”¿é*¿éë¿é™¿é¿é˜¿é˚¿é¸¿è¿è?¿èñ¿è˝¿ê¿ê:¿ê}¿êÑ¿êà¿êä¿êã¿ê‘¿ë ¿ë?¿ë@¿ëf¿ëg¿ës¿ëû¿ëü¿ë´¿ëÏ¿í¿í?¿íã¿í‡¿íÁ¿íÎ¿í˜¿ì9¿ìR¿ìä¿ì÷¿î+¿î2¿î6¿î8¿î9¿îÖ¿î–¿îË¿ï¿ï%¿ï:¿ïU¿ïZ¿ï[¿ïÅ¿ïÇ¿ïé¿ïπ¿ï∫¿ï∆¿ñ¿ñ ¿ñZ¿ña¿ñe¿ñf¿ñr¿ñ¥¿ñÕ¿ó¿ó,¿ó3¿ó7¿ó9¿ó:¿óÖ¿óí¿ó¬¿óÙ¿óı¿ò¿ò,¿ò-¿ò9¿òö¿ò¶¿òË¿ô¿ô-¿ôT¿ô[¿ô_¿ôa¿ôb¿ô≤¿ô≥¿ôÏ¿ö ¿öi¿öj¿öì¿öº¿öΩ¿ö…¿öÛ¿õI¿õx¿õ|¿õ}¿õâ¿õ ¿ú¿ú=¿úD¿úH¿úI¿úU¿úó¿úœ¿ù¿ù¿ù¿ù¿ù¿ùi¿ùñ¿ùô¿ùÊ¿û¿ûK¿ûí¿ûì¿ûº¿û‘¿û’¿û·¿ü0¿ü1¿ü=¿ü~¿üì¿ü–¿†f¿†j¿†k¿†w¿†π¿†Œ¿°¿°£¿°ß¿°©¿°™¿°Ù¿¢B¿¢T¿¢Å¿¢»¿¢…¿¢Ù¿£ ¿£!¿£-¿£W¿£≤¿£„¿£Á¿£Ë¿£Ù¿§n¿§o¿§{¿§¯¿§˙¿§˚¿•L¿•ß¿•È¿•Í¿¶¿¶P¿¶Q¿¶ê¿¶¡¿¶‡¿ß¿ßF¿ßg¿ßä¿ßã¿ß°¿®¿®j¿®q¿®u¿®v¿®Ç¿®∏¿®Ù¿©¿©¿©6¿©S¿©e¿©⁄¿©„¿©È¿©Í¿™5¿™q¿™Ñ¿™ä¿™ ¿™Á¿™˘¿´¿´à¿´é¿´è¿´™¿´∫¿´”¿´˙¿¨¿¨\¿¨Ñ¿¨ç¿¨î¿¨ò¿¨ô¿¨•¿¨˝¿¨ˇ¿≠ ¿≠f¿≠Ñ¿≠î¿≠∫¿≠ﬂ¿≠‰¿≠Â¿Æ¿Æ0¿Æu¿Æv¿Æ°¿Æ¢¿ÆÏ¿Ø¿Ø:¿Øe¿Øß¿ØŒ¿Ø’¿∞$¿∞}¿∞Å¿∞Ç¿∞…¿∞„¿±¿±H¿±å¿±ì¿±≈¿≤"¿≤&¿≤'¿≤3¿≤i¿≤•¿≤ƒ¿≤≈¿≥$¿≥N¿≥Ñ¿≥•¿≥À¿≥Ï¿¥2¿¥z¿¥É¿¥â¿¥ä¿¥·¿¥˛¿µ¿µr¿µ{¿µÅ¿µÇ¿µÕ¿∂&¿∂P¿∂c¿∂i¿∂Ã¿∂È¿∂˚¿∑i¿∑r¿∑x¿∑y¿∑±¿∑≤¿∏¿∏8¿∏Z¿∏ó¿∏∂¿∏◊¿∏‚¿π)¿πH¿πi¿πî¿πü¿πß¿π≠¿πÆ¿π‡¿∫¿∫N¿∫O¿∫à¿∫∂¿∫È¿∫Í¿ª6¿ªr¿ªØ¿ªÔ¿º¿º¿º=¿ºU¿ºã¿ºµ¿º¿¿º…¿ºœ¿º–¿ºÎ¿º˚¿Ωe¿Ωl¿Ωp¿Ωq¿Ω}¿Ωª¿ΩΩ¿Ωæ¿æ:¿æê¿æë¿æ≤¿ø,¿ø-¿ø9¿ø§¿ø‡¿øˇ¿¿ ¿¿K¿¿§¿¿Œ¿¿·¿¿Á¿¿Ë¿¡&¿¡X¿¡è¿¡∆¿¡«¿¬r¿¬ö¿¬“¿√]¿√e¿√ò¿√ô¿√¥¿√ƒ¿ƒ.¿ƒ5¿ƒ9¿ƒ:¿ƒF¿ƒ•¿ƒß¿ƒ®¿≈¿≈T¿≈U¿≈v¿≈w¿≈©¿≈…¿≈ ¿≈˛¿∆5¿∆U¿∆Å¿∆è¿∆ï¿∆¡¿«¿«l¿« ¿»-¿»L¿»o¿»ã¿»ë¿»ï¿»ñ¿»¢¿»’¿…¿…¿…a¿…±¿…’¿…„¿…È¿…Í¿ ¿ ?¿ [¿ a¿ b¿ ß¿À	¿À
¿Àj¿Àò¿À≥¿Ã¿ÃW¿ÃÖ¿Ã≤¿Ã≥¿Ã«¿Ã◊¿Õ)¿Õ0¿Õb¿Õã¿ÕØ¿Õµ¿Õπ¿Õ∫¿Õ∆¿Œ¿Œ¿Œ¿ŒK¿Œk¿Œl¿Œç¿Œé¿Œö¿Œ‚¿Œ˝¿œ¿œ*¿œ@¿œé¿œ§¿œ≠¿œ¥¿œ∏¿œπ¿œ≈¿–¿–¿–¿–Q¿–u¿–v¿–ó¿–ò¿–§¿–Ì¿—¿—9¿—F¿—o¿—u¿—y¿—z¿—Ü¿—Î¿—Ì¿—Ó¿“#¿“6¿“Ä¿“Å¿“∑¿“ª¿”
¿”O¿”ù¿”Í¿”˘¿”˝¿‘H¿‘ì¿‘∆¿‘˙¿’¿’1¿’O¿’n¿’t¿’u¿’¶¿’º¿’Ω¿’ˇ¿÷)¿÷*¿÷c¿÷i¿÷π¿◊¿◊0¿◊6¿◊É¿◊ô¿◊«¿◊»¿◊‘¿ÿ¿ÿ ¿ÿ!¿ÿe¿ÿ≥¿ÿÌ¿Ÿ¿Ÿ¿ŸS¿Ÿ¢¿Ÿ∞¿Ÿ˙¿Ÿ˚¿⁄!¿⁄=¿⁄A¿⁄B¿⁄h¿⁄Ñ¿⁄à¿⁄â¿⁄∑¿⁄‘¿⁄‚¿⁄Ë¿€¿€*¿€0¿€i¿€Ö¿€´¿€≥¿€∑¿€∏¿€…¿‹¿‹¿‹¿‹¿‹Y¿‹]¿‹^¿‹j¿‹¿‹ñ¿‹»¿‹Ï¿›	¿›¿›¿›G¿›K¿›L¿›X¿›ê¿›∂¿›Î¿ﬁ¿ﬁ3¿ﬁ_¿ﬁe¿ﬁi¿ﬁj¿ﬁv¿ﬁâ¿ﬁ∂¿ﬁ‘¿ﬁÈ¿ﬁÌ¿ﬁÓ¿ﬁ˙¿ﬂ!¿ﬂ5¿ﬂ]¿ﬂÎ¿‡y¿‡Ç¿‡ù¿‡§¿‡®¿‡™¿‡´¿‡¯¿·¿·%¿·P¿·`¿·a¿·Ä¿·Å¿·ƒ¿·◊¿·ÿ¿‚¿‚E¿‚F¿‚q¿‚w¿‚π¿‚–¿‚È¿‚˚¿„¿„!¿„'¿„(¿„Z¿„[¿„|¿„ä¿„ê¿„ë¿„‚¿‰¿‰<¿‰o¿‰u¿‰ã¿‰™¿‰Æ¿‰Ø¿‰Ë¿‰Ó¿Â>¿ÂL¿ÂR¿Âé¿Âú¿Âµ¿Â»¿ÂŒ¿Âœ¿Ê¿Ê¿Ê¿Ê4¿Ê:¿Ê;¿ÊT¿ÊX¿ÊY¿Êë¿Êó¿Ê·¿Ê˜¿Ê˝¿Á9¿ÁG¿Á`¿Ás¿Áy¿Áz¿Á¨¿Á≠¿Á“¿ÁÌ¿ÁÛ¿ÁÙ¿Ë¿Ë¿Ë¿Ë:¿ËK¿Ë^¿Ëo¿Ës¿Ët¿ËÄ¿Ëñ¿Ë∂¿Ë∫¿Ëº¿ËΩ¿Ë˛¿È6¿È7¿Èn¿È§¿È•¿ÈÚ¿Í¿Í¿Íe¿ÍÇ¿Í†¿Í∆¿Íı¿Î¿Î¿Î&¿ÎH¿ÎV¿ÎW¿Îq¿Îá¿Î†¿Î¿¿Î’¿Î€¿ÎÚ¿Ï¿Ï¿Ï,¿ÏM¿Ï|¿Ïì¿Ïõ¿ÏØ¿Ï∑¿Ï ¿Ïœ¿Ï—    !Ä•  Ä∫Ä— Ä÷ÄÎÄÌÄ˚Ä˛ Å*ÅOÅQ  Å{ Å¢Å∏Å∫  Å„  Ç  Ç5  ÇL  Çd  Çà  Çù  Ç¥  ÇÕ  Ç‚  É	  É&  ÉA  É`  Éy  Éñ  É±  É’  Éˆ  Ñ  Ñ.  ÑG  Ñ[  Ñ  Ñù  Ñº  ÑÿÑˇÖk â>¢]í«âÇ/// A controller for an editable text field.
///
/// Whenever the user modifies a text field with an associated
/// [TextEditingController], the text field updates [value] and the controller
/// notifies its listeners. Listeners can then read the [text] and [selection]
/// properties to learn what the user has typed or how the selection has been
/// updated.
///
/// Similarly, if you modify the [text] or [selection] properties, the text
/// field will be notified and will update itself appropriately.
///
/// A [TextEditingController] can also be used to provide an initial value for a
/// text field. If you build a text field with a controller that already has
/// [text], the text field will use that text as its initial value.
///
/// The [value] (as well as [text] and [selection]) of this controller can be
/// updated from within a listener added to this controller. Be aware of
/// infinite loops since the listener will also be notified of the changes made
/// from within itself. Modifying the composing region from within a listener
/// can also have a bad interaction with some input methods. Gboard, for
/// example, will try to restore the composing region of the text if it was
/// modified programmatically, creating an infinite loop of communications
/// between the framework and the input method. Consider using
/// [TextInputFormatter]s instead for as-you-type text modification.
///
/// If both the [text] or [selection] properties need to be changed, set the
/// controller's [value] instead.
///
/// Remember to [dispose] of the [TextEditingController] when it is no longer
/// needed. This will ensure we discard any resources used by the object.
/// {@tool dartpad}
/// This example creates a [TextField] with a [TextEditingController] whose
/// change listener forces the entered text to be lower case and keeps the
/// cursor at the end of the input.
///
/// ** See code in examples/api/lib/widgets/editable_text/text_editing_controller.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [TextField], which is a Material Design text field that can be controlled
///    with a [TextEditingController].
///  * [EditableText], which is a raw region of editable text that can be
///    controlled with a [TextEditingController].
///  * Learn how to use a [TextEditingController] in one of our [cookbook recipes](https://flutter.dev/docs/cookbook/forms/text-field-changes#2-use-a-texteditingcontroller). ì	Å ì°ì∂Äè/// Creates a controller for an editable text field.
///
/// This constructor treats a null [text] argument as if it were the empty
/// string.ìπì¬  ìœì‘îì‚ì˚ì⁄ì’ì›ì‰ìÙìıì˝îîîîîîÇ]î¯î˘ïÄª/// Creates a controller for an editable text field from an initial [TextEditingValue].
///
/// This constructor treats a null [value] argument as if it were
/// [TextEditingValue.empty].ïï  &ï"ï(ïzñLï\ï@ï8ï2ï;ïCïDïIïJïSïTï_ïdïeïÑïöïõï†ï‘ï’ïÊï◊ï‹ï›ïÁñ%ñUñZñzñañ[ñdñtñu ñÄLñπ+/// The current string the user is editing.   ñœÇ·ô Ç/// Setting this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this value should only be set between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.
///
/// This property can be set from a listener added to this
/// [TextEditingController]; however, one should not also set [selection]
/// in a separate statement. To change both the [text] and the [selection]
/// change the controller's [value]. ôô   ô¥Åtôƒ  ô ô‹  ô¥ôµ†Ä»†ΩÄê/// The currently selected [text].
///
/// If the selection is collapsed, then this property gives the offset of the
/// cursor within the text.   †›ÑX£äÇê/// Setting this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this value should only be set between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.
///
/// This property can be set from a listener added to this
/// [TextEditingController]; however, one should not also set [text]
/// in a separate statement. To change both the [text] and the [selection]
/// change the controller's [value].
///
/// If the new selection is of non-zero length, or is outside the composing
/// range, the composing range is cleared. £î££   õ,Ñ‚ú Ä¬/// Builds [TextSpan] from current editing value.
///
/// By default makes text in composing range appear as underlined. Descendants
/// can override this method to customize appearance of text. úú&  ú.ú:  úAúP   •9Ç<ßÅƒ/// Set the [value] to empty.
///
/// After calling this function, [text] will be the empty string and the
/// selection will be collapsed at zero offset.
///
/// Calling this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this method should only be called between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.   ßyÇf©ëÅ˛/// Set the composing region to an empty range.
///
/// The composing region is the range of text that is still being composed.
/// Calling this function indicates that the user is done composing that
/// region.
///
/// Calling this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this method should only be called between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.   ©„ÄŒ™,A/// Check that the [selection] is inside of the bounds of [text]. ™H™W   ™µÄ‰™˝@/// Check that the [selection] is inside of the composing range. ´´-    ´ùÖÆ≠;Åó/// Toolbar configuration for [EditableText].
///
/// Toolbar is a context menu that will show up when user right click or long
/// press the [EditableText]. It includes several options: cut, copy, paste,
/// and select all.
///
/// [EditableText] and its derived widgets have their own default [ToolbarOptions].
/// Create a custom [ToolbarOptions] if you want explicit control over the toolbar
/// option. ≠NÅr ≠÷≠‰{/// Create a toolbar configuration with given options.
///
/// All options default to false if they are not explicitly set.≠Î≠Ò  ÆÆ  ÆÆ  Æ0Æ6  ≠˜ÆÆ%ÆAÆOÆUÆbÆ[ÆVÆ^ÆlÆrÆ~ÆwÆsÆzÆàÆéÆúÆïÆèÆòÆ¶Æ¨ÆæÆ∑Æ≠Æ∫ÆƒnØ.X/// Whether to show copy option in toolbar.
///
/// Defaults to false. Must not be null. Ø7ÄƒØ¯Ä´/// Whether to show cut option in toolbar.
///
/// If [EditableText.readOnly] is set to true, cut will be disabled regardless.
///
/// Defaults to false. Must not be null. ∞ Ä ∞≈ÄØ/// Whether to show paste option in toolbar.
///
/// If [EditableText.readOnly] is set to true, paste will be disabled regardless.
///
/// Defaults to false. Must not be null. ∞œy±?^/// Whether to show select all option in toolbar.
///
/// Defaults to false. Must not be null.    ±èÇØ±ï  ±£' ±©±≤ ±≥	±π  ±æ
±ƒ   ±¯Å÷≤ <≤<≥Õ≤1≤;≤2≤B≤K≤V≤L≤U≤f≤o≤z≤p≤y≤ä≤ì≤°≤î≤ù≤Æ≤∑≤ƒ≤∏≤¡≤“≤€≤È≤‹≤Â≤ˆ≤ˇ≥
≥ ≥	≥≥#≥.≥$≥-≥>≥G≥U≥H≥Q≥b≥k≥x≥l≥u≥Ü≥è≥ù≥ê≥ô≥™≥≥≥æ≥¥≥Ω¥¥!  ¥)¥6     ¥@á©¥F  ¥y`¥î¥ï¥•  	¥™¥Æ¥Ø¥∞¥◊¥±¥∫¥ª¥÷¥‹Å¶¥˜¥¯¥˘ ¥˙µ   µµ  µ#µ)µ?µ*µ4µ5µHµNµrµdµOµYµZµ^µ_µgµ{µÅ∂N∂ÄµÇ∂K∂L∂M∂P∂Ü∂ì  ∂£ ∂π  ∑Ä∑Ñ ∑ô ∂»(∂€  ∂ﬁ∂Ê  ∂»∂…∂Ù<∑  ∑∑  ∂Ù∂ı∑üÑH∑≤  ∑¥∑º  ∑ü∑† ªÎ¿ Û¿ iÚÆ /// A basic text input field.
///
/// This widget interacts with the [TextInput] service to let the user edit the
/// text it contains. It also provides scrolling, selection, and cursor
/// movement. This widget does not provide any focus management (e.g.,
/// tap-to-focus).
///
/// ## Handling User Input
///
/// Currently the user may change the text this widget contains via keyboard or
/// the text selection menu. When the user inserted or deleted text, you will be
/// notified of the change and get a chance to modify the new text value:
///
/// * The [inputFormatters] will be first applied to the user input.
///
/// * The [controller]'s [TextEditingController.value] will be updated with the
///   formatted result, and the [controller]'s listeners will be notified.
///
/// * The [onChanged] callback, if specified, will be called last.
///
/// ## Input Actions
///
/// A [TextInputAction] can be provided to customize the appearance of the
/// action button on the soft keyboard for Android and iOS. The default action
/// is [TextInputAction.done].
///
/// Many [TextInputAction]s are common between Android and iOS. However, if a
/// [textInputAction] is provided that is not supported by the current
/// platform in debug mode, an error will be thrown when the corresponding
/// EditableText receives focus. For example, providing iOS's "emergencyCall"
/// action when running on an Android device will result in an error when in
/// debug mode. In release mode, incompatible [TextInputAction]s are replaced
/// either with "unspecified" on Android, or "default" on iOS. Appropriate
/// [textInputAction]s can be chosen by checking the current platform and then
/// selecting the appropriate action.
///
/// {@template flutter.widgets.EditableText.lifeCycle}
/// ## Lifecycle
///
/// Upon completion of editing, like pressing the "done" button on the keyboard,
/// two actions take place:
///
///   1st: Editing is finalized. The default behavior of this step includes
///   an invocation of [onChanged]. That default behavior can be overridden.
///   See [onEditingComplete] for details.
///
///   2nd: [onSubmitted] is invoked with the user's input value.
///
/// [onSubmitted] can be used to manually move focus to another input widget
/// when a user finishes with the currently focused input widget.
///
/// When the widget has focus, it will prevent itself from disposing via
/// [AutomaticKeepAliveClientMixin.wantKeepAlive] in order to avoid losing the
/// selection. Removing the focus will allow it to be disposed.
/// {@endtemplate}
///
/// Rather than using this widget directly, consider using [TextField], which
/// is a full-featured, material-design text input field with placeholder text,
/// labels, and [Form] integration.
///
/// ## Text Editing [Intent]s and Their Default [Action]s
///
/// This widget provides default [Action]s for handling common text editing
/// [Intent]s such as deleting, copying and pasting in the text field. These
/// [Action]s can be directly invoked using [Actions.invoke] or the
/// [Actions.maybeInvoke] method. The default text editing keyboard [Shortcuts]
/// also use these [Intent]s and [Action]s to perform the text editing
/// operations they are bound to.
///
/// The default handling of a specific [Intent] can be overridden by placing an
/// [Actions] widget above this widget. See the [Action] class and the
/// [Action.overridable] constructor for more information on how a pre-defined
/// overridable [Action] can be overridden.
///
/// ### Intents for Deleting Text and Their Default Behavior
///
/// | **Intent Class**                 | **Default Behavior when there's selected text**      | **Default Behavior when there is a [caret](https://en.wikipedia.org/wiki/Caret_navigation) (The selection is [TextSelection.collapsed])**  |
/// | :------------------------------- | :--------------------------------------------------- | :----------------------------------------------------------------------- |
/// | [DeleteCharacterIntent]          | Deletes the selected text                            | Deletes the user-perceived character before or after the caret location. |
/// | [DeleteToNextWordBoundaryIntent] | Deletes the selected text and the word before/after the selection's [TextSelection.extent] position | Deletes from the caret location to the previous or the next word boundary |
/// | [DeleteToLineBreakIntent]        | Deletes the selected text, and deletes to the start/end of the line from the selection's [TextSelection.extent] position | Deletes from the caret location to the logical start or end of the current line |
///
/// ### Intents for Moving the [Caret](https://en.wikipedia.org/wiki/Caret_navigation)
///
/// | **Intent Class**                                                                     | **Default Behavior when there's selected text**                  | **Default Behavior when there is a caret ([TextSelection.collapsed])**  |
/// | :----------------------------------------------------------------------------------- | :--------------------------------------------------------------- | :---------------------------------------------------------------------- |
/// | [ExtendSelectionByCharacterIntent](`collapseSelection: true`)                       | Collapses the selection to the logical start/end of the selection | Moves the caret past the user-perceived character before or after the current caret location.  |
/// | [ExtendSelectionToNextWordBoundaryIntent](`collapseSelection: true`)                | Collapses the selection to the word boundary before/after the selection's [TextSelection.extent] position | Moves the caret to the previous/next word boundary.  |
/// | [ExtendSelectionToNextWordBoundaryOrCaretLocationIntent](`collapseSelection: true`) | Collapses the selection to the word boundary before/after the selection's [TextSelection.extent] position, or [TextSelection.base], whichever is closest in the given direction | Moves the caret to the previous/next word boundary.  |
/// | [ExtendSelectionToLineBreakIntent](`collapseSelection: true`)                       | Collapses the selection to the start/end of the line at the selection's [TextSelection.extent] position | Moves the caret to the start/end of the current line .|
/// | [ExtendSelectionVerticallyToAdjacentLineIntent](`collapseSelection: true`)          | Collapses the selection to the position closest to the selection's [TextSelection.extent], on the previous/next adjacent line | Moves the caret to the closest position on the previous/next adjacent line. |
/// | [ExtendSelectionToDocumentBoundaryIntent](`collapseSelection: true`)                | Collapses the selection to the start/end of the document | Moves the caret to the start/end of the document. |
///
/// #### Intents for Extending the Selection
///
/// | **Intent Class**                                                                     | **Default Behavior when there's selected text**                  | **Default Behavior when there is a caret ([TextSelection.collapsed])**  |
/// | :----------------------------------------------------------------------------------- | :--------------------------------------------------------------- | :---------------------------------------------------------------------- |
/// | [ExtendSelectionByCharacterIntent](`collapseSelection: false`)                       | Moves the selection's [TextSelection.extent] past the user-perceived character before/after it |
/// | [ExtendSelectionToNextWordBoundaryIntent](`collapseSelection: false`)                | Moves the selection's [TextSelection.extent] to the previous/next word boundary |
/// | [ExtendSelectionToNextWordBoundaryOrCaretLocationIntent](`collapseSelection: false`) | Moves the selection's [TextSelection.extent] to the previous/next word boundary, or [TextSelection.base] whichever is closest in the given direction | Moves the selection's [TextSelection.extent] to the previous/next word boundary. |
/// | [ExtendSelectionToLineBreakIntent](`collapseSelection: false`)                       | Moves the selection's [TextSelection.extent] to the start/end of the line |
/// | [ExtendSelectionVerticallyToAdjacentLineIntent](`collapseSelection: false`)          | Moves the selection's [TextSelection.extent] to the closest position on the previous/next adjacent line |
/// | [ExtendSelectionToDocumentBoundaryIntent](`collapseSelection: false`)                | Moves the selection's [TextSelection.extent] to the start/end of the document |
/// | [SelectAllTextIntent]  | Selects the entire document |
///
/// ### Other Intents
///
/// | **Intent Class**                        | **Default Behavior**                                 |
/// | :-------------------------------------- | :--------------------------------------------------- |
/// | [DoNothingAndStopPropagationTextIntent] | Does nothing in the input field, and prevents the key event from further propagating in the widget tree. |
/// | [ReplaceTextIntent]                     | Replaces the current [TextEditingValue] in the input field's [TextEditingController], and triggers all related user callbacks and [TextInputFormatter]s. |
/// | [UpdateSelectionIntent]                 | Updates the current selection in the input field's [TextEditingController], and triggers the [onSelectionChanged] callback. |
/// | [CopySelectionTextIntent]               | Copies or cuts the selected text into the clipboard |
/// | [PasteTextIntent]                       | Inserts the current text in the clipboard after the caret location, or replaces the selected text if the selection is not collapsed. |
///
/// ## Gesture Events Handling
///
/// This widget provides rudimentary, platform-agnostic gesture handling for
/// user actions such as tapping, long-pressing and scrolling when
/// [rendererIgnoresPointer] is false (false by default). To tightly conform
/// to the platform behavior with respect to input gestures in text fields, use
/// [TextField] or [CupertinoTextField]. For custom selection behavior, call
/// methods such as [RenderEditable.selectPosition],
/// [RenderEditable.selectWord], etc. programmatically.
///
/// {@template flutter.widgets.editableText.showCaretOnScreen}
/// ## Keep the caret visible when focused
///
/// When focused, this widget will make attempts to keep the text area and its
/// caret (even when [showCursor] is `false`) visible, on these occasions:
///
///  * When the user focuses this text field and it is not [readOnly].
///  * When the user changes the selection of the text field, or changes the
///    text when the text field is not [readOnly].
///  * When the virtual keyboard pops up.
/// {@endtemplate}
///
/// {@template flutter.widgets.editableText.accessibility}
/// ## Troubleshooting Common Accessibility Issues
///
/// ### Customizing User Input Accessibility Announcements
///
/// To customize user input accessibility announcements triggered by text
/// changes, use [SemanticsService.announce] to make the desired
/// accessibility announcement.
///
/// On iOS, the on-screen keyboard may announce the most recent input
/// incorrectly when a [TextInputFormatter] inserts a thousands separator to
/// a currency value text field. The following example demonstrates how to
/// suppress the default accessibility announcements by always announcing
/// the content of the text field as a US currency value:
/// ```dart
/// onChanged: (String newText) {
///   if (newText.isNotEmpty) {
///     SemanticsService.announce('\$' + newText, Directionality.of(context));
///   }
/// }
/// ```
///
/// {@endtemplate}
///
/// See also:
///
///  * [TextField], which is a full-featured, material-design text input field
///    with placeholder text, labels, and [Form] integration. ¿ jôl ¿ o¿ oÑº/// Creates a basic text input control.
///
/// The [maxLines] property can be set to null to remove the restriction on
/// the number of lines. By default, it is one, meaning this is a single-line
/// text field. [maxLines] must be null or greater than zero.
///
/// If [keyboardType] is not set or is null, its value will be inferred from
/// [autofillHints], if [autofillHints] is not empty. Otherwise it defaults to
/// [TextInputType.text] if [maxLines] is exactly one, and
/// [TextInputType.multiline] if [maxLines] is null or greater than one.
///
/// The text cursor is not shown if [showCursor] is false or if [showCursor]
/// is null (the default) and [readOnly] is true.
///
/// The [controller], [focusNode], [obscureText], [autocorrect], [autofocus],
/// [showSelectionHandles], [enableInteractiveSelection], [forceLine],
/// [style], [cursorColor], [cursorOpacityAnimates],[backgroundCursorColor],
/// [enableSuggestions], [paintCursorAboveText], [selectionHeightStyle],
/// [selectionWidthStyle], [textAlign], [dragStartBehavior], [scrollPadding],
/// [dragStartBehavior], [toolbarOptions], [rendererIgnoresPointer],
/// [readOnly], and [enableIMEPersonalizedLearning] arguments must not be null.@¿ o	¿ o  ¿ o#¿ o2  ¿ oA¿ oP  ¿ o^¿ od  ¿ oy¿ o  ¿ oú¿ o¢  ¿ o∫¿ o¿  ¿ o◊ ¿ oÈ  ¿ o˝ ¿ p  ¿ p#¿ p)  ¿ pF¿ pU  ¿ p_¿ pl  ¿ p{¿ pä  ¿ pö#¿ p©  ¿ p√ ¿ p…  ¿ pÈ¿ pÔ  ¿ q¿ q  ¿ q¿ q  ¿ q,¿ q2  ¿ qC¿ qI  ¿ qV¿ q\  ¿ qp¿ qv  ¿ qã¿ që  ¿ q®+¿ qÆ  ¿ qŸ¿ qﬂ  ¿ qı¿ q¸  ¿ r!¿ r  ¿ r2¿ r8  ¿ rK¿ rQ  ¿ rg¿ rw  ¿ rà¿ ré  ¿ r¢1¿ r®  ¿ rŸ¿ rﬂ  ¿ rÌ¿ rÛ  ¿ s	¿ s  ¿ s¿ s%  ¿ s=¿ sC  ¿ sZ¿ s`  ¿ s|)¿ só  ¿ s´¿ s±  ¿ s¡#¿ s«  ¿ sÍ¿ s  ¿ t¿ t  ¿ t¿ t#  ¿ t4"¿ t:  ¿ t\¿ tb  ¿ ts!¿ ty  ¿ tö3¿ t†  ¿ t”1¿ tŸ  ¿ u
/¿ u  ¿ u?*¿ uE  ¿ uo0¿ uu  ¿ u• ¿ u¨  ¿ uÀ¿ u—  ¿ uÊ¿ uÏ  ¿ u˛ ¿ v  ¿ v$¿ v5  ¿ vH%¿ vN  ¿ vs¿ vy  ¿ vå!¿ ví  ¿ v≥¿ vπ  ¿ vÀ¿ v—  ¿ v‰¿ vÍ  ¿ w)¿ w  Å´¿ on¿ oì¿ oØ¿ oÕ¿ p<¿ p‘¿ p›¿ pﬁ¿ q<¿ qe¿ qÅ¿ qæ¿ qÃ¿ qÕ¿ qÍ¿ r'¿ rº¿ rŒ¿ rœ¿ sﬂ¿ s˝¿ tQ¿ tè¿ t∂¿ t∏¿ tπ¿ t«¿ t»¿ tÓ¿ t¿ tÒ¿ t˛¿ tˇ¿ u¿ u%¿ u/¿ u0¿ u3¿ u8¿ u4¿ uY¿ uc¿ ud¿ uà¿ uô¿ uö¿ v]¿ vk¿ vl¿ vc¿ vj¿ vd¿ v†¿ v§¿ v•¿ v˚¿ w*¿ w7¿ w=¿ wP¿ wI¿ w>¿ wL¿ wZ¿ w`¿ wr¿ wk¿ wa¿ wn¿ w|¿ wÇ¿ wø¿ wû¿ wñ¿ wÉ¿ wô¿ wª¿ w°¿ w≥¿ w¥¿ wæ¿ w…¿ wœ¿ w„¿ w‹¿ w–¿ wﬂ¿ wÌ¿ wÛ¿ x¿ x ¿ wÙ¿ x¿ x!¿ x¿ x3¿ x#¿ x6¿ xw¿ xC¿ x^¿ x7¿ xE¿ xT¿ xU¿ x`¿ xo¿ xp¿ xë¿ xÅ¿ x£¿ xì¿ x¶¿ xÁ¿ x≥¿ xŒ¿ xß¿ xµ¿ xƒ¿ x≈¿ x–¿ xﬂ¿ x‡¿ xÒ¿ x˜¿ y¿ y
¿ x¯¿ y¿ y¿ y!¿ y>¿ y7¿ y"¿ y:¿ yH¿ yN¿ y_¿ yX¿ yO¿ y[¿ yi¿ yo¿ yÅ¿ yz¿ yp¿ y}¿ yã¿ yë¿ yü¿ yò¿ yí¿ yõ¿ y©¿ yØ¿ y√¿ yº¿ y∞¿ yø¿ yÕ¿ y”¿ yÒ¿ yÍ¿ y‘¿ yÌ¿ y˚¿ z¿ z¿ z¿ z¿ z¿ z(¿ z.¿ zL¿ zE¿ z/¿ zH¿ zV¿ z\¿ zy¿ zr¿ z]¿ zu¿ zÉ¿ zâ¿ z•¿ zû¿ zä¿ z°¿ zØ¿ zµ¿ z«¿ z¿¿ z∂¿ z√¿ z—¿ z◊¿ z¯¿ zÈ¿ z·¿ zÿ¿ z‰¿ zı¿ zÏ¿ z˜¿ {¿ {¿ {)¿ {¿ {¿ {	¿ {¿ {&¿ {¿ {(¿ {3¿ {9¿ {Ü¿ {√¿ {m¿ {W¿ {D¿ {U¿ {N¿ {E¿ {Q¿ {Z¿ {k¿ {d¿ {[¿ {g¿ {p¿ {Ö¿ {z¿ {q¿ {}¿ {ë¿ {Õ¿ {”¿ {„¿ {‹¿ {‘¿ {ﬂ¿ {Ì¿ {Û¿ |0¿ |~¿ |¿ {˛¿ {ˇ¿ |
¿ |/¿ |¿ |¿ |¿ |¿ |(¿ |¿ |+¿ |;¿ |à¿ |é¿ |¨¿ |‘¿ |ú¿ |è¿ |ê¿ |®¿ |ü¿ |´¿ |Æ¿ |ﬁ¿ |‰¿ |ˆ¿ |Ô¿ |Â¿ |Ú¿ } ¿ }¿ }%¿ }¿ }¿ }!¿ }/¿ }5¿ }K¿ }D¿ }6¿ }G¿ }U¿ }[¿ }u¿ }n¿ }\¿ }q¿ }ö¿ }¿ }∑¿ }ú¿ }∫¿ }‘¿ }≈¿ }ª¿ }º¿ }»¿ }…¿ }Ì¿ }ﬁ¿ }˛¿ }Ô¿ ~¿ Åg¿ ~(¿ û¿ ~¿ ~*¿ ç¿ ~π¿ ¿ ~+¿ ~ª¿ ~¡¿ ~œ¿ ~–¿ ¿ ¿ )¿ å¿ K¿ B¿ M¿ o¿ j¿ q¿ †¿ Åf¿ Ï¿ Äß¿ °¿ Ó¿ Ù¿ Ä¿ Äd¿ Ä$¿ Ä¿ Ä&¿ ÄG¿ ÄC¿ ÄI¿ Ä©¿ ÄØ¿ ÄΩ¿ Åe¿ Ä⁄¿ Ä÷¿ Ä‹¿ Ä¸¿ Ä˘¿ Ä˛¿ Å$¿ Å¿ Å&¿ ÅH¿ ÅC¿ ÅJ¿ Åq¿ Åw¿ Åå¿ ÅÖ¿ Åx¿ Åà¿ Åñ¿ Åú¿ Å¬¿ Åª¿ Åù¿ Åæ¿ Åÿ¿ ÅÃ¿ Å⁄¿ Å˙¿ ÅÌ¿ Ç	¿ Å¸¿ Ç¿ Ç¿ ÇO¿ Ç,¿ Ç¿ Ç.¿ ÇE¿ Ç=¿ ÇG¿ Çi¿ ÇY¿ ÇÑ¿ ÉG¿ Çt¿ Çk¿ Çw¿ Çö¿ É:¿ ÇÜ¿ Çô¿ Çá¿ Ç´¿ Ç∆¿ Ç«¿ ÇÎ¿ Ç˛¿ ÇÓ¿ É¿ É¿ É¿ É"¿ É¿ É#¿ É$¿ É)¿ É*¿ ÉI¿ Él¿ Éa¿ Éy¿ Én¿ É|¿ É}@¿ ÉäL¿ ÉÃ#/// Controls the text being edited. ¿ É€P¿ Ñ"4/// Controls whether this widget has keyboard focus. ¿ Ñ0Å¿ Ö<ÄÚ/// {@template flutter.widgets.editableText.obscuringCharacter}
/// Character used for obscuring text if [obscureText] is true.
///
/// Must be only a single character.
///
/// Defaults to the character U+2022 BULLET (‚Ä¢).
/// {@endtemplate} ¿ ÖSÅ÷¿ áÅ´/// {@template flutter.widgets.editableText.obscureText}
/// Whether to hide the text being edited (e.g., for passwords).
///
/// When this is set to true, all the characters in the text field are
/// replaced by [obscuringCharacter], and the text in the field cannot be
/// copied with copy or cut. If [readOnly] is also true, then the text cannot
/// be selected.
///
/// Defaults to false. Cannot be null.
/// {@endtemplate} ¿ á.V¿ ár'/// {@macro dart.ui.textHeightBehavior} ¿ áâ^¿ áŸ8/// {@macro flutter.painting.textPainter.textWidthBasis} ¿ áÏÅE¿ â)Å!/// {@template flutter.widgets.editableText.readOnly}
/// Whether the text can be changed.
///
/// When this is set to true, the text cannot be modified
/// by any shortcut or keyboard operation. The text is still selectable.
///
/// Defaults to false. Must not be null.
/// {@endtemplate} ¿ â6Å|¿ ä©ÅS/// Whether the text will take the full width regardless of the text width.
///
/// When this is set to false, the width will be based on text width, which
/// will also be affected by [textWidthBasis].
///
/// Defaults to true. Must not be null.
///
/// See also:
///
///  * [textWidthBasis], which controls the calculation of text width. ¿ ä∑Åe¿ åÅ5/// Configuration of toolbar options.
///
/// By default, all options are enabled. If [readOnly] is true, paste and cut
/// will be disabled regardless. If [obscureText] is true, cut and copy will
/// be disabled regardless. If [readOnly] and [obscureText] are both true,
/// select all will also be disabled. ¿ å!Åq¿ ç~Å?/// Whether to show selection handles.
///
/// When a selection is active, there will be two handles at each side of
/// boundary, or one handle if the selection is collapsed. The handles can be
/// dragged to adjust the selection.
///
/// See also:
///
///  * [showCursor], which controls the visibility of the cursor. ¿ çóÅO¿ é‹Å'/// {@template flutter.widgets.editableText.showCursor}
/// Whether to show cursor.
///
/// The cursor refers to the blinking caret when the [EditableText] is focused.
/// {@endtemplate}
///
/// See also:
///
///  * [showSelectionHandles], which controls the visibility of the selection handles. ¿ éÎÄº¿ èúÄõ/// {@template flutter.widgets.editableText.autocorrect}
/// Whether to enable autocorrection.
///
/// Defaults to true. Cannot be null.
/// {@endtemplate} ¿ è¨l¿ ê	D/// {@macro flutter.services.TextInputConfiguration.smartDashesType} ¿ êl¿ êzD/// {@macro flutter.services.TextInputConfiguration.smartQuotesType} ¿ êée¿ ê‚F/// {@macro flutter.services.TextInputConfiguration.enableSuggestions} ¿ ê¯H¿ ë;0/// The text style to use for the editable text. ¿ ó.¿ ó@  ¿ óPÄÿ¿ òÄ¥/// {@template flutter.widgets.editableText.textAlign}
/// How the text should be aligned horizontally.
///
/// Defaults to [TextAlign.start] and cannot be null.
/// {@endtemplate} ¿ ò-Ç‚¿ õÇ°/// {@template flutter.widgets.editableText.textDirection}
/// The directionality of the text.
///
/// This decides how [textAlign] values like [TextAlign.start] and
/// [TextAlign.end] are interpreted.
///
/// This is also used to disambiguate how to render bidirectional text. For
/// example, if the text is an English phrase followed by a Hebrew phrase,
/// in a [TextDirection.ltr] context the English phrase will be on the left
/// and the Hebrew phrase to its right, while in a [TextDirection.rtl]
/// context, the English phrase will be on the right and the Hebrew phrase on
/// its left.
///
/// Defaults to the ambient [Directionality], if any.
/// {@endtemplate} ¿ õÇ!¿ ù#ÅŸ/// {@template flutter.widgets.editableText.textCapitalization}
/// Configures how the platform keyboard will select an uppercase or
/// lowercase keyboard.
///
/// Only supports text keyboards, other keyboard types will ignore this
/// configuration. Capitalization is locale-aware.
///
/// Defaults to [TextCapitalization.none]. Must not be null.
///
/// See also:
///
///  * [TextCapitalization], for a description of each capitalization behavior.
///
/// {@endtemplate} ¿ ù:Åi¿ ûùÅF/// Used to select a font when the same Unicode character can
/// be rendered differently, depending on the locale.
///
/// It's rarely necessary to set this property. By default its value
/// is inherited from the enclosing app with `Localizations.localeOf(context)`.
///
/// See [RenderEditable.locale] for more information. ¿ û®Å∑¿ †PÅá/// {@template flutter.widgets.editableText.textScaleFactor}
/// The number of font pixels for each logical pixel.
///
/// For example, if the text scale factor is 1.5, text will be 50% larger than
/// the specified font size.
///
/// Defaults to the [MediaQueryData.textScaleFactor] obtained from the ambient
/// [MediaQuery], or 1.0 if there is no [MediaQuery] in scope.
/// {@endtemplate} ¿ †dd¿ †ΩF/// The color to use when painting the cursor.
///
/// Cannot be null. ¿ †ÕÅÚ¿ ¢§Åµ/// The color to use when painting the autocorrection Rect.
///
/// For [CupertinoTextField]s, the value is set to the ambient
/// [CupertinoThemeData.primaryColor] with 20% opacity. For [TextField]s, the
/// value is null on non-iOS platforms and the same color used in [CupertinoTextField]
/// on iOS.
///
/// Currently the autocorrection Rect only appears on iOS.
///
/// Defaults to null, which disables autocorrection Rect painting. ¿ ¢ƒÄ˛¿ £≠Ä“/// The color to use when painting the background cursor aligned with the text
/// while rendering the floating cursor.
///
/// Cannot be null. By default it is the disabled grey color from
/// CupertinoColors. ¿ £«à™¿ ¨ià,/// {@template flutter.widgets.editableText.maxLines}
/// The maximum number of lines to show at one time, wrapping if necessary.
///
/// This affects the height of the field itself and does not limit the number
/// of lines that can be entered into the field.
///
/// If this is 1 (the default), the text will not wrap, but will scroll
/// horizontally instead.
///
/// If this is null, there is no limit to the number of lines, and the text
/// container will start with enough vertical space for one line and
/// automatically grow to accommodate additional lines as they are entered, up
/// to the height of its constraints.
///
/// If this is not null, the value must be greater than zero, and it will lock
/// the input to the given number of lines and take up enough horizontal space
/// to accommodate that number of lines. Setting [minLines] as well allows the
/// input to grow and shrink between the indicated range.
///
/// The full set of behaviors possible with [minLines] and [maxLines] are as
/// follows. These examples apply equally to [TextField], [TextFormField],
/// [CupertinoTextField], and [EditableText].
///
/// Input that occupies a single line and scrolls horizontally as needed.
/// ```dart
/// TextField()
/// ```
///
/// Input whose height grows from one line up to as many lines as needed for
/// the text that was entered. If a height limit is imposed by its parent, it
/// will scroll vertically when its height reaches that limit.
/// ```dart
/// TextField(maxLines: null)
/// ```
///
/// The input's height is large enough for the given number of lines. If
/// additional lines are entered the input scrolls vertically.
/// ```dart
/// TextField(maxLines: 2)
/// ```
///
/// Input whose height grows with content between a min and max. An infinite
/// max is possible with `maxLines: null`.
/// ```dart
/// TextField(minLines: 2, maxLines: 4)
/// ```
///
/// See also:
///
///  * [minLines], which sets the minimum number of lines visible.
/// {@endtemplate}
///  * [expands], which determines whether the field should fill the height of
///    its parent. ¿ ¨váÅ¿ ≥Ôá/// {@template flutter.widgets.editableText.minLines}
/// The minimum number of lines to occupy when the content spans fewer lines.
///
/// This affects the height of the field itself and does not limit the number
/// of lines that can be entered into the field.
///
/// If this is null (default), text container starts with enough vertical space
/// for one line and grows to accommodate additional lines as they are entered.
///
/// This can be used in combination with [maxLines] for a varying set of behaviors.
///
/// If the value is set, it must be greater than zero. If the value is greater
/// than 1, [maxLines] should also be set to either null or greater than
/// this value.
///
/// When [maxLines] is set as well, the height will grow between the indicated
/// range of lines. When [maxLines] is null, it will grow as high as needed,
/// starting from [minLines].
///
/// A few examples of behaviors possible with [minLines] and [maxLines] are as follows.
/// These apply equally to [TextField], [TextFormField], [CupertinoTextField],
/// and [EditableText].
///
/// Input that always occupies at least 2 lines and has an infinite max.
/// Expands vertically as needed.
/// ```dart
/// TextField(minLines: 2)
/// ```
///
/// Input whose height starts from 2 lines and grows up to 4 lines at which
/// point the height limit is reached. If additional lines are entered it will
/// scroll vertically.
/// ```dart
/// TextField(minLines:2, maxLines: 4)
/// ```
///
/// Defaults to null.
///
/// See also:
///
///  * [maxLines], which sets the maximum number of lines visible, and has
///    several examples of how minLines and maxLines interact to produce
///    various behaviors.
/// {@endtemplate}
///  * [expands], which determines whether the field should fill the height of
///    its parent. ¿ ≥¸É¿ ∂ˆÇƒ/// {@template flutter.widgets.editableText.expands}
/// Whether this widget's height will be sized to fill its parent.
///
/// If set to true and wrapped in a parent widget like [Expanded] or
/// [SizedBox], the input will expand to fill the parent.
///
/// [maxLines] and [minLines] must both be null when this is set to true,
/// otherwise an error is thrown.
///
/// Defaults to false.
///
/// See the examples in [maxLines] for the complete picture of how [maxLines],
/// [minLines], and [expands] interact to produce various behaviors.
///
/// Input that matches the height of its parent:
/// ```dart
/// Expanded(
///   child: TextField(maxLines: null, expands: true),
/// )
/// ```
/// {@endtemplate} ¿ ∑Å˛¿ ∏˜Ål/// {@template flutter.widgets.editableText.autofocus}
/// Whether this text field should focus itself if nothing else is already
/// focused.
///
/// If true, the keyboard will open as soon as this text field obtains focus.
/// Otherwise, the keyboard is only shown after the user taps the text field.
///
/// Defaults to false. Cannot be null.
/// {@endtemplate} ¿ πÅ§¿ ∫õÅx/// The color to use when painting the selection.
///
/// If this property is null, this widget gets the selection color from the
/// [DefaultSelectionStyle].
///
/// For [CupertinoTextField]s, the value is set to the ambient
/// [CupertinoThemeData.primaryColor] with 20% opacity. For [TextField]s, the
/// value is set to the ambient [TextSelectionThemeData.selectionColor]. ¿ ∫ÆÉ_¿ Ω¸É/// {@template flutter.widgets.editableText.selectionControls}
/// Optional delegate for building the text selection handles and toolbar.
///
/// The [EditableText] widget used on its own will not trigger the display
/// of the selection toolbar by itself. The toolbar is shown by calling
/// [EditableTextState.showToolbar] in response to an appropriate user event.
///
/// See also:
///
///  * [CupertinoTextField], which wraps an [EditableText] and which shows the
///    selection toolbar upon user events that are appropriate on the iOS
///    platform.
///  * [TextField], a Material Design themed wrapper of [EditableText], which
///    shows the selection toolbar upon appropriate user events based on the
///    user's platform set in [ThemeData.platform].
/// {@endtemplate} ¿ æÅ¿ ø ÄÌ/// {@template flutter.widgets.editableText.keyboardType}
/// The type of keyboard to use for editing the text.
///
/// Defaults to [TextInputType.text] if [maxLines] is one and
/// [TextInputType.multiline] otherwise.
/// {@endtemplate} ¿ ø1e¿ øá</// The type of action button to use with the soft keyboard. ¿ øõâŒ¿ …`âP/// {@template flutter.widgets.editableText.onChanged}
/// Called when the user initiates a change to the TextField's
/// value: when they have inserted or deleted text.
///
/// This callback doesn't run when the TextField's text is changed
/// programmatically, via the TextField's [controller]. Typically it
/// isn't necessary to be notified of such changes, since they're
/// initiated by the app itself.
///
/// To be notified of all changes to the TextField's text, cursor,
/// and selection, one can add a listener to its [controller] with
/// [TextEditingController.addListener].
///
/// [onChanged] is called before [onSubmitted] when user indicates completion
/// of editing, such as when pressing the "done" button on the keyboard. That default
/// behavior can be overridden. See [onEditingComplete] for details.
///
/// {@tool dartpad}
/// This example shows how onChanged could be used to check the TextField's
/// current value each time the user inserts or deletes a character.
///
/// ** See code in examples/api/lib/widgets/editable_text/editable_text.on_changed.0.dart **
/// {@end-tool}
/// {@endtemplate}
///
/// ## Handling emojis and other complex characters
/// {@template flutter.widgets.EditableText.onChanged}
/// It's important to always use
/// [characters](https://pub.dev/packages/characters) when dealing with user
/// input text that may contain complex characters. This will ensure that
/// extended grapheme clusters and surrogate pairs are treated as single
/// characters, as they appear to the user.
///
/// For example, when finding the length of some user input, use
/// `string.characters.length`. Do NOT use `string.length` or even
/// `string.runes.length`. For the complex character "üë®‚Äçüë©‚Äçüë¶", this
/// appears to the user as a single character, and `string.characters.length`
/// intuitively returns 1. On the other hand, `string.length` returns 8, and
/// `string.runes.length` returns 5!
/// {@endtemplate}
///
/// See also:
///
///  * [inputFormatters], which are called before [onChanged]
///    runs and can validate and change ("format") the input value.
///  * [onEditingComplete], [onSubmitted], [onSelectionChanged]:
///    which are more specialized input change notifications.
///  * [TextEditingController], which implements the [Listenable] interface
///    and notifies its listeners on [TextEditingValue] changes. ¿ …nÉ•¿ ÕÉ[/// {@template flutter.widgets.editableText.onEditingComplete}
/// Called when the user submits editable content (e.g., user presses the "done"
/// button on the keyboard).
///
/// The default implementation of [onEditingComplete] executes 2 different
/// behaviors based on the situation:
///
///  - When a completion action is pressed, such as "done", "go", "send", or
///    "search", the user's content is submitted to the [controller] and then
///    focus is given up.
///
///  - When a non-completion action is pressed, such as "next" or "previous",
///    the user's content is submitted to the [controller], but focus is not
///    given up because developers may want to immediately move focus to
///    another input widget within [onSubmitted].
///
/// Providing [onEditingComplete] prevents the aforementioned default behavior.
/// {@endtemplate} ¿ ÕÅ∏¿ Œ≈ÅÄ/// {@template flutter.widgets.editableText.onSubmitted}
/// Called when the user indicates that they are done editing the text in the
/// field.
///
/// By default, [onSubmitted] is called after [onChanged] when the user
/// has finalized editing; or, if the default behavior has been overridden,
/// after [onEditingComplete]. See [onEditingComplete] for details.
/// {@endtemplate} ¿ Œ’Ñ¿ “ÿÉø/// {@template flutter.widgets.editableText.onAppPrivateCommand}
/// This is used to receive a private command from the input method.
///
/// Called when the result of [TextInputClient.performPrivateCommand] is
/// received.
///
/// This can be used to provide domain-specific features that are only known
/// between certain input methods and their clients.
///
/// See also:
///   * [performPrivateCommand](https://developer.android.com/reference/android/view/inputmethod/InputConnection#performPrivateCommand\(java.lang.String,%20android.os.Bundle\)),
///     which is the Android documentation for performPrivateCommand, used to
///     send a command from the input method.
///   * [sendAppPrivateCommand](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager#sendAppPrivateCommand),
///     which is the Android documentation for sendAppPrivateCommand, used to
///     send a command to the input method.
/// {@endtemplate} ¿ “ÄÈ¿ ”«ÄÆ/// {@template flutter.widgets.editableText.onSelectionChanged}
/// Called when the user changes the selection of text (including the cursor
/// location).
/// {@endtemplate} ¿ ”ﬁs¿ ‘:E/// {@macro flutter.widgets.SelectionOverlay.onSelectionHandleTapped} ¿ ‘VÇ‹¿ ◊#Çê/// {@template flutter.widgets.editableText.inputFormatters}
/// Optional input validation and formatting overrides.
///
/// Formatters are run in the provided order when the user changes the text
/// this widget contains. When this parameter changes, the new formatters will
/// not be applied until the next time the user inserts or deletes text.
/// Similar to the [onChanged] callback, formatters don't run when the text is
/// changed programmatically via [controller].
///
/// See also:
///
///  * [TextEditingController], which implements the [Listenable] interface
///    and notifies its listeners on [TextEditingValue] changes.
/// {@endtemplate} ¿ ◊7Åÿ¿ ŸÅß/// The cursor for a mouse pointer when it enters or is hovering over the
/// widget.
///
/// If this property is null, [SystemMouseCursors.text] will be used.
///
/// The [mouseCursor] is the only property of [EditableText] that controls the
/// appearance of the mouse pointer. All other properties related to "cursor"
/// stands for the text cursor, which is usually a blinking vertical line at
/// the editing position. ¿ ŸÄÍ¿ ŸËÄ¿/// If true, the [RenderEditable] created by this widget will not handle
/// pointer events, see [RenderEditable] and [RenderEditable.ignorePointer].
///
/// This property is false by default. ¿ ⁄Ç ¿ €¯Å—/// {@template flutter.widgets.editableText.cursorWidth}
/// How thick the cursor will be.
///
/// Defaults to 2.0.
///
/// The cursor will draw under the text. The cursor width will extend
/// to the right of the boundary between characters for left-to-right text
/// and to the left for right-to-left text. This corresponds to extending
/// downstream relative to the selected position. Negative values may be used
/// to reverse this behavior.
/// {@endtemplate} ¿ ‹ÄÁ¿ ‹„Ä¬/// {@template flutter.widgets.editableText.cursorHeight}
/// How tall the cursor will be.
///
/// If this property is null, [RenderEditable.preferredLineHeight] will be used.
/// {@endtemplate} ¿ ‹ÙÄ‘¿ ›ºÄØ/// {@template flutter.widgets.editableText.cursorRadius}
/// How rounded the corners of the cursor should be.
///
/// By default, the cursor has no radius.
/// {@endtemplate} ¿ ›ÕÅ¿ ﬁøÄ‹/// Whether the cursor will animate from fully transparent to fully opaque
/// during each cursor blink.
///
/// By default, the cursor opacity will animate on iOS platforms and will not
/// animate on Android platforms. ¿ ﬁŸV¿ ﬂ#9///{@macro flutter.rendering.RenderEditable.cursorOffset} ¿ ﬂ4c¿ ﬂÉA///{@macro flutter.rendering.RenderEditable.paintCursorAboveText} ¿ ﬂúÄª¿ ‡CÄà/// Controls how tall the selection highlight boxes are computed to be.
///
/// See [ui.BoxHeightStyle] for details on available styles. ¿ ‡\Ä∏¿ ·Äá/// Controls how wide the selection highlight boxes are computed to be.
///
/// See [ui.BoxWidthStyle] for details on available styles. ¿ ·ÄÆ¿ ·µÄÄ/// The appearance of the keyboard.
///
/// This setting is only honored on iOS devices.
///
/// Defaults to [Brightness.light]. ¿ ·ÃÇÉ¿ ‰BÇP/// {@template flutter.widgets.editableText.scrollPadding}
/// Configures padding to edges surrounding a [Scrollable] when the Textfield scrolls into view.
///
/// When this widget receives focus and is not completely visible (for example scrolled partially
/// off the screen or overlapped by the keyboard)
/// then it will attempt to make itself visible by scrolling a surrounding [Scrollable], if one is present.
/// This value controls how far from the edges of a [Scrollable] the TextField will be positioned after the scroll.
///
/// Defaults to EdgeInsets.all(20.0).
/// {@endtemplate} ¿ ‰TÇ|¿ Ê∂Ç:/// {@template flutter.widgets.editableText.enableInteractiveSelection}
/// Whether to enable user interface affordances for changing the
/// text selection.
///
/// For example, setting this to true will enable features such as
/// long-pressing the TextField to select text and show the
/// cut/copy/paste menu, and tapping to move the text caret.
///
/// When this is false, the text selection cannot be adjusted by
/// the user, text cannot be copied, and the user cannot paste into
/// the text field from the clipboard.
///
/// Defaults to true.
/// {@endtemplate} ¿ Ê’Å°¿ ËVÅd/// Setting this property to true makes the cursor stop blinking or fading
/// on and off once the cursor appears on focus. This property is useful for
/// testing purposes.
///
/// It does not affect the necessity to focus the EditableText for the cursor
/// to appear in the first place.
///
/// Defaults to false, resulting in a typical blinking cursor.¿ Ëq¿ Ë{e¿ Ëœ9/// {@macro flutter.widgets.scrollable.dragStartBehavior} ¿ ËÂÅ0¿ ÍÄ˘/// {@template flutter.widgets.editableText.scrollController}
/// The [ScrollController] to use when vertically scrolling the input.
///
/// If null, it will instantiate a new ScrollController.
///
/// See [Scrollable.controller].
/// {@endtemplate} ¿ ÍÅ„¿ ÎÅ™/// {@template flutter.widgets.editableText.scrollPhysics}
/// The [ScrollPhysics] to use when vertically scrolling the input.
///
/// If not specified, it will behave according to the current platform.
///
/// See [Scrollable.physics].
/// {@endtemplate}
///
/// If an explicit [ScrollBehavior] is provided to [scrollBehavior], the
/// [ScrollPhysics] provided by that behavior will take precedence after
/// [scrollPhysics]. ¿ ÏÄı¿ ÏËÄÃ/// {@template flutter.widgets.editableText.scribbleEnabled}
/// Whether iOS 14 Scribble features are enabled for this widget.
///
/// Only available on iPads.
///
/// Defaults to true.
/// {@endtemplate} ¿ Ó é˘¿ ˝éG/// {@template flutter.widgets.editableText.autofillHints}
/// A list of strings that helps the autofill service identify the type of this
/// text input.
///
/// When set to null, this text input will not send its autofill information
/// to the platform, preventing it from participating in autofills triggered
/// by a different [AutofillClient], even if they're in the same
/// [AutofillScope]. Additionally, on Android and web, setting this to null
/// will disable autofill for this text field.
///
/// The minimum platform SDK version that supports Autofill is API level 26
/// for Android, and iOS 10.0 for iOS.
///
/// Defaults to an empty list.
///
/// ### Setting up iOS autofill:
///
/// To provide the best user experience and ensure your app fully supports
/// password autofill on iOS, follow these steps:
///
/// * Set up your iOS app's
///   [associated domains](https://developer.apple.com/documentation/safariservices/supporting_associated_domains_in_your_app).
/// * Some autofill hints only work with specific [keyboardType]s. For example,
///   [AutofillHints.name] requires [TextInputType.name] and [AutofillHints.email]
///   works only with [TextInputType.emailAddress]. Make sure the input field has a
///   compatible [keyboardType]. Empirically, [TextInputType.name] works well
///   with many autofill hints that are predefined on iOS.
///
/// ### Troubleshooting Autofill
///
/// Autofill service providers rely heavily on [autofillHints]. Make sure the
/// entries in [autofillHints] are supported by the autofill service currently
/// in use (the name of the service can typically be found in your mobile
/// device's system settings).
///
/// #### Autofill UI refuses to show up when I tap on the text field
///
/// Check the device's system settings and make sure autofill is turned on,
/// and there are available credentials stored in the autofill service.
///
/// * iOS password autofill: Go to Settings -> Password, turn on "Autofill
///   Passwords", and add new passwords for testing by pressing the top right
///   "+" button. Use an arbitrary "website" if you don't have associated
///   domains set up for your app. As long as there's at least one password
///   stored, you should be able to see a key-shaped icon in the quick type
///   bar on the software keyboard, when a password related field is focused.
///
/// * iOS contact information autofill: iOS seems to pull contact info from
///   the Apple ID currently associated with the device. Go to Settings ->
///   Apple ID (usually the first entry, or "Sign in to your iPhone" if you
///   haven't set up one on the device), and fill out the relevant fields. If
///   you wish to test more contact info types, try adding them in Contacts ->
///   My Card.
///
/// * Android autofill: Go to Settings -> System -> Languages & input ->
///   Autofill service. Enable the autofill service of your choice, and make
///   sure there are available credentials associated with your app.
///
/// #### I called `TextInput.finishAutofillContext` but the autofill save
/// prompt isn't showing
///
/// * iOS: iOS may not show a prompt or any other visual indication when it
///   saves user password. Go to Settings -> Password and check if your new
///   password is saved. Neither saving password nor auto-generating strong
///   password works without properly setting up associated domains in your
///   app. To set up associated domains, follow the instructions in
///   <https://developer.apple.com/documentation/safariservices/supporting_associated_domains_in_your_app>.
///
/// {@endtemplate}
/// {@macro flutter.services.AutofillConfiguration.autofillHints} ¿ ˝Å¿ ˛Ä◊/// The [AutofillClient] that controls this input field's autofill behavior.
///
/// When null, this widget's [EditableTextState] will be used as the
/// [AutofillClient]. This property may override [autofillHints]. ¿ ˛'v¿ ˛ëX/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.hardEdge]. ¿ ˛¢ÇÓ¿ÉÇ∞/// Restoration ID to save and restore the scroll offset of the
/// [EditableText].
///
/// If a restoration id is provided, the [EditableText] will persist its
/// current scroll offset and restore it during state restoration.
///
/// The scroll offset is persisted in a [RestorationBucket] claimed from
/// the surrounding [RestorationScope] using the provided restoration ID.
///
/// Persisting and restoring the content of the [EditableText] is the
/// responsibility of the owner of the [controller], who may use a
/// [RestorableTextEditingController] for that purpose.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter. ¿ïÇˆ¿}Ç≥/// {@template flutter.widgets.shadow.scrollBehavior}
/// A [ScrollBehavior] that will be applied to this widget individually.
///
/// Defaults to null, wherein the inherited [ScrollBehavior] is copied and
/// modified to alter the viewport decoration, like [Scrollbar]s.
/// {@endtemplate}
///
/// [ScrollBehavior]s also provide [ScrollPhysics]. If an explicit
/// [ScrollPhysics] is provided in [scrollPhysics], it will take precedence,
/// followed by [scrollBehavior], and then the inherited ancestor
/// [ScrollBehavior].
///
/// The [ScrollBehavior] of the inherited [ScrollConfiguration] will be
/// modified by default to only apply a [Scrollbar] if [maxLines] is greater
/// than 1. ¿ê}¿R/// {@macro flutter.services.TextInputConfiguration.enableIMEPersonalizedLearning} ¿ ëEÖÊ¿ ñ{Ñˆ/// {@template flutter.widgets.editableText.strutStyle}
/// The strut style used for the vertical layout.
///
/// [StrutStyle] is used to establish a predictable vertical layout.
/// Since fonts may vary depending on user input and due to font
/// fallback, [StrutStyle.forceStrutHeight] is enabled by default
/// to lock all lines to the height of the base [TextStyle], provided by
/// [style]. This ensures the typed text fits within the allotted space.
///
/// If null, the strut used will inherit values from the [style] and will
/// have [StrutStyle.forceStrutHeight] set to true. When no [style] is
/// passed, the theme's [TextStyle] will be used to generate [strutStyle]
/// instead.
///
/// To disable strut-based vertical alignment and allow dynamic vertical
/// layout based on the glyphs typed, use [StrutStyle.disabled].
///
/// Flutter's strut is based on [typesetting strut](https://en.wikipedia.org/wiki/Strut_(typesetting))
/// and CSS's [line-height](https://www.w3.org/TR/CSS2/visudet.html#line-height).
/// {@endtemplate}
///
/// Within editable text and text fields, [StrutStyle] will not use its standalone
/// default values, and will instead inherit omitted/null properties from the
/// [TextStyle] instead. See [StrutStyle.inheritFromTextStyle].   ¿ Ï¸Å ¿ ÌÌÄ€/// {@template flutter.widgets.editableText.selectionEnabled}
/// Same as [enableInteractiveSelection].
///
/// This getter exists primarily for consistency with
/// [RenderEditable.selectionEnabled].
/// {@endtemplate}   ¿\¿    ¿ªû~¿–  ¿È(¿  ¿¿&   ¿$=C¿$[   ¿$=¿$>¿$Ñät¿$ï  ¿$©&¿$∆  ¿$Ñ¿$Ö ¿.¸¿'ö¿/"/// State for a [EditableText].  -¿0¿0  ¿0‡9¿0ı  ¿1`¿13 ¿1O¿1j¿1k¿1{¿1|¿1ÇO¿1ú ¿1∏¿1≈¿1 ¿1∆¿1À¿1–¿1Ã¿1’*¿1Â ¿1Ù¿1˝¿1˛¿2[¿2" ¿2<¿2C¿25¿2>¿2E¿2\¿2]¿2c)¿2x  ¿2ê'¿2¶  ¿2º+¿2Œ  ¿3g/¿3w ¿3ã¿3î¿3ï¿3ö3¿3™ ¿3¬¿3À¿3Ã¿3—1¿3· ¿3˜¿4 ¿4¿4¿4 ¿4¿4&)¿4:  ¿8L¿8 ¿85¿8=¿8O¿8J¿8>¿8L¿8U3¿8j  ¿8ç¿8ö  ¿N&¿N+ ¿N=¿a¿Ç¿c´Å∆/// The last known [TextEditingValue] of the platform text input plugin.
///
/// This value is updated when the platform text input plugin sends a new
/// update via [updateEditingValue], or when [EditableText] calls
/// [TextInputConnection.setEditingState] to overwrite the platform text input
/// plugin's [TextEditingValue].
///
/// Used in [_updateRemoteEditingValueIfNeeded] to determine whether the
/// remote value is outdated and needs updating. ¿rÂ¿rÎ  ¿s]¿sk  ¿sÀ¿s”  ¿t ¿t(  ¿åƒ¿å» ¿å⁄¿•Z(¿•_ ¿•}¿ª°¿ªß  ¿ºµK¿ºÀ ¿ºÂ¿ºÌ¿ºˇ¿º˙¿ºÓ¿º¸¿Ω>¿Ω ¿Ω.¿Ω4¿Ω5¿ΩG(¿ΩL ¿Ωj¿≈† ¿≈¨  ¿’{$¿’ ¿’û¿’£¿’®  ¿÷Z¿÷_ ¿÷o¿‰¿‰ ¿‰,¿‰2¿‰8  ¿‰L¿‰Q ¿‰_¿‰c¿‰d¿‰l¿‰p ¿‰Ö¿‰Ü¿‰ã¿‰ñ  ¿¸¿  ¿¿¿è"¿ö  ¿"EÄì¿"r 	¿"è¿"ù¿"∑¿"û¿"∏¿"◊¿"¡¿"π¿"√¿%Ws¿%| 	¿%ë¿%ü¿%±¿%†¿%≤¿%…¿%ª¿%≥¿%Ω¿(#ÄÉ¿(L 	¿(e¿(s¿(â¿(t¿(ä¿(•¿(ì¿(ã¿(ï¿(´Ä÷¿) ¿)$¿)L¿)z¿)M¿){¿)Ä¿)|¿/”âß¿/¯ ÄÈ¿0¿9y¿0¿0¿0¿0
¿0¿0¿0¿0D¿0¿0F¿0U¿0h¿0a¿0V¿0c¿0Ä¿0o¿0Ç¿0Ø¿0ö¿0±¿0„¿0Õ¿0Â¿0˚¿0¸¿1¿1	¿1¿1¿1¿1-¿1;¿1.¿1<¿1\¿1E¿1=¿1G¿1á¿1r¿1â¿1ô¿1‹¿1ö¿1´¿1¡¿1¨¿1¬¿1€¿1√¿1…¿2¿1„¿2¿2¿2^¿2¿2%¿2D¿2&¿2E¿2]¿2F¿2L¿2|¿2e¿2~¿2é¿2À¿2è¿2†¿2∏¿2°¿2π¿2 ¿2∫¿2¿¿3¿2¿3¿3"¿3Ä¿3#¿3=¿3^¿3>¿3_¿3¿3`¿3f¿3m¿3Æ¿3á¿3∞¿3¿¿4#¿3¡¿3€¿4¿3‹¿4¿4"¿4¿4¿4¿4J¿4*¿4L¿4\¿4±¿4]¿4w¿4ò¿4x¿4ô¿4∞¿4ö¿4†¿4¶¿4ÿ¿4∏¿4⁄¿4Í¿5B¿4Î¿4˘¿5¿4˙¿5¿5A¿5$¿5¿5&¿5p¿5I¿5r¿5Ç¿5Ë¿5É¿5ë¿5π¿5í¿5∫¿5Á¿5√¿5ª¿5≈¿6¿5Ô¿6¿6.¿6B¿6/¿6p¿6I¿6r¿6Ç¿6Â¿6É¿6ù¿6≈¿6û¿6∆¿6‰¿6«¿6Õ¿6”¿7"¿6Ï¿7$¿74¿7s¿75¿7Z¿7r¿7[¿7a¿7ò¿7z¿7ö¿7™¿7˛¿7´¿7π¿7ÿ¿7∫¿7Ÿ¿7˝¿7‚¿7⁄¿7‰¿8+¿8¿8-¿8=¿8T¿8>¿8N¿8S¿8O¿8r¿8[¿8t¿8Ñ¿8ü¿8Ö¿8ô¿8û¿8ö¿8µ¿8¶¿8∑¿8«¿9&¿8»¿8÷¿8Ê¿8◊¿8Á¿9%¿8¿8Ë¿8Ú¿9$¿9G¿9.¿9I¿9Y¿9t¿9Z¿0Äø¿06    ¿2Îx¿3     ¿4SM¿4r   ¿4S¿4T¿4§M¿4∑    ¿4ıÇÉ¿7=Ç$/// Whether to create an input connection with the platform for text editing
/// or not.
///
/// Read-only input fields do not need a connection with the platform since
/// there's no need for text editing capabilities (e.g. virtual keyboard).
///
/// On the web, we always need a connection because we want some browser
/// functionalities to continue to work on read-only input fields like:
///
/// - Relevant context menu.
/// - cmd/ctrl+c shortcut to copy.
/// - cmd/ctrl+a to select all.
/// - Changing the selection using a physical keyboard.   ¿8Ø@¿8ƒ   ¿8Ø¿8∞¿8Û^¿8˝    ¿9Uh¿9j   ¿9U¿9V¿9¡V¿9÷   ¿9¡¿9¬¿:U¿:0   ¿:¿:¿:tÄõ¿:â   ¿:t¿:u¿;°Å¿;∂    ¿c–C¿cÒ   ¿c–¿c—¿u&V¿u1    ¿ë´7¿ë¿    ¿ëÂM¿ëÈ  ¿ë¿í   ¿í60¿í?    ¿íi.¿ír    ¿õ¸H¿ú    ¿úGÄ»¿úØZ/// Whether to send the autofill information to the autofill service. True by
/// default.   ¿“ÛÄ·¿”í|/// Whether the blinking cursor is actually visible at this precise moment
/// (it's hidden half the time, since it blinks).  ¿”t¿”u¿”ÿÅ¿‘∑Ä∂/// The cursor blink interval (the amount of time the cursor is in the "on"
/// state or the "off" state). A complete cursor blink period is twice this
/// value (half on, half off).  ¿‘ï¿‘ñ¿‘ÍÄç¿’Q5/// The current status of the text selection handles.  ¿’"¿’#¿˘$Ä˛¿˘6    ¿˙&Å!¿˙ÚÄ∞/// The renderer for this widget's descendant.
///
/// This property is typically used to notify the renderer of input gestures
/// when [RenderEditable.ignorePointer] is true.   ¿˚K<¿˚l   ¿˚K¿˚L¿˚ãH¿˚ñ    ¿Ë>¿ˇ   ¿Ë¿È¿	*Ñ‚¿	Q   ¿	*¿	+H¿;Ää¿;    ¿<±Ñ∑¿<Ô*/// Copy current selection to [Clipboard]. ¿<˝¿=  ¿<ﬁ¿<ﬂ¿AlÉb¿A©)/// Cut current selection to [Clipboard]. ¿A∂¿AÕ  ¿Aò¿Aô¿D“Ö"¿E /// Paste text from [Clipboard]. ¿E¿E/  ¿Dı¿Dˆ¿I¯Ç2¿J-!/// Select the entire text value. ¿J7¿JN  ¿J¿J¿LEÅk¿LV   ¿LE¿LF¿NFá¿NW   ¿NF¿NG¿UPà≠¿Ua  ¿Uq¿U  ¿UP¿UQ¿^Éï¿^   ¿^¿^¿dâï¿d(  ¿d;¿dM  ¿d¿d¿m∞Ñ^¿m¡  ¿mœ¿m‡  ¿m∞¿m±¿rÄÖ¿r#  ¿r9¿rA  ¿rH¿r^  ¿r¿r¿uÄá™¿uë  ¿u¶¿uæ  ¿uÄ¿uÅ¿}.Ñø¿}3    ¿ÅÒäœ¿Ç#  ¿Ç4¿ÇE  ¿ÇM¿Ç\  ¿ÅÒ¿ÅÚ¿Å¯¿Ç¿Å˘¿å‡Åà¿é8ÅF/// Begins a new batch edit, within which new updates made to the text editing
/// value will not be sent to the platform text input plugin.
///
/// Batch edits nest. When the outermost batch edit finishes, [endBatchEdit]
/// will attempt to send [currentTextEditingValue] to the text input plugin if
/// it detected a change.   ¿élÅ÷¿èmÄÒ/// Ends the current batch edit started by the last call to [beginBatchEdit],
/// and send [currentTextEditingValue] to the text input plugin if needed.
///
/// Throws an error in debug mode if this [EditableText] is not in a batch
/// edit.   ¿êFÅa¿êK    ¿îõá]¿î™  ¿î¬	¿î»   ¿ùÜs¿ù    ¿£äÄ∆¿£è    ¿§TÅ¿§Y    ¿•ÜÄΩ¿•ã    ¿ß_Éœ¿ßd    ¿´3Å¿´D   ¿´3¿´4¿¨RÇm¿≠ÓÅà/// Express interest in interacting with the keyboard.
///
/// If this control is already attached to the keyboard, this function will
/// request that the keyboard become visible. Otherwise, this function will
/// ask the focus system that it become focused. If successful in acquiring
/// focus, the control will then attach to the keyboard and request that the
/// keyboard become visible.   ¿Æ√Å¿Æ»    ¿Ø»W¿ØÕ    ¿∞#ÇD¿∞(    ¿≤kâ2¿≤ù  ¿≤µ¿≤ƒ  ¿≤Œ¿≤Ê  ¿≤k¿≤l¿≤r¿≤î¿≤s¿ºQ¿º   ¿º4¿º:   ¿Ωtà(¿Ωy  ¿Ωï¿Ω§   ¿≈≈Çå¿≈÷   ¿≈≈¿≈∆¿»Uâ≠¿»á  ¿»ö¿»¨  ¿»≤¿»   ¿»—¿»◊  ¿»U¿»V¿»\¿»~¿»]¿»Ë¿“ÄÈ¿“    ¿÷yÇn¿÷~    ¿ÿÎÉô¿ÿ    ¿‹àÅ¿‹ç  ¿‹†¿‹¶  ¿‹∂¿›éÅ	¿›ì    ¿ﬁõÅ£¿ﬁ†    ¿‡BÉ—¿‡G    ¿‰´ãŒ¿‰∞  ¿‰«¿‰Õ  ¿‰‘¿}Å—¿Ç    ¿Û…É¿ÛŒ    ¿ˆÈÇ7¿ˆÓ    ¿˚◊É£¿˚Ë  ¿¸¿¸  ¿¸¿¸3  ¿˚◊¿˚ÿ¿ˇ~Å?¿ˇè  ¿ˇù¿ˇ´  ¿ˇ~¿ˇ¿ ¡É'¿¥ÄŸ/// Shows the selection toolbar at the location of the current cursor.
///
/// Returns `false` if a toolbar couldn't be shown, such as when the toolbar
/// is already shown, or when no text selection currently exists.  ¿£¿§¿ÏÅA¿˝  ¿
¿  ¿Ï¿Ì¿¿1Ä⁄¿c*/// Toggles the visibility of the toolbar.   ¿Å!¿/  ¿E	¿K  ¿¿¿CÄ°¿T   ¿C¿D¿O¿!  ¿*¿<  ¿¿¿∂Ä§¿«  ¿‰	¿È  ¿Ô¿Ù  ¿∂¿∑¿^Ä˘¿l  ¿}¿ï   ¿[Äı¿i  ¿y¿ë   ¿TÅ[¿b  ¿t¿å   ¿Å¿  ¿(#¿F   ¿ÉŒ¿*  ¿<#¿Z   ¿ÓÉ¯¿¸  ¿#¿%   ¿Íb¿¯  ¿
#¿(   ¿PÄù¿Z ¿k¿k¿}¿à   ¿ÒÖQ¿Å/// Transpose the characters immediately before and after the current
/// collapsed selection.
///
/// When the cursor is at the end of the text, transposes the last two
/// characters, if they exist.
///
/// When the cursor is at the start of the text, does nothing. ¿% ¿@   ¿"›Çw¿"‚  ¿"Ô¿#   ¿&?ÄÎ¿&D  ¿&^%¿&~   ¿'.ÄÚ¿'3  ¿'D¿'[   ¿)ÜÄŸ¿)ã  ¿)Æ.¿)◊   ¿*cÄæ¿*h  ¿*Ñ'¿*¶   ¿+%É÷¿+*  ¿+;¿+A  ¿+I¿+X  ¿+f¿+l  ¿+{¿.ˇÄ–¿/  ¿/¿/,   ¿9ì◊¿9í  ¿9ò¿9¶  ¿9¿9Ä¿MZâ:¿N.Ä¬/// Builds [TextSpan] from current editing value.
///
/// By default makes text in composing range appear as underlined.
/// Descendants can override this method to customize appearance of text.    ¿VòòÀ¿Vû  ¿V—Öo ¿V—¿V⁄ (¿V·	¿VË  ¿V¿Vˇ  ¿W¿W  ¿W'"¿W6  ¿WO ¿W^  ¿Wu¿W{  ¿Wã¿Wë  ¿W´¿W∫  ¿W…¿Wÿ  ¿WÊ¿Wı  ¿X¿X  ¿X¿X.  ¿XA¿XP  ¿X]¿Xl  ¿Xy¿X  ¿Xå¿Xõ  ¿Xß¿X≠  ¿Xº¿X¬  ¿X’¿X‰  ¿X¯¿Y  ¿Y¿Y$  ¿Y6¿Y<  ¿YG ¿YV  ¿Ym¿Y|  ¿Yå¿Yõ  ¿Y¶¿Y¨  ¿Yø#¿Y≈  ¿YË¿Y˜  ¿Z¿Z  ¿Z¿Z$  ¿Z5¿ZD  ¿ZU"¿Zd  ¿Z}3¿ZÉ  ¿Z∂1¿Zº  ¿ZÌ&¿ZÛ  ¿[#¿[(  ¿[B¿[Q  ¿[f¿[l  ¿[Ä¿[Ü  ¿[ö¿[©  !¿Y›¿Zô¿Zõ¿Zú¿Z™¿Z´¿Z—¿Z”¿Z‘¿Z·¿Z‚¿[¿[Ω¿[√¿[Ÿ¿[“¿[ƒ¿[’¿[„¿[È¿\¿\¿[Í¿\¿\¿\¿\>¿\ ¿\¿\"¿\2¿\=¿\3'¿]Ã¿]›  ¿]Î¿^  ¿^¿^  ¿^'$¿^7  ¿^O"¿^_  ¿^u"¿^Ç  ¿^õ$¿^µ  ¿^√¿^Œ  ¿^€¿^Ê  ¿^Ú¿^˝  ¿_	¿_  ¿_ ¿_+  ¿_7¿_B  ¿_M¿__  ¿_m¿_z  ¿_å¿_ô  ¿_¨¿_º  ¿_…!¿_›  ¿_Ó¿_¸  ¿`¿`  ¿`)¿`4  ¿`C,¿`]  ¿`s#¿`à  ¿`ö¿`Ø  ¿`π)¿`‘  ¿`Ê!¿`Ò  ¿a¿a  ¿a'¿a5  ¿aE¿aS  ¿ac¿ap  ¿aÄ¿aã  ¿a£,¿aª  ¿a”*¿aÍ  ¿b%¿b  ¿b*1¿bF  ¿b_¿bl  ¿bÄ ¿bë  ¿b§¿b±  ¿bƒ¿bœ   ¿\¿Å¿\‘  ¿\Â¿\Ò   ¿b‡Ü0¿b˚  ¿c¿c  ¿b‡¿b·¿iÜM¿i%  ¿i8¿iF  ¿iN¿i^  ¿i¿i ¿oeÅ’¿ok  ¿oôÄ∏ ¿oü¿o± ¿o∏¿o«  ¿o—¿o‡  ¿oÓ¿o˝  ¿p"¿p  ¿p5¿pD   ¿pU¿pb  ¿pk¿p{  ¿pà¿pò  ¿pß'¿p∫  ¿p“¿p›   ¿pÈO¿q   ¿pÈ¿pÍ ¿q<àË¿qB  ¿qöV ¿qö¿q±  
¿q»¿qµ¿q ¿q„¿q·¿qÀ¿q‰¿qÂ¿qÌ¿qÓ¿t÷%¿t· ¿t˙¿tˇ¿u  ¿tco¿tw    ¿u#?¿u:   ¿u#¿u$¿xzÅW¿xè   ¿xz¿x{¿qÙÄõ¿r   ¿qÙ¿qı¿rìÅW¿r§  ¿r¥¿r»  ¿rì¿rî¿sÓq¿sˇ   ¿sÓ¿sÔ¿ufÄÿ¿uw  ¿uá¿uè  ¿uf¿ug¿vBÇ4¿vS  ¿vd	¿vj  ¿vB¿vC¿y’M¿yË  ¿yÓ¿y¸  ¿y’¿y÷ ¿z&Ñ¿z,  ¿zXÅï ¿z^¿zr ¿zy¿zâ  ¿zì¿zö  ¿z®¿zØ  ¿zº¿zÀ  -¿z◊¿z›¿zÎ¿z‰¿zﬁ¿zÁ¿zı¿z˚¿{Î¿{¿{¿z¸¿{¿{¿{¿{Í¿{†¿{X¿{¿{%¿{V¿{&¿{1¿{3¿{4¿{H¿{I¿{d¿{m¿{û¿{n¿{y¿{{¿{|¿{ê¿{ë¿{¨¿{µ¿{·¿{∂¿{¡¿{√¿{ƒ¿{ÿ¿{Ÿ¿{Òl¿|YZ/// The size of the span, used in place of adding a placeholder size to the [TextPainter].  ¿|bÅﬂ¿|s  ¿|y¿|é  ¿|ò¿|†  ¿|∂'¿|‘  ¿|b¿|c¿|± ¿~EÜU¿ÇfÑ/// An interface for retriving the logical text boundary (left-closed-right-open)
/// at a given location in a document.
///
/// Depending on the implementation of the [_TextBoundary], the input
/// [TextPosition] can either point to a code unit, or a position between 2 code
/// units (which can be visually represented by the caret if the selection were
/// to collapse to that position).
///
/// For example, [_LineBreak] interprets the input [TextPosition] as a caret
/// location, since in Flutter the caret is generally painted between the
/// character the [TextPosition] points to and its previous character, and
/// [_LineBreak] cares about the affinity of the input [TextPosition]. Most
/// other text boundaries however, interpret the input [TextPosition] as the
/// location of a code unit in the document, since it's easier to reason about
/// the text boundary given a code unit in the text.
///
/// To convert a "code-unit-based" [_TextBoundary] to "caret-location-based",
/// use the [_CollapsedSelectionBoundary] combinator. ¿Çx ¿Ç~¿Çã    ¿Çí&¿Çß    ¿ÇºÄá¿ÉG/// Returns the leading text boundary at the given location, inclusive. ¿É,¿É:   ¿ÉGÄâ¿ÉüH/// Returns the trailing text boundary at the given location, exclusive. ¿Éπ¿É«   ¿É‘Äƒ¿Éﬁ  ¿É¿É˛    ¿ÑÌÅ≥¿ÑÛ  ¿Ö/ ¿Ö%¿Ö6 ¿Ö7¿Ö=   ¿ÖR3¿Öu ¿ÖR¿ÖS ¿Öär¿Ö£  ¿Öº¿Ö   ¿Öä¿Öã¿ÖˇÄü¿Ü  ¿Ü2¿Ü@  ¿Öˇ¿Ü  ¿átÉk¿áz  ¿á®1 ¿áÆ¿á¡ ¿á¬¿á»   ¿á›3¿à  ¿á›¿áﬁ ¿àÅH¿à.  ¿àG¿àU  ¿à¿à¿âaÅ|¿âz  ¿âî¿â¢  ¿âa¿âb ¿ã∏Ñ—¿ãæ  ¿ãÎ0 ¿ãÒ¿å ¿å¿å
   ¿å3¿åB ¿å¿å  ¿åWÅ,¿åp  ¿åâ¿åó  ¿åW¿åX¿çáÅs¿ç†  ¿ç∫¿ç»  ¿çá¿çà¿é˛Åâ¿è  ¿è&¿è4  ¿é˛¿éˇ ¿ê‘Éc¿ê⁄  ¿ë< ¿ë¿ë ¿ë¿ë  ¿ë'¿ë-   ¿ëB"¿ëZ  ¿ëi3¿ëå ¿ëi¿ëj ¿ë°ÅI¿ë∫  ¿ë”¿ë·  ¿ë°¿ë¢¿íÌÅH¿ì  ¿ì ¿ì.  ¿íÌ¿íÓ ¿îËÇP¿îÓ  ¿ïF ¿ï¿ï# ¿ï)¿ï/  ¿ï>¿ïD   ¿ï]"¿ïu  ¿ïÑ3¿ïß ¿ïÑ¿ïÖ ¿ïºÄ®¿ï’  ¿ïÓ¿ï¸  ¿ïº¿ïΩ¿ñhÄŒ¿ñÅ  ¿ñõ¿ñ©  ¿ñh¿ñi ¿óíÅŒ¿óò  ¿óƒ/ ¿ó ¿ó€ ¿ó‹¿ó‚   ¿ó˜3¿ò ¿ó˜¿ó¯ ¿ò/j¿òH  ¿òa¿òo  ¿ò/¿ò0¿òúÄ¬¿òµ  ¿òœ¿ò›  ¿òú¿òù ¿ôÏÉ,¿ôÚ  ¿ö"F ¿ö"¿ö7 ¿ö8¿ö>  ¿öP¿öV   ¿öl%¿öÄ  ¿öï%¿ö©  ¿öøÄº¿ö‡   ¿öø¿ö¿¿õÄ»¿õò  ¿õ±¿õø  ¿õ¿õÄ¿úKÄÀ¿úd  ¿ú~¿úå  ¿úK¿úL ¿ûÉó¿û  ¿ûMD ¿ûM¿ûh ¿ûi¿ûo  ¿ûÅ¿ûá   ¿ûï%¿û©  ¿ûæ¿û…  ¿û◊X¿û¯   ¿û◊¿ûÿ¿ü3Å6¿üL  ¿üe¿üs  ¿ü3¿ü4¿†mÅ9¿†Ü  ¿††¿†Æ  ¿†m¿†n ¿¢TÇ•¿¢Z  ¿¢ÉD ¿¢É¿¢ë ¿¢í¿¢ò  ¿¢¨¿¢≤   ¿¢À'¿¢ﬂ  ¿¢ˆ(¿£
  ¿£#Ä√¿£D   ¿£#¿£$¿£ÍÄÉ¿§  ¿§¿§*  ¿£Í¿£Î¿§qÄÜ¿§ä  ¿§§¿§≤  ¿§q¿§r ¿•Lá≤¿•R ¿•d&¿•d¿•©? ¿•©¿•∫ ¿•ª
¿•¡  ¿•«¿•Õ   ¿•Ï¿¶  ¿¶A¿¶4  ¿¨õa¿¨∞   ¿¨õ¿¨ú¿¶SÇ!¿¶]  ¿¶v¿¶à   ¿®xÑ¿®å  ¿®ì¿®ñ  ¿®û¿®≠  ¿®x¿®y ¿≠ êº¿≠ ¿≠!(¿≠!¿≠h{ ¿≠h¿≠Ç ¿≠à
¿≠é  ¿≠ò ¿≠û  ¿≠æ¿≠ƒ   ¿≠Á¿≠ˇ  ¿Æ&¿Æ  ¿Æ2A¿ÆY  ¿Æx'¿Æâ ¿Æù¿ΩsG¿Ωà   ¿Ωs¿Ωt¿ØÅz¿Ø  ¿Ø!¿Ø/   ¿∞ÂÅ@¿∞Í  ¿±¿±   ¿≤)ãF¿≤=  ¿≤D¿≤G  ¿≤O¿≤^  ¿≤)¿≤* ¿ΩæÜË¿Ωƒ  ¿æ<S ¿æ<¿æa ¿æb
¿æh  ¿æn¿æt   ¿æì¿æ´  ¿æ¥v¿ø  ¿ƒ<h¿ƒQ   ¿ƒ<¿ƒ=¿ø/Ö	¿øC  ¿øJ=¿øÇ  ¿øä¿øô  ¿ø/¿ø0 ¿ƒ®â]¿ƒÆ ¿ƒ◊(¿ƒ◊¿≈5 ¿≈¿≈F ¿≈G
¿≈M   ¿≈W¿≈o  ¿≈y.¿≈ì  ¿≈´¿≈∫  ¿ÕºG¿Õ—   ¿Õº¿ÕΩ¿≈ÃÇ»¿≈—    ¿»òÖ ¿»©  ¿»∞¿»≥  ¿»ª¿»   ¿»ò¿»ô ¿ŒÅ¸¿Œ  ¿ŒM ¿ŒM¿Œ] ¿Œ^
¿Œd   ¿Œn¿ŒÜ  ¿œªF¿œ–   ¿œª¿œº¿ŒêÅ'¿Œ§  ¿Œ´¿Œ¿  ¿Œ»¿Œ◊  ¿Œê¿Œë ¿–ÅÁ¿–  ¿–S! ¿–S¿–g ¿–h
¿–n   ¿–x¿–ê  ¿—|n¿—ë   ¿—|¿—}¿–öÄﬁ¿–´  ¿–≤¿–À  ¿–”¿–‚  ¿–ö¿–õ ¿“ÅÖû¿‘ôÇ/// Provides undo/redo capabilities for text editing.
///
/// Listens to [controller] as a [ValueNotifier] and saves relevant values for
/// undoing/redoing. The cadence at which values are saved is a best
/// approximation of the native behaviors of a hardware keyboard on Flutter's
/// desktop platforms, as there are subtle differences between each of these
/// platforms.
///
/// Listens to keyboard undo/redo shortcuts and calls [onTriggered] when a
/// shortcut is triggered that would affect the state of the [controller]. ¿‘»Ä´ ¿’¿’1/// Creates an instance of [_TextEditingHistory].¿’¿’+  ¿’5¿’D  ¿’S¿’b   ¿’wC¿’µ./// The child widget of [_TextEditingHistory]. ¿’øh¿÷?/// The [TextEditingController] to save the state of over time. ¿÷,Åô¿◊∫Å^/// Called when an undo or redo causes a state change.
///
/// If the state would still be the same before and after the undo/redo, this
/// will not be called. For example, receiving a redo when there is nothing
/// to redo will not call this method.
///
/// It is also not called when the controller is changed for reasons other
/// than undo/redo.  ¿◊ S¿◊Ò   ¿◊ ¿◊À ¿ÿ!àà¿ÿ'   ¿ÿgJ¿ÿä ¿ÿì¿ÿù¿ÿÆ¿ÿû¿ÿØ¿ÿ∞¿ÿµ6¿ÿ›  ¿ÿÔ¿ÿˆ  ¿Ÿ≤F¿Ÿ» ¿Ÿ›¿ŸÂ¿Ÿ˜¿ŸÚ¿ŸÊ¿ŸÙ ¿Ÿ˝C¿⁄  ¿⁄¿⁄   ¿⁄DC¿⁄I  ¿⁄O¿⁄_   ¿⁄ãÅ+¿⁄ê  ¿⁄ò¿⁄´   ¿€∫Ä¢¿€ø    ¿‹`ÄÍ¿‹q   ¿‹`¿‹a¿›NÅ¿›_  ¿›o¿›Ñ  ¿›N¿›O¿ﬁlÄÄ¿ﬁ}   ¿ﬁl¿ﬁm¿ﬁÅ∑¿ﬂ  ¿ﬂ	¿ﬂ  ¿ﬁ¿ﬁÒ ¿‡´à¿·c/// A data structure representing a chronological list of states that can be
/// undone and redone.¿· ¿· ¿·'8 ¿·R¿·\(/// Creates an instance of [_UndoStack].  ¿·c¿·q ¿·|¿·}¿·y¿·{¿·z¿·∆¿·œ  ¿·⁄j¿‚+/// Returns the current value of the stack.   ¿‚HÇe¿‚¿l/// Add a new state change to the stack.
///
/// Pushing identical objects will not create multiple entries. ¿‚≈¿‚»   ¿‰±Å¶¿ÂìÄ“/// Returns the current value after an undo operation.
///
/// An undo operation moves the current value to the previously pushed value,
/// if any.
///
/// Iff the stack is completely empty, then returns null.   ¿Ê[Åµ¿Á>Ä”/// Returns the current value after a redo operation.
///
/// A redo operation moves the current value to the value that was last
/// undone, if any.
///
/// Iff the stack is completely empty, then returns null.   ¿Ë^¿ËA%/// Remove everything from the stack.   ¿ËvC¿Ëâ   ¿Ëv¿Ëw     ¿È•É+¿ÍsÄø/// Returns a _Throttled that will call through to the given function only a
/// maximum of once per duration.
///
/// Only works for functions that take exactly one argument and return void.¿Í}¿Í}¿ÍÑ¿Íó  ¿Í¢"¿ÍΩ  ¿Í˜¿Í˝  ¿Î
 ÖnÄ›ÖÎt/// Signature for the callback that reports when the user changes the selection
/// (including the cursor location).  ÜÜ#  Ü-ÜE   ÜMÄùÜ¢L/// Signature for the callback that reports the app private command results.  ÜÃ   Ü‘    ¿—ÓÄë¿“>4/// A void function that takes a [TextEditingValue].  ¿“g¿“y  ¿“#¿“$¿ËΩx¿È@/// A function that can be throttled with the throttle function.¿È¿È ¿È'¿È*   ¿È7l¿Èv6/// A function that has been throttled by [_throttle].¿ÈÅ¿ÈÅ ¿Èï¿Èò    á≠Dáº á÷áﬁááÎáﬂáÌàf0àp àïâ!â' â5  í¢ <ÄÜÄ§Ä•Ä∫Ä÷Ä˝Ä˛ÅQÅ{Å∫Å„ÇÇ4Ç5ÇLÇdÇàÇùÇ¥ÇÕÇ‚É	É&ÉAÉ`ÉyÉñÉ±É’ÉˆÑÑ.ÑGÑ[ÑÑùÑºÑ◊ÑÿÖmÖnÖæÖ„ÜLÜMÜöÜÎÜÏá3áÇá≠áÛáÙà?àfàòàôà‰ââ=â>âkâoâÆâ˝äLäöäßä´ä˜ã8ã<ãçã⁄åå"åpåπç	çWç†çÏé7évéªéøèè.è2èÄè èﬁê*êuêôêùê˘ë	ëëëëpëóë·íí¡ìì>ìDìëìüì…îîîwî}î¡î·ïï*ï|ïÃññFñOñ}ñ~ñ¨ñÕóólóπó˜ó˝ò:òÜò”ò˙ôô3ôHôÑô¶ô≠ô±ô≤ôæôÁôÛö8öâö€õõ	õ%õ)õ*õ^õdõµõıúaú∏ù	ùYù•ùﬂûûûû¡û÷ûÍüüFüXüyü±üºü˚†††††5†;†ã†©†€°,°z°«¢¢¢H¢è¢‹££	£W£Ñ£≤£Ë§+§1§T§ß§≈§‰•2•6•7•W•]•®•⁄•‡¶1¶¶–ßßßrßvßwß©ßØß˝®H®V®\®≠®˚©L©ä©§©‹©‡©·™%™c™Æ™≤™≥™ˆ´9´ñ´ö´ú´ù´À´œ¨¨j¨~¨Ç¨÷≠)≠5≠L≠Ö≠ã≠Œ≠Á≠˛ÆÆ,ÆHÆeÆÅÆüÆ¡Æ¬ÆÆˆØ!Ø4Ø5ØbØhØ∫Ø¿ØÎØ˝Ø˛∞-∞3∞á∞ç∞∏∞Ã∞Õ±±±2±J±L±M±è±°±À±ˆ≤>≤b≤Ü≤™≤Œ≤Ú≥≥:≥^≥Ç≥¶≥À≥–≥—¥¥'¥=¥?¥@¥w¥⁄µµBµuµáµ√∂ ∂∂&∂0∂E∂É∂Ñ∂†∂°∂≈∂∆∂“∂Ò∂Ú∂˛∑1∑2∑~∑ú∑ù∑©∑√∑Ì∑Ó∏=∏á∏´∏¿∏ÿππXπzπëπ∂π√πÎ∫∫
∫∫T∫¢∫À∫ˇª9ªWªfªnªÜªåªçª≥ª‰ªËªÍªÎº	ºº]º•ºÏºˇΩΩΩ"ΩrΩ√æææVæZæ™æıæ˘ø<ø@øUøYø§øÛ¿ @¿ @¿ @d¿ @´¿ @ˆ¿ AD¿ Aë¿ Aﬂ¿ B*¿ By¿ Bü¿ B£¿ B⁄¿ BÎ¿ BÔ¿ C@¿ C\¿ C`¿ C¨¿ C˘¿ D$¿ D(¿ Di¿ Dm¿ D∫¿ D¸¿ E ¿ EI¿ Eò¿ Eÿ¿ EÎ¿ EÔ¿ F=¿ Fç¿ F±¿ Fµ¿ FÔ¿ FÛ¿ G?¿ Gå¿ G–¿ H ¿ Hg¿ Hâ¿ Hç¿ H›¿ I$¿ Is¿ Iü¿ I£¿ I‡¿ I‰¿ J—¿ K|¿ L'¿ M¿ M¯¿ M¸¿ NS¿ NW¿ OA¿ P+¿ Q,¿ R+¿ Sp¿ Tn¿ Uò¿ Vc¿ Vg¿ Vî¿ Vò¿ WÇ¿ Xl¿ Y*¿ YŸ¿ [ ¿ […¿ \ê¿ ]=¿ ]z¿ ]~¿ ]î¿ ]ò¿ ]ˇ¿ ^f¿ _¿ _Ã¿ `z¿ `‡¿ aó¿ aõ¿ a∫¿ aæ¿ b¿ bN¿ bõ¿ bÎ¿ c8¿ cm¿ c•¿ c©¿ cË¿ d¿ d¿ df¿ d±¿ dµ¿ d¸¿ eI¿ e|¿ e¶¿ eπ¿ eΩ¿ e¯¿ f+¿ f/¿ fj¿ fn¿ f∏¿ f˘¿ g¿ g¿ gc¿ g∞¿ g˚¿ hE¿ h¿ hã¿ h≠¿ hÕ¿ i¿ i$¿ i*¿ i2¿ i6¿ iI¿ iM¿ i[¿ i_¿ iÆ¿ iÏ¿ j¿ jB¿ jH¿ jñ¿ jÊ¿ k&¿ k,¿ k{¿ kÃ¿ l	¿ lT¿ lZ¿ l©¿ l›¿ l„¿ m3¿ m|¿ mÀ¿ n¿ nf¿ n≠¿ nˇ¿ o¿ o¿ o=¿ oZ¿ ou¿ oò¿ o∂¿ o”¿ o˘¿ p¿ pB¿ p[¿ pw¿ pñ¿ pø¿ pÂ¿ p˝¿ q¿ q(¿ q?¿ qR¿ ql¿ qá¿ q§¿ q’¿ qÒ¿ r¿ r.¿ rG¿ rc¿ rÑ¿ rû¿ r’¿ rÈ¿ s¿ s¿ s9¿ sV¿ sx¿ sß¿ sΩ¿ sÊ¿ t¿ t¿ t0¿ tX¿ to¿ tñ¿ tœ¿ u¿ u;¿ uk¿ u°¿ u«¿ u‚¿ u˙¿ v ¿ vD¿ vo¿ và¿ vØ¿ v«¿ v‡¿ w¿ w0¿ wS¿ wu¿ w¬¿ wÊ¿ x
¿ xz¿ xÍ¿ y¿ yA¿ yb¿ yÑ¿ y¢¿ y∆¿ yÙ¿ z!¿ zO¿ z|¿ z®¿ z ¿ z˚¿ {,¿ {;¿ {à¿ {º¿ {∆¿ {Ê¿ {ı¿ |2¿ |w¿ |Å¿ |◊¿ |˘¿ }(¿ }N¿ }x¿ }◊¿ ~¿ ~¿ ~4¿ ~â¿ ~¶¿ ~“¿  ¿ +¿ S¿ w¿ è¿ ™¿ Ÿ¿ Ä¿ Ä,¿ ÄO¿ Äf¿ Äî¿ Äø¿ Ä‚¿ Å¿ Å,¿ ÅP¿ Åj¿ Åè¿ Å≈¿ ÅÊ¿ ÇR¿ Çy¿ Çú¿ Ç‹¿ É-¿ É<¿ ÉZ¿ Éá¿ Éà¿ ÉÆ¿ Éÿ¿ ÉŸ¿ Ñ¿ Ñ-¿ Ñ.¿ Ñp¿ Ñ≤¿ Ñ∏¿ Ñﬂ¿ ÑÂ¿ Ö¿ Ö-¿ ÖP¿ ÖQ¿ Öå¿ Öœ¿ Ö’¿ Ü¿ Üj¿ Ü∫¿ ÜÕ¿ Ü”¿ Ü¸¿ á¿ á+¿ á,¿ áV¿ áÜ¿ áá¿ á¬¿ áÈ¿ áÍ¿ à"¿ àI¿ àO¿ àã¿ à÷¿ à‹¿ â¿ â¿ â3¿ â4¿ âÇ¿ âà¿ â÷¿ ä¿ ä¿ ä7¿ ä=¿ äM¿ äS¿ äú¿ ä¥¿ äµ¿ ä›¿ ä„¿ ã3¿ ãÇ¿ ãœ¿ ã˜¿ å¿ å¿ åH¿ åN¿ åö¿ åÍ¿ ç¿ ç¿ ç'¿ ç-¿ çq¿ çî¿ çï¿ çœ¿ çÌ¿ çÛ¿ éE¿ éZ¿ é`¿ ép¿ év¿ éœ¿ éË¿ éÈ¿ è$¿ èL¿ èR¿ èz¿ èè¿ è©¿ è™¿ èÒ¿ ê¿ ê¿ êb¿ êã¿ êå¿ ê’¿ êı¿ êˆ¿ ë)¿ ëB¿ ëC¿ ë}¿ ë±¿ ë∑¿ ë˛¿ íA¿ íÖ¿ í–¿ ì¿ ì!¿ ìm¿ ì∂¿ î¿ î¿ î¿ îb¿ î•¿ î´¿ ï¿ ïh¿ ï}¿ ïÉ¿ ïÿ¿ ñ(¿ ñj¿ ñà¿ ñß¿ ñÌ¿ ñÛ¿ ó(¿ ó,¿ óM¿ óN¿ óá¿ ó∫¿ ó¿¿ ó¯¿ ò¿ ò*¿ ò+¿ òh¿ òé¿ òî¿ òŸ¿ ô ¿ ô¿ ôT¿ ô°¿ ôÔ¿ ö8¿ öà¿ öò¿ öû¿ ö÷¿ öÎ¿ õ¿ õ¿ õT¿ õõ¿ õµ¿ õª¿ ú¿ ú:¿ ú@¿ ú¿ úÖ¿ úï¿ úõ¿ úÌ¿ úÛ¿ ù¿ ù7¿ ù8¿ ùx¿ ù∞¿ ù∂¿ ù˝¿ ûO¿ ûU¿ ûç¿ û•¿ û¶¿ ûÂ¿ ü¿ ü#¿ üt¿ üì¿ üô¿ üÍ¿ †+¿ †@¿ †a¿ †b¿ †ì¿ †ô¿ †Ø¿ † ¿ †À¿ °	¿ °¿ °P¿ °†¿ °˘¿ ¢¿ ¢¿ ¢J¿ ¢P¿ ¢ï¿ ¢¡¿ ¢¬¿ £¿ £>¿ £D¿ £à¿ £ü¿ £ƒ¿ £≈¿ £˝¿ §K¿ §Q¿ §°¿ §‘¿ §⁄¿ •$¿ •@¿ •F¿ •î¿ •€¿ ¶,¿ ¶T¿ ¶Z¿ ¶´¿ ¶¸¿ ßM¿ ßâ¿ ßè¿ ßﬁ¿ ®+¿ ®[¿ ®a¿ ®≠¿ ®ª¿ ®Õ¿ ®◊¿ ®›¿ ©,¿ ©|¿ ©Ω¿ ©À¿ ©Î¿ ©ı¿ ©˚¿ ™F¿ ™á¿ ™ï¿ ™≤¿ ™º¿ ™¬¿ ´¿ ´>¿ ´L¿ ´v¿ ´Ä¿ ´Ü¿ ´ñ¿ ´ú¿ ´·¿ ´ˆ¿ ¨G¿ ¨\¿ ¨s¿ ¨t¿ ¨¨¿ ¨¸¿ ≠¿ ≠R¿ ≠Ö¿ ≠ã¿ ≠›¿ Æ/¿ Æ5¿ Æã¿ Æë¿ Æ‚¿ Ø-¿ Ø?¿ ØE¿ Øñ¿ ØÂ¿ ∞¿ ∞¿ ∞e¿ ∞∂¿ ∞–¿ ∞÷¿ ±!¿ ±E¿ ±S¿ ±p¿ ±z¿ ±Ä¿ ±Œ¿ ≤¿ ≤8¿ ≤F¿ ≤o¿ ≤y¿ ≤¿ ≤ó¿ ≤ù¿ ≤≠¿ ≤≥¿ ≥ ¿ ≥K¿ ≥g¿ ≥|¿ ≥Õ¿ ≥‚¿ ≥˘¿ ≥˙¿ ¥1¿ ¥v¿ ¥|¿ ¥√¿ ¥ˇ¿ µ¿ µQ¿ µu¿ µ{¿ µî¿ µö¿ µÎ¿ ∂2¿ ∂8¿ ∂k¿ ∂y¿ ∂â¿ ∂¬¿ ∂ ¿ ∂‘¿ ∂È¿ ∂ˇ¿ ∑ ¿ ∑9¿ ∑Ü¿ ∑ï¿ ∑õ¿ ∑Î¿ ∏;¿ ∏A¿ ∏j¿ ∏¿ ∏“¿ ∏Í¿ π¿ π¿ π7¿ π=¿ πã¿ π™¿ π∞¿ πÒ¿ ∫A¿ ∫å¿ ∫´¿ ∫¨¿ ∫Ì¿ ª:¿ ª@¿ ªç¿ ª◊¿ º'¿ º-¿ º=¿ ºC¿ ºî¿ º‡¿ ºÛ¿ ΩC¿ Ωí¿ Ω»¿ Ω›¿ æ¿ æ¿ æL¿ æÑ¿ æä¿ æ ¿ æı¿ ø
¿ ø.¿ ø/¿ øn¿ øò¿ øô¿ ø“¿ ¿¿ ¿I¿ ¿O¿ ¿î¿ ¿€¿ ¡¿ ¡B¿ ¡H¿ ¡ç¿ ¡“¿ ¡˝¿ ¬¿ ¬S¿ ¬´¿ ¬Ú¿ ¬¯¿ √¿ √\¿ √£¿ √©¿ ƒ¿ ƒ¿ ƒ/¿ ƒ5¿ ƒk¿ ƒ§¿ ƒ«¿ ≈¿ ≈b¿ ≈≠¿ ≈€¿ ≈·¿ ∆$¿ ∆i¿ ∆±¿ «¿ «P¿ «w¿ «å¿ «í¿ «¢¿ «®¿ «Ë¿ ».¿ »q¿ »±¿ »ˇ¿ …B¿ …k¿ …l¿ …≠¿   ¿  ¿  %¿  r¿  ö¿  †¿  Ô¿ À?¿ À[¿ Àa¿ À±¿ Ã ¿ ÃK¿ Ã¿ ÃÖ¿ Ã◊¿ ÃÏ¿ Õ¿ Õ¿ ÕQ¿ Õ°¿ ÕÆ¿ Õ¥¿ Õ˛¿ ŒL¿ Œí¿ Œß¿ Œ“¿ Œ”¿ œ¿ œ]¿ œc¿ œÆ¿ œæ¿ œƒ¿ –¿ –J¿ –P¿ –`¿ —¿ —d¿ —î¿ “"¿ “r¿ “†¿ “µ¿ “Ì¿ “Ó¿ ”0¿ ”¿ ”ê¿ ”•¿ ”€¿ ”‹¿ ‘$¿ ‘S¿ ‘T¿ ‘ì¿ ‘Õ¿ ‘”¿ ’!¿ ’r¿ ’Ω¿ ÷¿ ÷?¿ ÷E¿ ÷U¿ ÷[¿ ÷©¿ ÷Ï¿ ◊¿ ◊4¿ ◊5¿ ◊Å¿ ◊è¿ ◊ï¿ ◊›¿ ◊„¿ ÿ4¿ ÿÑ¿ ÿ”¿ ÿÔ¿ Ÿ¿ Ÿ¿ Ÿ]¿ Ÿ¨¿ Ÿ≤¿ Ÿ€¿ ⁄ ¿ ⁄¿ ⁄<¿ ⁄`¿ ⁄f¿ ⁄}¿ ⁄É¿ ⁄À¿ €¿ €d¿ €¥¿ €‘¿ €È¿ ‹¿ ‹¿ ‹B¿ ‹e¿ ‹k¿ ‹æ¿ ‹”¿ ‹Ò¿ ‹Ú¿ ›.¿ ›e¿ ›k¿ ›ó¿ ›¨¿ › ¿ ›À¿ ﬁ¿ ﬁ8¿ ﬁ>¿ ﬁé¿ ﬁ≤¿ ﬁ÷¿ ﬁ◊¿ ﬂ¿ ﬂ1¿ ﬂ2¿ ﬂv¿ ﬂô¿ ﬂö¿ ﬂ‰¿ ﬂÍ¿ ‡)¿ ‡Y¿ ‡Z¿ ‡§¿ ‡™¿ ‡Ë¿ ·¿ ·¿ ·=¿ ·C¿ ·v¿ ·|¿ ·¢¿ ·…¿ · ¿ ‚¿ ‚j¿ ‚p¿ ‚‘¿ „¿ „v¿ „Ï¿ „Ú¿ ‰¿ ‰/¿ ‰Q¿ ‰R¿ ‰ú¿ ‰‡¿ ‰ˆ¿ ‰¸¿ ÂA¿ Â¿ Âæ¿ Âƒ¿ Ê¿ ÊM¿ Êv¿ Ê|¿ Êî¿ Ê©¿ Ê“¿ Ê”¿ Á ¿ Áo¿ Áá¿ Áç¿ Á›¿ Ë¿ Ë¿ ËH¿ Ëx¿ Ëy¿ Ëµ¿ Ë‚¿ Ë„¿ È#¿ Èl¿ Èr¿ È≠¿ È≥¿ È÷¿ ÈÎ¿ Í¿ Í¿ ÍU¿ Íõ¿ Í°¿ ÍÎ¿ ÍÒ¿ Î¿ Î&¿ Î,¿ Îw¿ Î¬¿ ÎŸ¿ Îˇ¿ Ï ¿ Ï?¿ ÏÉ¿ Ïâ¿ Ï®¿ ÏÆ¿ Ï∆¿ Ï€¿ Ï˘¿ Ï˙¿ Ì:¿ Ìf¿ Ìl¿ Ì§¿ ÌÕ¿ Ì‚¿ Ó¿ Ó¿ Ó[¿ Ó≠¿ Óø¿ Ó≈¿ Ô¿ Ôc¿ Ô¶¿ ÔÙ¿ %¿ +¿ y¿ ¢¿ ®¿ …¿ œ¿ Ú¿ ¯¿ ÒE¿ Òy¿ Ò¿ Òù¿ Ú¿ Úq¿ Ú∆¿ Û¿ Ûl¿ Û©¿ ÛØ¿ Û“¿ Ûÿ¿ Ù(¿ Ùy¿ Ù≈¿ ÙÊ¿ ÙÏ¿ ı3¿ ı9¿ ıá¿ ı—¿ ı◊¿ ˆ$¿ ˆt¿ ˆ¿¿ ˜¿ ˜\¿ ˜¨¿ ˜≤¿ ¯ ¿ ¯M¿ ¯õ¿ ¯Î¿ ˘<¿ ˘M¿ ˘S¿ ˘û¿ ˘Ì¿ ˙4¿ ˙:¿ ˙Ü¿ ˙°¿ ˙ß¿ ˙ı¿ ˚C¿ ˚ë¿ ˚ﬂ¿ ¸%¿ ¸ì¿ ¸ô¿ ¸Æ¿ ¸Ú¿ ˝¿ ˝¿ ˝k¿ ˝q¿ ˝∏¿ ˝¸¿ ˛$¿ ˛%¿ ˛[¿ ˛a¿ ˛Ñ¿ ˛ü¿ ˛†¿ ˛‚¿ ˛¯¿ ˛˛¿ ˇI¿ ˇé¿ ˇî¿ ˇﬂ¿ +¿ 1¿ y¿ æ¿ ¯¿ ˛¿¿¿a¿s¿í¿ì¿À¿¿¿i¿≠¿¬¿»¿¿\¿†¿∏¿æ¿¿W¿e¿ç¿é¿„¿¿¿o¿p¿π¿Â¿¿/¿6¿p¿ª¿¡¿¬¿¯¿˘¿J¿ù¿Ô¿C¿J¿õ¿Ï¿	#¿	6¿	]¿	~¿	°¿	¯¿
4¿
ë¿
Œ¿
¿`¿û¿Ÿ¿¿U¿≤¿¿l¿°¿˛¿[¿ó¿”¿0¿n¿À¿¿?¿Ç¿ﬂ¿<¿|¿Ÿ¿¿¿ ¿n¿î¿µ¿¡¿“¿˜¿¿?¿d¿u¿}¿É¿Ñ¿ù¿√¿…¿ ¿¿\¿£¿„¿¿T¿ê¿À¿¿9¿Ä¿∆¿¿U¿î¿“¿¿J¿á¿ ¿¿;¿p¿µ¿Ê¿¿H¿{¿Æ¿Í¿"¿W¿Ü¿ª¿¿&¿\¿è¿≈¿ ¿3¿c¿§¿Ì¿9¿p¿∑¿˛¿E¿å¿“¿ ¿ ^¿ ù¿ ÿ¿!¿!a¿!¢¿!Ê¿"&¿"l¿"≤¿"ı¿#M¿#ã¿#∏¿#Î¿#Ú¿#Û¿$6¿$:¿$;¿$G¿$Å¿$Ç¿$é¿$”¿$˛¿%X¿%§¿&¿&^¿&Ω¿'d¿(¿(v¿(°¿(˙¿)_¿)∂¿*¿*Z¿*•¿*˝¿+Y¿+√¿,8¿,§¿-¿-é¿-ı¿.x¿.ı¿.˘¿.˚¿.¸¿/¿0¿0¿0V¿0ü¿0≤¿0⁄¿0ﬁ¿1¿1¿1Ä¿1”¿2¿2`¿2a¿2é¿2π¿2∫¿2È¿3d¿3e¿3ò¿3œ¿4¿4¿4#¿4$¿4Q¿4]¿4°¿4¢¿4Ú¿4Û¿5B¿5P¿5V¿5§¿5Ò¿5˜¿6B¿6å¿6í¿6±¿6÷¿6¯¿72¿7y¿7z¿7≈¿8¿8R¿8S¿8ä¿8ã¿8¨¿8≠¿8π¿8¿8Ò¿9R¿9S¿9_¿9æ¿9ø¿9À¿:¿:¿:%¿:q¿:r¿:~¿;¿;¿;6¿;H¿;í¿;ö¿;û¿;ü¿;ﬁ¿<%¿<M¿<É¿<â¿<™¿<Æ¿<Ø¿<‹¿<Ë¿=¿=\¿={¿=≤¿=¿¿=∆¿=ı¿>=¿>o¿>ß¿>¡¿>¬¿>È¿?
¿?-¿?P¿?u¿?Ü¿?´¿?–¿@¿@<¿@Z¿@Ö¿@ﬂ¿@Ó¿A¿A&¿A7¿A?¿AE¿Ae¿Ai¿Aj¿Añ¿A¢¿A’¿B¿B¿B¿BZ¿Bâ¿B®¿B…¿B◊¿B›¿C%¿Cr¿C§¿CÓ¿D)¿D@¿D|¿DÜ¿Dê¿D•¿D´¿DÀ¿Dœ¿D–¿DÛ¿Dˇ¿E=¿EX¿Ef¿El¿E¨¿EÀ¿EÈ¿E˜¿E˝¿F-¿Fh¿F∑¿Fœ¿F›¿F„¿F‰¿G1¿GH¿G£¿Gı¿H;¿HB¿HC¿Hc¿H§¿H±¿H∏¿HÍ¿I4¿Io¿IÜ¿I¬¿IÃ¿I÷¿IÎ¿IÒ¿Iı¿Iˆ¿J¿J&¿JV¿Já¿J—¿JË¿Jˆ¿J¸¿K¿K=¿Kö¿K£¿K∞¿K∑¿KÈ¿L!¿L'¿L+¿L,¿LB¿LC¿LO¿Ld¿L{¿Lπ¿L¯¿M/¿Mt¿M≠¿M±¿M≤¿N¿N$¿NC¿ND¿NP¿Nq¿Nî¿Nï¿N·¿O¿OJ¿Oz¿Oª¿O¡¿O¬¿O¿P¿PG¿Px¿P∂¿P¿¿P ¿P–¿P—¿Q¿QO¿Q~¿Q®¿Q÷¿QÛ¿R0¿R}¿Rù¿R∫¿R¬¿R»¿R…¿S3¿SA¿SG¿SH¿Sì¿S€¿Sˇ¿T%¿T3¿T9¿Td¿Tä¿T√¿Tﬂ¿TÁ¿U$¿U;¿UC¿UI¿UM¿UN¿UZ¿Uã¿U±¿UÊ¿V-¿Vn¿Vô¿Vü¿VË¿W¿W¿W\¿W]¿Wö¿W˜¿X8¿X>¿X?¿Xr¿X±¿XÍ¿Y¿Y	¿Y
¿YK¿Yæ¿Z¿Z¿Z¿Z5¿Z\¿Zé¿Z¨¿Z≤¿Z≥¿Z‹¿[¿[l¿[t¿[z¿[{¿[¶¿[“¿\#¿\B¿\c¿\ã¿\≥¿\◊¿\ˇ¿](¿]O¿]Z¿]b¿]h¿]“¿]Ù¿]˙¿]˛¿]ˇ¿^¿^¿^H¿^{¿^Ω¿^Ï¿_¿_<¿_^¿_z¿_ì¿_»¿_˘¿`¿`9¿`s¿`•¿`Ê¿a¿a0¿aE¿aì¿aó¿aò¿aΩ¿aæ¿b	¿b¿b[¿bü¿b¿c¿c¿cd¿có¿cÕ¿cŒ¿c⁄¿d¿d¿d!¿dU¿d¢¿dÚ¿e;¿e<¿eä¿e´¿e‘¿e‚¿eË¿eÈ¿f¿fU¿fo¿f™¿f∞¿fﬁ¿fﬂ¿f˙¿gF¿gÄ¿g¬¿g–¿g÷¿g◊¿h#¿hL¿hÛ¿i ¿i¿i;¿i<¿iw¿i±¿j¿jk¿jl¿jœ¿k)¿kj¿kp¿kq¿k¿¿l¿l]¿l{¿l∞¿lœ¿m¿mY¿mà¿m£¿m©¿m≠¿mÆ¿m∫¿mÈ¿mˇ¿n#¿nn¿n∂¿n ¿nÁ¿o ¿o*¿o9¿oZ¿oy¿oö¿oø¿o‚¿p¿p:¿pI¿pt¿pû¿pø¿p‡¿q¿q*¿qu¿qæ¿qˆ¿r¿r¿r¿r¿r¿re¿rî¿rò¿rô¿r„¿r¸¿r˝¿sN¿s[¿s~¿s¿s…¿sÁ¿sË¿t¿t<¿t=¿té¿tﬁ¿u$¿u}¿u~¿uä¿u∆¿v¿v¿vE¿v_¿vâ¿vƒ¿vˆ¿w¿w(¿wy¿wõ¿w∆¿w«¿x4¿xà¿xâ¿x◊¿y¿yh¿yw¿y¢¿yÏ¿zT¿zU¿z∏¿{C¿{£¿{≤¿{⁄¿|¿|Y¿|ê¿}¿}¿}!¿}'¿}+¿},¿}R¿}œ¿~¿~n¿~Ω¿<¿ª¿√¿·¿Ä¿Ä"¿ÄC¿ÄP¿Äñ¿Äˆ¿ÅV¿ÅW¿Å‰¿ÅÍ¿ÅÓ¿ÅÔ¿Ç¿Çm¿Ç∏¿Ç‰¿Ç¿É¿É8¿Én¿Éé¿É¶¿Éƒ¿Ñ¿Ñ$¿Ñ,¿Ñ9¿Ñw¿Ñ«¿Ö¿Ö2¿ÖM¿Ög¿Öå¿Ö∏¿Ö›¿Ü ¿Ü'¿ÜL¿Ü{¿Ü†¿Ü∆¿ÜÙ¿á¿áD¿áW¿á|¿á¶¿áπ¿á‚¿à¿à#¿à-¿à5¿à;¿à<¿à~¿àù¿à´¿à±¿à≤¿àı¿àˇ¿â¿â@¿ât¿âí¿â®¿âƒ¿ä¿ä¿ä ¿ä!¿äo¿ä¿¿ã¿ã:¿ãv¿ã}¿ãŒ¿å¿ål¿åz¿åì¿å∑¿åΩ¿å¡¿å¬¿å›¿åﬁ¿ç/¿ço¿çu¿çƒ¿é¿é1¿éK¿ée¿éi¿éj¿é∫¿è¿è¿èZ¿èf¿è~¿èò¿è§¿è¿¿ê¿ê¿ê?¿êC¿êD¿êq¿ê®¿ê∂¿êº¿êÏ¿ë&¿ë4¿ë:¿ëq¿ë§¿ë®¿ë©¿ë„¿í
¿í/¿í3¿í4¿íg¿íò¿íô¿íÊ¿ì5¿ìÑ¿ìò¿ìù¿ìÈ¿î:¿îà¿îô¿îœ¿ï¿ïX¿ï^¿ï_¿ïí¿ïµ¿ï“¿ï”¿ïÏ¿ñ&¿ñR¿ñÑ¿ñÕ¿ó¿óV¿ó}¿óä¿óÿ¿ò)¿ò_¿òê¿ò≠¿ò»¿ô¿ô¿ô¿ôa¿ôú¿ôı¿ö¿ö"¿ö#¿öq¿öÑ¿ö±¿ö‰¿õ¿õH¿õO¿õP¿õò¿õı¿õ˘¿õ˙¿úE¿úï¿ú§¿ù¿ù¿ù1¿ùZ¿ùh¿ùn¿ùé¿ù¿¿ù¡¿û¿ûU¿ûk¿ût¿û¡¿ü¿ü_¿üÄ¿üÃ¿†*¿†}¿†û¿†ƒ¿†Ê¿°¿°.¿°B¿°j¿°é¿°∂¿°ﬂ¿¢¿¢¿¢6¿¢H¿¢d¿¢≥¿¢ﬁ¿£¿£¿£L¿£Y¿£}¿£É¿£á¿£à¿£±¿£–¿£ı¿§¿§G¿§M¿§Q¿§R¿§Å¿§¡¿§ﬂ¿§¸¿•#¿•M¿•S¿•W¿•X¿•Ñ¿•™¿•—¿•ﬂ¿•Â¿¶¿¶@¿¶D¿¶è¿¶î¿¶·¿ß.¿ß]¿ßÉ¿ß¨¿ßÌ¿ß˚¿®¿®$¿®E¿®r¿®s¿®÷¿©?¿©ë¿©ª¿©º¿©Ê¿©¯¿™¿™¿™?¿™a¿™á¿™Æ¿™”¿™€¿™¸¿´+¿´/¿´0¿´1¿´=¿´Y¿´x¿´∞¿´”¿¨¿¨E¿¨K¿¨O¿¨P¿¨â¿¨è¿¨›¿≠+¿≠y¿≠»¿≠Á¿Æ¿Æ¿Æ5¿ÆB¿Æ∂¿Æº¿Æ¿¿Æ¡¿Æı¿Ø¿Ø1¿Ø\¿Øk¿Øë¿Ø≥¿Øª¿Ø¡¿Ø≈¿Ø∆¿ØÚ¿∞¿∞ ¿∞!¿∞D¿∞r¿∞õ¿∞≥¿∞»¿∞Ë¿±¿±F¿±u¿±ô¿±Ã¿±Î¿≤¿≤]¿≤d¿≤h¿≤i¿≤ñ¿≤Ó¿≥=¿≥ã¿≥Æ¿≥Û¿¥¿¥¿¥¿¥5¿¥6¿¥z¿¥æ¿µ¿µ@¿µn¿µÉ¿µî¿µ¿¿µÁ¿∂¿∂@¿∂k¿∂ë¿∂ª¿∂÷¿∂Â¿∑¿∑)¿∑F¿∑P¿∑_¿∑e¿∑ë¿∑µ¿∑’¿∑‚¿∏	¿∏,¿∏;¿∏f¿∏n¿∏µ¿∏›¿∏„¿π0¿πW¿πè¿πô¿π“¿πÛ¿∫'¿∫E¿∫[¿∫w¿∫…¿∫”¿∫Ÿ¿∫⁄¿ª*¿ªJ¿ªy¿ªî¿ªö¿ªû¿ªü¿ª∫¿º¿ºF¿ºi¿ºm¿ºn¿º≥¿Ω¿ΩD¿ΩE¿Ωq¿Ωr¿Ωµ¿Ω‹¿ΩÍ¿Ω¿æ¿æZ¿æÖ¿æÕ¿æ›¿æÂ¿æÊ¿ø*¿ø+¿øy¿ø≥¿øÌ¿¿'¿¿q¿¿û¿¿◊¿¿Ô¿¡¿¡¿¡b¿¡~¿¡≠¿¡≈¿¡“¿¬¿¬6¿¬l¿¬Ö¿¬ê¿¬ò¿¬ô¿¬‘¿¬˛¿¬ˇ¿√V¿√W¿√r¿√ó¿√∂¿√„¿ƒ
¿ƒ¿ƒ:¿ƒw¿ƒ§¿ƒÀ¿ƒ÷¿ƒÂ¿≈¿≈A¿≈~¿≈â¿≈ë¿≈ô¿≈ù¿≈û¿≈¬¿≈√¿≈œ¿≈Î¿∆?¿∆É¿∆±¿∆ª¿«¿«d¿«π¿«Û¿«˚¿»¿»N¿»R¿»S¿»Ä¿»Ú¿…D¿…ì¿…†¿…Ì¿ ;¿ à¿ ÷¿À¿ÀE¿À¢¿ÀÈ¿ÀÍ¿Ã¿Ã¿ÃM¿Ã^¿Ã”¿ÃÁ¿Õ
¿Õ@¿Õ`¿Õx¿Õñ¿Õﬁ¿ÕÍ¿ÕÚ¿Õ¯¿Õ˘¿ŒF¿Œá¿Œù¿Œ±¿œ¿œM¿œ†¿œ∞¿œÃ¿œË¿–¿–S¿–ã¿–ë¿–®¿–¥¿–·¿—¿—:¿—Z¿—r¿—ê¿—–¿—‹¿—‰¿—Í¿—Î¿—ˇ¿“¿“¿“"¿“à¿“Ï¿“¿“Ò¿”>¿”r¿”á¿”’¿”÷¿‘$¿‘r¿‘ì¿‘®¿‘Á¿‘Ë¿’ ¿’5¿’x¿’y¿’°¿’¡¿’¬¿÷¿÷X¿÷v¿÷w¿÷î¿◊¿◊¿◊;¿◊I¿◊O¿◊k¿◊ö¿◊À¿◊Ÿ¿◊ﬂ¿ÿ¿ÿo¿ÿ|¿ÿﬁ¿ÿ‰¿ÿË¿ÿÈ¿Ÿ¿Ÿ.¿Ÿí¿ŸΩ¿Ÿ ¿Ÿ˘¿⁄¿⁄¿⁄!¿⁄"¿⁄J¿⁄h¿⁄∑¿⁄Œ¿€a¿€n¿€±¿‹¿‹¿‹{¿‹Å¿‹Ö¿‹Ü¿‹¿¿‹€¿›
¿›&¿›?¿›Y¿›Å¿›á¿›ã¿›å¿›∑¿ﬁ¿ﬁ¿ﬁ%¿ﬁt¿ﬁé¿ﬁî¿ﬁò¿ﬁô¿ﬁø¿ﬁË¿ﬂ¿ﬂ?¿ﬂè¿ﬂ∞¿ﬂ˜¿‡;¿‡?¿‡@¿‡_¿‡ä¿‡±¿‡·¿‡ˆ¿·D¿·u¿·ƒ¿·‚¿‚¿‚#¿‚J¿‚†¿‚¸¿„¿„¿„¿„<¿„[¿„z¿„á¿„ª¿„Û¿„˘¿‰¿‰¿‰¿‰0¿‰J¿‰j¿‰â¿‰®¿‰©¿‰ﬁ¿Â¿Â¿Â¿ÂL¿ÂZ¿Â`¿Â•¿Â˜¿Ê¿Ê¿Ê¿Êk¿Ê¿ÁO¿Á´¿Á÷¿Ë¿ËL¿Ëç¿Ëø¿È¿È©¿È√¿ÈÁ¿Í¿Í(¿ÍY¿Íá¿ÍŒ¿Íı¿Î¿Î2¿ÎK¿ÎW¿ÎX¿Î™¿Ïa¿ÏÄ¿Ïô¿Ï•¿Ï¶¿Ï„¿Ì¿Ì"¿Ì/¿Ì}¿Ì´¿Ìƒ¿Ì–¿Ì¿Ì˚¿Ó*¿ÓO¿Óg¿Óq¿Ó˝¿Ô¿Ô¿Ô´¿Ô√¿ÔÕ¿Ô‚¿:¿p¿v¿z¿{¿û¿Ω¿Í¿Ò/¿Òy¿Òò¿Ò˘¿Ú&¿ÚE¿ÚK¿ÚO¿ÚP¿Ú†¿ÚÔ¿Û=¿Ûé¿Û«¿ÛÔ¿Ù&¿ÙE¿Ù\¿Ù±¿Ù˘¿ı¿ıc¿ı±¿ˆ¿ˆ¿ˆ9¿ˆv¿ˆ‹¿ˆ‚¿ˆÊ¿ˆÁ¿˜¿˜*¿˜}¿˜∞¿¯¿¯v¿¯≠¿¯µ¿˘¿˘¿˘!¿˘"¿˘G¿˘ú¿˙¿˙¿˙#¿˙$¿˙U¿˙[¿˙™¿˙›¿˚H¿˚I¿˚U¿˚à¿˚â¿˚‘¿˚’¿˚·¿¸;¿¸¿¸Õ¿¸˛¿˝*¿˝C¿˝^¿˝ï¿˝õ¿˝ú¿˝Ï¿˛;¿˛Ñ¿˛©¿˛—¿˛˙¿ˇ¿ˇ%¿ˇ3¿ˇ9¿ˇ:¿ˇw¿ˇ{¿ˇ|¿ˇà¿ˇ∂¿  ¿ L¿ M¿ Ä¿ ∫¿ æ¿ ø¿¿¿]¿°¿≠¿ƒ¿¿`¿Ø¿˚¿¿!¿'¿(¿t¿à¿é¿Æ¿‘¿Â¿È¿Í¿ˆ¿&¿=¿h¿â¿»¿¸¿$¿*¿.¿/¿\¿u¿ú¿À¿‡¿Ì¿¿¿¿¿Y¿d¿i¿¥¿˙¿¿¿(¿R¿u¿É¿â¿ä¿∫¿»¿Œ¿œ¿·¿4¿<¿@¿A¿M¿n¿ë¿ü¿•¿¶¿∏¿Ÿ¿·¿Â¿Ê¿Ú¿	'¿	(¿	4¿	j¿	¡¿
¿
.¿
V¿
~¿
∂¿
¿¿
Ë¿
È¿¿2¿S¿z¿°¿–¿ˇ¿2¿r¿œ¿Ò¿¿¿N¿É¿∑¿¿	¿¿¿¿`¿a¿ç¿≥¿¥¿¿¿˙¿¿O¿W¿[¿\¿†¿√¿⁄¿Ô¿¿F¿T¿X¿Y¿ú¿ø¿’¿Í¿¿?¿M¿Q¿R¿ó¿∫¿“¿Á¿¿t¿û¿¨¿∞¿±¿≤¿¿¿O¿…¿¿¿¿c¿è¿±¿≤¿–¿¿2¿?¿ñ¿◊¿¿á¿ç¿é¿∆¿˚¿1¿¿†¿Á¿Î¿Ï¿.¿Z¿|¿}¿õ¿—¿˝¿
¿a¿¢¿·¿Á¿Ë¿7¿X¿ß¿Ú¿¿1¿â¿„¿Á¿Ë¿M¿N¿ò¿Í¿Ó¿Ô¿7¿R¿X¿°¿¬¿»¿	¿I¿t¿ò¿¡¿¿˛¿¿¿*¿`¿ú¿Ú¿ ¿ "¿ /¿ \¿ b¿ ô¿ ö¿ ∫¿ “¿ ˘¿!*¿!\¿!É¿!Ø¿!˛¿"	¿"¿"8¿"?¿"C¿"⁄¿"€¿#¿#9¿#à¿#ß¿#≈¿#Ã¿$¿$¿$P¿$ù¿$Ï¿%¿%'¿%K¿%Q¿%U¿%Ã¿%Õ¿&¿&=¿&á¿&°¿&‡¿&Ì¿'!¿''¿'+¿',¿'d¿'ì¿'≥¿(¿(¿(¿(!¿(®¿(©¿)É¿)Ñ¿)‡¿*"¿*\¿*`¿*a¿*Ø¿*Í¿+¿+"¿+#¿+Ö¿+ﬁ¿,¿,¿,¿,¿,~¿,±¿,·¿-¿-.¿-/¿-Z¿-ì¿-Ã¿-Õ¿.S¿.s¿.£¿.…¿.–¿.¯¿.¸¿.˝¿/5¿/m¿/á¿/ö¿/†¿/Ã¿/–¿/—¿0¿0k¿0ñ¿0…¿1¿1_¿1`¿1n¿1ﬂ¿2a¿2Œ¿2œ¿2Ï¿3É¿4&¿4¥¿5E¿5Î¿6E¿6Ë¿7v¿8¿8¿8¿8W¿8¢¿9)¿9*¿9w¿9|¿9}¿9â¿9∞¿9ﬁ¿:¿:¿:e¿:}¿:∫¿:–¿:Î¿;¿;8¿;j¿;π¿;∆¿;ﬁ¿<¿<,¿<T¿<s¿<ù¿<Û¿= ¿=M¿=à¿=ª¿>¿>Z¿>è¿>¿?¿?=¿?N¿?ù¿?œ¿?˙¿@¿@V¿@å¿@∆¿@ı¿A(¿AY¿Aê¿A¡¿AÒ¿B-¿BF¿Bn¿Bô¿Bﬁ¿C¿CT¿C{¿CÆ¿C˚¿DE¿Dä¿D√¿D¯¿E+¿EX¿Eã¿Eæ¿EÔ¿F&¿Fe¿Fœ¿G¿G;¿Gj¿G⁄¿H¿H`¿Hô¿H¡¿H˛¿IM¿IÜ¿I¡¿I¸¿JF¿Jë¿J⁄¿K%¿Kw¿K¨¿KÈ¿L+¿Lx¿L≥¿LÃ¿L„¿L¯¿M¿M¿M+¿M8¿MC¿ML¿MS¿MW¿MX¿Må¿Mí¿M◊¿N#¿N@¿N^¿N¿Nµ¿Nˇ¿OJ¿Of¿O´¿O„¿OÏ¿PR¿P™¿PÀ¿Q%¿Q[¿Q™¿Q¥¿Qº¿QÙ¿Q˙¿RM¿Rù¿RÓ¿S¿Sq¿SÀ¿T@¿TO¿T∞¿T∏¿T˚¿UD¿U_¿U•¿U∞¿Uπ¿Uø¿U¿¿U˜¿V#¿V;¿VV¿Vä¿Vë¿Vï¿Vó¿Vò¿Vœ¿V›¿VÏ¿W
¿W#¿WK¿Wq¿Wá¿Wß¿W≈¿W‚¿W˛¿X¿X=¿XY¿Xu¿Xà¿X£¿X∏¿X—¿XÙ¿Y¿Y2¿YC¿Yi¿Yà¿Y¢¿Yª¿Y‰¿Z¿Z¿Z1¿ZQ¿Zy¿Z≤¿ZÈ¿[¿[>¿[b¿[|¿[ñ¿[∂¿[‹¿\¿\A¿\B¿\ä¿\æ¿\¯¿]$¿]O¿]o¿]è¿]ó¿]™¿]≤¿]≈¿]…¿] ¿]È¿^	¿^%¿^M¿^s¿^ô¿^¡¿^Ÿ¿^¿_¿_¿_5¿_K¿_k¿_ä¿_™¿_«¿_Ï¿`¿`'¿`A¿`q¿`ò¿`∑¿`‰¿a	¿a%¿aC¿aa¿a~¿a°¿a—¿aˇ¿b(¿b]¿b~¿b¢¿b¬¿b›¿bﬁ¿bÍ¿c&¿cA¿cY¿cy¿c´¿cŸ¿d¿d+¿dG¿da¿d{¿dï¿dØ¿d«¿dÂ¿e¿e3¿eO¿es¿e±¿e”¿eÈ¿f¿f<¿fj¿fä¿f∏¿fﬁ¿f˛¿g ¿gB¿gd¿gñ¿g»¿g¯¿h6¿hj¿hî¿hº¿h‰¿i¿i¿i¿i¿i¿im¿i~¿iò¿i∫¿iÓ¿j¿j>¿j\¿jx¿jî¿j∞¿jÃ¿jÊ¿k¿k.¿kX¿kv¿kú¿k‹¿l ¿l¿l@¿lo¿lü¿l«¿l˜¿m¿m;¿m_¿mÉ¿mß¿m€¿n¿nM¿nÉ¿nØ¿n„¿o¿o1¿o^¿ob¿od¿oe¿oó¿o¥¿oÕ¿oÍ¿p	¿p1¿pL¿pR¿pS¿pi¿pÜ¿p•¿p–¿pÊ¿pÁ¿pÛ¿q9¿q;¿q<¿qò¿qÒ¿qÚ¿q˛¿r¿r*¿rD¿rÜ¿rå¿rê¿rë¿rù¿r‘¿r˙¿s*¿sl¿sr¿ss¿s£¿s·¿sÁ¿sÎ¿sÏ¿s¯¿t¿tG¿t\¿t`¿ta¿t”¿t‘¿t˝¿u ¿u!¿u-¿uc¿ud¿up¿uò¿uΩ¿v¿v;¿v?¿v@¿vL¿vq¿võ¿v»¿v‹¿v‚¿w¿w¿w%¿wQ¿we¿wk¿w´¿w›¿x¿xs¿xw¿xx¿xÑ¿xò¿x›¿y¿y)¿y/¿yg¿yŒ¿y“¿y”¿yﬂ¿z¿z¿z#¿z%¿z&¿zV¿zu¿zè¿z§¿z∏¿z–¿zÓ¿{¿{[¿{£¿{„¿{Ó¿{Ô¿|L¿|_¿|`¿|l¿|„¿}¿}.¿}B¿}í¿}ò¿}¥¿}∆¿}Ÿ¿}Í¿~¿~¿~#¿~8¿~>¿~B¿~D¿~E¿~ó¿~æ¿~¬¿¿Y¿©¿Ã¿–¿Ä¿Äg¿Ä≤¿Ä˛¿ÅK¿Åö¿Åœ¿Å”¿Ç!¿ÇW¿Çv¿Çè¿Çê¿Çπ¿Ç∫¿É¿ÉD¿ÉE¿Éê¿É—¿É“¿Ñ	¿Ñ¿ÑW¿Ñé¿Ñï¿Ñô¿Ñõ¿Ñú¿ÑÏ¿ÑÌ¿Ö¿ÖO¿ÖP¿Ö\¿Öá¿Öà¿Öî¿Ö˝¿Ü	¿Üü¿Ü°¿Ü¢¿ÜÒ¿á@¿át¿á¶¿á⁄¿á€¿áÁ¿à¿à¿à¿à`¿à†¿àˆ¿â"¿â*¿â0¿âZ¿â^¿â_¿âk¿â≠¿ä¿ä]¿äç¿äï¿äõ¿ä⁄¿äﬁ¿ä‡¿ä·¿ã,¿ãw¿ã∏¿ãÈ¿å¿å¿å)¿åT¿åU¿åa¿å¢¿å˘¿ç¿çy¿çÄ¿çÑ¿çÖ¿çë¿ç”¿é*¿éë¿é™¿é¿é˜¿é˚¿é¸¿è¿è?¿èñ¿è˝¿ê¿ê:¿ê}¿êÑ¿êà¿êä¿êã¿ê‘¿ë ¿ë?¿ë@¿ëf¿ëg¿ës¿ëû¿ëü¿ë´¿ëÏ¿í¿í?¿íã¿í‡¿íÁ¿íÎ¿í˜¿ì9¿ìR¿ìä¿ì÷¿î+¿î2¿î6¿î8¿î9¿îÖ¿î–¿îË¿ï¿ï%¿ï:¿ïU¿ïZ¿ï[¿ïÅ¿ïÇ¿ïé¿ïπ¿ï∫¿ï∆¿ñ¿ñ ¿ñZ¿ña¿ñe¿ñf¿ñr¿ñ¥¿ñÕ¿ó¿ó,¿ó3¿ó7¿ó9¿ó:¿óÖ¿óí¿ó¬¿óÙ¿óı¿ò¿ò,¿ò-¿ò9¿òö¿ò¶¿òË¿ô¿ô-¿ôT¿ô[¿ô_¿ôa¿ôb¿ô≤¿ô≥¿ôÏ¿ö ¿öi¿öj¿öì¿öº¿öΩ¿ö…¿öÛ¿õI¿õx¿õ|¿õ}¿õâ¿õ ¿ú¿ú=¿úD¿úH¿úI¿úU¿úó¿úœ¿ù¿ù¿ù¿ù¿ù¿ùi¿ùñ¿ùô¿ùÊ¿û¿ûK¿ûí¿ûì¿ûº¿û‘¿û’¿û·¿ü0¿ü1¿ü=¿ü~¿üì¿ü–¿†f¿†j¿†k¿†w¿†π¿†Œ¿°¿°£¿°ß¿°©¿°™¿°Ù¿¢B¿¢T¿¢Å¿¢»¿¢…¿¢Ù¿£ ¿£!¿£-¿£W¿£≤¿£„¿£Á¿£Ë¿£Ù¿§n¿§o¿§{¿§¯¿§˙¿§˚¿•L¿•ß¿•È¿•Í¿¶¿¶P¿¶Q¿¶ê¿¶¡¿¶‡¿ß¿ßF¿ßg¿ßä¿ßã¿ß°¿®¿®j¿®q¿®u¿®v¿®Ç¿®∏¿®Ù¿©¿©¿©6¿©S¿©e¿©⁄¿©„¿©È¿©Í¿™5¿™q¿™Ñ¿™ä¿™ ¿™Á¿™˘¿´¿´à¿´é¿´è¿´™¿´∫¿´”¿´˙¿¨¿¨\¿¨Ñ¿¨ç¿¨î¿¨ò¿¨ô¿¨•¿¨˝¿¨ˇ¿≠ ¿≠f¿≠Ñ¿≠î¿≠∫¿≠ﬂ¿≠‰¿≠Â¿Æ¿Æ0¿Æu¿Æv¿Æ°¿Æ¢¿ÆÏ¿Ø¿Ø:¿Øe¿Øß¿ØŒ¿Ø’¿∞$¿∞}¿∞Å¿∞Ç¿∞…¿∞„¿±¿±H¿±å¿±ì¿±≈¿≤"¿≤&¿≤'¿≤3¿≤i¿≤•¿≤ƒ¿≤≈¿≥$¿≥N¿≥Ñ¿≥•¿≥À¿≥Ï¿¥2¿¥z¿¥É¿¥â¿¥ä¿¥·¿¥˛¿µ¿µr¿µ{¿µÅ¿µÇ¿µÕ¿∂&¿∂P¿∂c¿∂i¿∂Ã¿∂È¿∂˚¿∑i¿∑r¿∑x¿∑y¿∑±¿∑≤¿∏¿∏8¿∏Z¿∏ó¿∏∂¿∏◊¿∏‚¿π)¿πH¿πi¿πî¿πü¿πß¿π≠¿πÆ¿π‡¿∫¿∫N¿∫O¿∫à¿∫∂¿∫È¿∫Í¿ª6¿ªr¿ªØ¿ªÔ¿º¿º¿º=¿ºU¿ºã¿ºµ¿º¿¿º…¿ºœ¿º–¿ºÎ¿º˚¿Ωe¿Ωl¿Ωp¿Ωq¿Ω}¿Ωª¿ΩΩ¿Ωæ¿æ:¿æê¿æë¿æ≤¿ø,¿ø-¿ø9¿ø§¿ø‡¿øˇ¿¿ ¿¿K¿¿§¿¿Œ¿¿·¿¿Á¿¿Ë¿¡&¿¡X¿¡è¿¡∆¿¡«¿¬r¿¬ö¿¬“¿√]¿√e¿√ò¿√ô¿√¥¿√ƒ¿ƒ.¿ƒ5¿ƒ9¿ƒ:¿ƒF¿ƒ•¿ƒß¿ƒ®¿≈¿≈T¿≈U¿≈v¿≈w¿≈©¿≈…¿≈ ¿≈˛¿∆5¿∆U¿∆Å¿∆è¿∆ï¿∆¡¿«¿«l¿« ¿»-¿»L¿»o¿»ã¿»ë¿»ï¿»ñ¿»¢¿»’¿…¿…¿…a¿…±¿…’¿…„¿…È¿…Í¿ ¿ ?¿ [¿ a¿ b¿ ß¿À	¿À
¿Àj¿Àò¿À≥¿Ã¿ÃW¿ÃÖ¿Ã≤¿Ã≥¿Ã«¿Ã◊¿Õ)¿Õ0¿Õb¿Õã¿ÕØ¿Õµ¿Õπ¿Õ∫¿Õ∆¿Œ¿Œ¿Œ¿ŒK¿Œk¿Œl¿Œç¿Œé¿Œö¿Œ‚¿Œ˝¿œ¿œ*¿œ@¿œé¿œ§¿œ≠¿œ¥¿œ∏¿œπ¿œ≈¿–¿–¿–¿–Q¿–u¿–v¿–ó¿–ò¿–§¿–Ì¿—¿—9¿—F¿—o¿—u¿—y¿—z¿—Ü¿—Î¿—Ì¿—Ó¿“#¿“6¿“Ä¿“Å¿“∑¿“ª¿”
¿”O¿”ù¿”Í¿”˘¿”˝¿‘H¿‘ì¿‘∆¿‘˙¿’¿’1¿’O¿’n¿’t¿’u¿’¶¿’º¿’Ω¿’ˇ¿÷)¿÷*¿÷c¿÷i¿÷π¿◊¿◊0¿◊6¿◊É¿◊ô¿◊«¿◊»¿◊‘¿ÿ¿ÿ ¿ÿ!¿ÿe¿ÿ≥¿ÿÌ¿Ÿ¿Ÿ¿ŸS¿Ÿ¢¿Ÿ∞¿Ÿ˙¿Ÿ˚¿⁄!¿⁄=¿⁄A¿⁄B¿⁄h¿⁄Ñ¿⁄à¿⁄â¿⁄∑¿⁄‘¿⁄‚¿⁄Ë¿€¿€*¿€0¿€i¿€Ö¿€´¿€≥¿€∑¿€∏¿€…¿‹¿‹¿‹¿‹¿‹Y¿‹]¿‹^¿‹j¿‹¿‹ñ¿‹»¿‹Ï¿›	¿›¿›¿›G¿›K¿›L¿›X¿›ê¿›∂¿›Î¿ﬁ¿ﬁ3¿ﬁ_¿ﬁe¿ﬁi¿ﬁj¿ﬁv¿ﬁâ¿ﬁ∂¿ﬁ‘¿ﬁÈ¿ﬁÌ¿ﬁÓ¿ﬁ˙¿ﬂ!¿ﬂ5¿ﬂ]¿ﬂÎ¿‡y¿‡Ç¿‡ù¿‡§¿‡®¿‡™¿‡´¿‡¯¿·¿·%¿·P¿·`¿·a¿·Ä¿·Å¿·ƒ¿·◊¿·ÿ¿‚¿‚E¿‚F¿‚q¿‚w¿‚π¿‚–¿‚È¿‚˚¿„¿„!¿„'¿„(¿„Z¿„[¿„|¿„ä¿„ê¿„ë¿„‚¿‰¿‰<¿‰o¿‰u¿‰ã¿‰™¿‰Æ¿‰Ø¿‰Ë¿‰Ó¿Â>¿ÂL¿ÂR¿Âé¿Âú¿Âµ¿Â»¿ÂŒ¿Âœ¿Ê¿Ê¿Ê¿Ê4¿Ê:¿Ê;¿ÊT¿ÊX¿ÊY¿Êë¿Êó¿Ê·¿Ê˜¿Ê˝¿Á9¿ÁG¿Á`¿Ás¿Áy¿Áz¿Á¨¿Á≠¿Á“¿ÁÌ¿ÁÛ¿ÁÙ¿Ë¿Ë¿Ë¿Ë:¿ËK¿Ë^¿Ëo¿Ës¿Ët¿ËÄ¿Ëñ¿Ë∂¿Ë∫¿Ëº¿ËΩ¿Ë˛¿È6¿È7¿Èn¿È§¿È•¿ÈÚ¿Í¿Í¿Íe¿ÍÇ¿Í†¿Í∆¿Íı¿Î¿Î¿Î&¿ÎH¿ÎV¿ÎW¿Îq¿Îá¿Î†¿Î¿¿Î’¿Î€¿ÎÚ¿Ï¿Ï¿Ï,¿ÏM¿Ï|¿Ïì¿Ïõ¿ÏØ¿Ï∑¿Ï ¿Ïœ¿Ï—    !_kCursorBlinkHalfPeriod"_kObscureShowLatestCharCursorTicks_kIPadWidthTextEditingControllerToolbarOptions	_KeyFrame_DiscreteKeyFrameSimulationEditableTextEditableTextState	_Editable_ScribbleFocusable_ScribbleFocusableState_ScribblePlaceholder_TextBoundary_CodeUnitBoundary_WhitespaceBoundary_CharacterBoundary_WordBoundary
_LineBreak_DocumentBoundary_ExpandedTextBoundary_CollapsedSelectionBoundary_MixedBoundary_DeleteTextAction_UpdateTextSelectionAction%_ExtendSelectionOrCaretPositionAction(_UpdateTextSelectionToAdjacentLineAction_SelectAllAction_CopySelectionAction_TextEditingHistory_TextEditingHistoryState
_UndoStack	_throttle Ñ'